// <auto-generated />
using System;
using System.Collections.Generic;
using IntegrationLibrary.BloodSubscription.Model;
using IntegrationLibrary.Settings;
using IntegrationLibrary.Tender.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IntegrationLibrary.Migrations
{
    [DbContext(typeof(IntegrationDbContext))]
    [Migration("20230113015423_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("IntegrationLibrary.BloodBank.BloodBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ServerAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BloodBanks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2727aa43-75af-421c-9202-463f1daeebda"),
                            Email = "tasaantic00@gmail.com",
                            Name = "BloodBank",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            ServerAddress = "localhost"
                        },
                        new
                        {
                            Id = new Guid("43336b7c-6b59-403c-a814-e059052e45ed"),
                            Email = "tasaantic00@gmail.com",
                            Name = "TamaraBank",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADi",
                            ServerAddress = "localhost"
                        });
                });

            modelBuilder.Entity("IntegrationLibrary.BloodRequests.Model.BloodRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("BloodBankId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoctorUsername")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ebc7418-9db7-457f-8b98-4170f6b66ffd"),
                            Amount = 10.0,
                            BloodBankId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Comment = "",
                            Date = new DateTime(2022, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorUsername = "Ilija",
                            Reason = "Operacija",
                            Status = 2,
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("c65df01f-de12-4873-b274-4ba1b7a4c618"),
                            Amount = 20.0,
                            BloodBankId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Comment = "",
                            Date = new DateTime(2022, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorUsername = "Ilija",
                            Reason = "Transfuzija",
                            Status = 2,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("be8082fc-d424-4059-8264-418a52751b84"),
                            Amount = 20.0,
                            BloodBankId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Comment = "",
                            Date = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorUsername = "Ilija",
                            Reason = "Transfuzija",
                            Status = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("92127a78-14e3-4f61-a5f6-cf4c788fe6a3"),
                            Amount = 5.0,
                            BloodBankId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Comment = "",
                            Date = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorUsername = "Ilija",
                            Reason = "Zalihe",
                            Status = 2,
                            Type = 6
                        });
                });

            modelBuilder.Entity("IntegrationLibrary.BloodSubscription.Model.AmountOfBloodType", b =>
                {
                    b.Property<int>("amount")
                        .HasColumnType("integer");

                    b.Property<int>("bloodType")
                        .HasColumnType("integer");

                    b.ToTable("AmountOfBloodType");
                });

            modelBuilder.Entity("IntegrationLibrary.BloodSubscription.Model.MounthlyBloodSubscription", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<AmountOfBloodType>>("amountOfBloodTypes")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("bloodBankId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("dateAndTimeOfSubscription")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("BloodSubscriptions");
                });

            modelBuilder.Entity("IntegrationLibrary.ConfigureGenerateAndSend.Model.ConfigureGenerateAndSend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<string>("GeneratePeriod")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextDateForSending")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SendPeriod")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConfigureGenerateAndSend");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f811589f-942f-4fa7-820c-b4096d44bf92"),
                            BloodBankName = "Moja Banka Krvi",
                            GeneratePeriod = "ONE_MONTH",
                            NextDateForSending = new DateTime(2023, 1, 13, 2, 54, 23, 84, DateTimeKind.Local).AddTicks(2239),
                            SendPeriod = "EVERY_TWO_MINUT"
                        },
                        new
                        {
                            Id = new Guid("53cea329-8855-4ac5-b748-35f2e942fcef"),
                            BloodBankName = "Nova banka",
                            GeneratePeriod = "TWO_MONTH",
                            NextDateForSending = new DateTime(2023, 1, 13, 2, 54, 23, 86, DateTimeKind.Local).AddTicks(2473),
                            SendPeriod = "ONE_MONTH"
                        });
                });

            modelBuilder.Entity("IntegrationLibrary.NewsFromBloodBank.Model.NewsFromBloodBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("apiKey")
                        .HasColumnType("text");

                    b.Property<string>("base64image")
                        .HasColumnType("text");

                    b.Property<string>("bloodBankName")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<int>("newsStatus")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NewsFromBloodBank");
                });

            modelBuilder.Entity("IntegrationLibrary.PDFReportDetails.Model.PDFReportDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PdfName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PDFReportDetails");
                });

            modelBuilder.Entity("IntegrationLibrary.Tender.Model.BloodUnitAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenderId");

                    b.ToTable("BloodUnitAmounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("318194b0-85a6-43ac-b987-463f6d2c5b2d"),
                            Amount = 10,
                            BloodType = 0,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("3b5fa4b8-e790-4efe-a803-80ba26096255"),
                            Amount = 15,
                            BloodType = 1,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("54f3b85d-6997-4075-974b-0a1872f81dad"),
                            Amount = 5,
                            BloodType = 2,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("0c83d6f7-c3e2-48ff-afc3-dfd9c8b84815"),
                            Amount = 17,
                            BloodType = 3,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("87261e8c-ed67-45c6-96e2-e6e2775556f3"),
                            Amount = 12,
                            BloodType = 4,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("171ce85e-6077-4e45-838e-f5ad7a9a1b06"),
                            Amount = 7,
                            BloodType = 5,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("47819be4-36c4-4a2b-b1cf-24b0013b9ef5"),
                            Amount = 10,
                            BloodType = 6,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("5143a7aa-e2f0-470a-9eb4-957973082a89"),
                            Amount = 0,
                            BloodType = 7,
                            TenderId = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5")
                        },
                        new
                        {
                            Id = new Guid("282ed418-4ba8-4e56-ab39-bfaf1a691545"),
                            Amount = 7,
                            BloodType = 5,
                            TenderId = new Guid("62b76dce-e0d5-4acd-8ac0-359d62fd1515")
                        },
                        new
                        {
                            Id = new Guid("e2834992-a0b2-4f7b-90d4-f8b2722a7175"),
                            Amount = 10,
                            BloodType = 6,
                            TenderId = new Guid("62b76dce-e0d5-4acd-8ac0-359d62fd1515")
                        },
                        new
                        {
                            Id = new Guid("3c08d08b-bcaf-4ac0-a146-7203d498b0a0"),
                            Amount = 14,
                            BloodType = 7,
                            TenderId = new Guid("62b76dce-e0d5-4acd-8ac0-359d62fd1515")
                        },
                        new
                        {
                            Id = new Guid("b26afa32-3862-40e9-81e5-571c76f31d69"),
                            Amount = 7,
                            BloodType = 5,
                            TenderId = new Guid("24519c26-78f4-4728-ab9d-bf6a78aa29da")
                        },
                        new
                        {
                            Id = new Guid("1684c057-1c5b-4a2d-a81c-ded9acf03cb5"),
                            Amount = 10,
                            BloodType = 6,
                            TenderId = new Guid("24519c26-78f4-4728-ab9d-bf6a78aa29da")
                        },
                        new
                        {
                            Id = new Guid("b765584f-f9e5-455c-a3ce-baf514caecf4"),
                            Amount = 14,
                            BloodType = 7,
                            TenderId = new Guid("24519c26-78f4-4728-ab9d-bf6a78aa29da")
                        });
                });

            modelBuilder.Entity("IntegrationLibrary.Tender.Model.Tender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("HasDeadline")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<IEnumerable<TenderOffer>>("TenderOffer")
                        .HasColumnType("jsonb");

                    b.Property<TenderOffer>("Winner")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("Tenders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19ae9440-401a-4dac-81d2-6139588f8cd5"),
                            DeadlineDate = new DateTime(2023, 2, 2, 2, 54, 23, 86, DateTimeKind.Local).AddTicks(3769),
                            HasDeadline = true,
                            PublishedDate = new DateTime(2023, 1, 13, 2, 54, 23, 86, DateTimeKind.Local).AddTicks(3967),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("62b76dce-e0d5-4acd-8ac0-359d62fd1515"),
                            DeadlineDate = new DateTime(2023, 1, 12, 2, 54, 23, 86, DateTimeKind.Local).AddTicks(4261),
                            HasDeadline = true,
                            PublishedDate = new DateTime(2023, 1, 9, 2, 54, 23, 86, DateTimeKind.Local).AddTicks(4267),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("24519c26-78f4-4728-ab9d-bf6a78aa29da"),
                            DeadlineDate = new DateTime(2023, 1, 9, 2, 54, 23, 86, DateTimeKind.Local).AddTicks(4271),
                            HasDeadline = true,
                            PublishedDate = new DateTime(2023, 1, 3, 2, 54, 23, 86, DateTimeKind.Local).AddTicks(4273),
                            Status = 2
                        });
                });

            modelBuilder.Entity("IntegrationLibrary.Tender.Model.TenderOffer", b =>
                {
                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RealizationDate")
                        .HasColumnType("timestamp without time zone");

                    b.ToTable("TenderOffer");
                });

            modelBuilder.Entity("IntegrationLibrary.BloodBank.BloodBank", b =>
                {
                    b.OwnsOne("IntegrationLibrary.BloodBank.Model.ApiKey", "ApiKey", b1 =>
                        {
                            b1.Property<Guid>("BloodBankId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("BloodBankId");

                            b1.ToTable("BloodBanks");

                            b1.WithOwner()
                                .HasForeignKey("BloodBankId");

                            b1.HasData(
                                new
                                {
                                    BloodBankId = new Guid("2727aa43-75af-421c-9202-463f1daeebda"),
                                    Value = "bHaCSLjsmN+NT6SGY1k81KvTOEW4QVDonP5DF1Y+tyU="
                                },
                                new
                                {
                                    BloodBankId = new Guid("43336b7c-6b59-403c-a814-e059052e45ed"),
                                    Value = "4GbC6Ss42a7mAJRA0ACwLDQI+9A7r+8CdvyI3zDTMA4="
                                });
                        });

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("IntegrationLibrary.Tender.Model.BloodUnitAmount", b =>
                {
                    b.HasOne("IntegrationLibrary.Tender.Model.Tender", "Tender")
                        .WithMany("BloodUnitAmount")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("IntegrationLibrary.Tender.Model.Tender", b =>
                {
                    b.Navigation("BloodUnitAmount");
                });
#pragma warning restore 612, 618
        }
    }
}
