// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221215075634_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<Guid>("ConsiliumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27c3fcba-9ac9-4009-a7fb-7ff2c2372b7a"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Moja Banka Krvi",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Moja Banka Krvi",
                            UserRole = 4,
                            Username = "BloodBank"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebae98ac-8e07-4f73-9987-e2391ab7ec0e"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Emergent = false,
                            PatientId = new Guid("5ffbd263-5867-42e4-8254-d5a6e7e47375")
                        },
                        new
                        {
                            Id = new Guid("bee5921d-a85c-4283-87f5-4e6e1c365368"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Emergent = false,
                            PatientId = new Guid("5ffbd263-5867-42e4-8254-d5a6e7e47375")
                        },
                        new
                        {
                            Id = new Guid("4e6f3625-2ef1-4e39-9d1a-1799e6aea46c"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Emergent = false,
                            PatientId = new Guid("5ffbd263-5867-42e4-8254-d5a6e7e47375")
                        },
                        new
                        {
                            Id = new Guid("a157e0dd-6f00-4673-a2a8-0dfea0d335dc"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Emergent = false,
                            PatientId = new Guid("5ffbd263-5867-42e4-8254-d5a6e7e47375")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58a7b730-4786-4602-9ccc-c4156b5676b9"),
                            Amount = 2,
                            BloodUnitId = new Guid("08df4ac0-09a1-4b28-b13c-184f06948d23"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("7d0a485f-c62e-461d-9c30-4485ac1dcf17"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("1c65d527-6875-45e1-a10a-3b349ae16947"),
                            Amount = 4,
                            BloodUnitId = new Guid("08df4ac0-09a1-4b28-b13c-184f06948d23"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("7d0a485f-c62e-461d-9c30-4485ac1dcf17"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08df4ac0-09a1-4b28-b13c-184f06948d23"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("888b6838-5349-44b7-9ab3-28bb7f1d25f1"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("4c6e8dd5-df25-41a6-86fe-551357a3dcf7"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da99077f-91d3-4475-8a39-342da25882a3"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("f06ba0e2-a08f-4084-af37-d2243e621668"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("5f05b40b-50e1-4478-a023-0da60f1d6bd4"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eeff5627-d874-483f-9ac4-1eeb38fbd681")
                        },
                        new
                        {
                            Id = new Guid("906d8f00-0f78-4998-8223-0a78c2224335")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExaminationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccfde46d-13b7-49a3-b4ca-6e639e55179e"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("ec26bbaa-cd63-46a8-aa11-aea68efbc289"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("0a9a0ce3-587a-4989-8e63-4a7b10081980"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("8c366a1f-98f6-4fb8-a997-61356308abf3"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("b059874f-bb48-40ec-abc6-272d91d749d7"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("5879511f-1b7b-4a68-8ef8-d67a8ae906a5"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("b9134bc5-eca8-4af3-99f4-ed92f2b90078"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("bcefc434-6501-42ff-a07f-c5552654cd08"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("0c351542-f024-49cc-a8ac-66d1fdeb5735"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("6fc7e366-f3c9-40f0-9b86-569b6d186a04"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("bb85edba-1858-4688-8aab-ed409a772393"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("d4d22ef9-cfcd-48ea-81bc-ea82c8d52fd8"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("304c136f-eafe-4048-8074-9b6c488127b6"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("7ab0d00c-7c75-4024-b211-31953940edf2"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("6f3b6bea-dcbf-4830-9bc4-e0087a1ea4a5"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("e82086a0-9f3c-4c3f-be25-b5e8530e94fe"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("d8b065b1-6a11-425e-ba6d-0549e900ecc9"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("72f2f3c9-c04d-4a4b-961f-a4f5636cdfad"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("4fe9778c-5c17-43ec-b19c-dfaa16643d9d"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("49326071-4942-4974-aa9b-881e70654e0a"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("1c01cc4c-e54b-4d6c-acd4-5e75fe5e53fa"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91b02dbe-d30e-4b8d-9cb4-842a48f43067"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7834957a-88ec-465d-ac4a-9498053d0952"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("96b2459e-580b-4cf6-9072-855dafe594ec"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("9bd68902-79e4-41fc-839b-b967c25983bd"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("a4ca9e69-5a9d-46e3-a265-c26fc27701d8"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("bbe3a785-20fb-47af-9adc-cf639a7eabf8"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("015491f9-920f-4a75-bc5f-ec514b2a7d34"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("aae0f5b1-ece9-439b-9ad4-86ad26599f41"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("0997c283-f0c0-4dfe-8fb8-d683ec0f1413"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8730109f-6877-4e68-82cc-cbdd88f417bc"),
                            BuildingId = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("60acb236-11d7-46a3-9b85-5ad43eb2671f"),
                            BuildingId = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("037c56a1-08e0-4511-9456-651367a736a9"),
                            BuildingId = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("c45998e1-250b-4427-a299-9f12fa7e45cb"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("0fcc3ba0-5e90-4476-92a5-cd3724fb71fc"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("8d274cd9-5f23-4edf-9d28-18ac7b9f301b"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4c675ae-2a6f-454b-94c5-40d213986329"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7370e734-f02d-491f-86b7-7095613ed318"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b554632f-50b5-4d94-85ae-f27459fd5ba1"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("436703e2-0312-4765-8aab-39c97c04f3fc"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("4385db90-984d-4af9-83d6-9097850a3e1c"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e8dc9482-21f3-41b2-ab71-2e78eab48ffd"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7893bf95-f000-495c-86d8-009b7d21b8cb"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("1164ecd9-2cd9-40c1-81d7-ea38b3592316"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("ee6abb4f-9f45-4463-845b-b15861715081"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("43ec95b8-37f5-4f93-ab1a-1c1cedfb9d9d"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("51e0011d-b0aa-47e8-8f39-31a93e66dab0"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("538b1f17-2db8-476e-aa65-cfbb2735e469"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("efe4a995-6177-4318-b711-1e6b5987f0c2"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("61107f8e-6c3d-441c-bd2c-9499b222d1cb"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("0a75998e-cbbc-4c01-a909-a053771b6f9e"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("1915f736-18c6-4942-a641-e662bb179959"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22"),
                            BuildingId = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            FloorId = new Guid("8730109f-6877-4e68-82cc-cbdd88f417bc"),
                            GRoomId = new Guid("a4c675ae-2a6f-454b-94c5-40d213986329"),
                            Name = "A11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd"),
                            BuildingId = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            FloorId = new Guid("8730109f-6877-4e68-82cc-cbdd88f417bc"),
                            GRoomId = new Guid("7370e734-f02d-491f-86b7-7095613ed318"),
                            Name = "B11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("436703e2-0312-4765-8aab-39c97c04f3fc"),
                            BuildingId = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            FloorId = new Guid("60acb236-11d7-46a3-9b85-5ad43eb2671f"),
                            GRoomId = new Guid("b554632f-50b5-4d94-85ae-f27459fd5ba1"),
                            Name = "A12",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("e8dc9482-21f3-41b2-ab71-2e78eab48ffd"),
                            BuildingId = new Guid("a7f68475-6e67-4800-82d9-94ee7bd6f79f"),
                            FloorId = new Guid("037c56a1-08e0-4511-9456-651367a736a9"),
                            GRoomId = new Guid("4385db90-984d-4af9-83d6-9097850a3e1c"),
                            Name = "A13",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("1164ecd9-2cd9-40c1-81d7-ea38b3592316"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorId = new Guid("c45998e1-250b-4427-a299-9f12fa7e45cb"),
                            GRoomId = new Guid("7893bf95-f000-495c-86d8-009b7d21b8cb"),
                            Name = "A21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("43ec95b8-37f5-4f93-ab1a-1c1cedfb9d9d"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorId = new Guid("c45998e1-250b-4427-a299-9f12fa7e45cb"),
                            GRoomId = new Guid("ee6abb4f-9f45-4463-845b-b15861715081"),
                            Name = "B21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("538b1f17-2db8-476e-aa65-cfbb2735e469"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorId = new Guid("0fcc3ba0-5e90-4476-92a5-cd3724fb71fc"),
                            GRoomId = new Guid("51e0011d-b0aa-47e8-8f39-31a93e66dab0"),
                            Name = "A22",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("61107f8e-6c3d-441c-bd2c-9499b222d1cb"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorId = new Guid("8d274cd9-5f23-4edf-9d28-18ac7b9f301b"),
                            GRoomId = new Guid("efe4a995-6177-4318-b711-1e6b5987f0c2"),
                            Name = "C23",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("1915f736-18c6-4942-a641-e662bb179959"),
                            BuildingId = new Guid("e0290505-e2c2-4473-b343-011f3a371222"),
                            FloorId = new Guid("8d274cd9-5f23-4edf-9d28-18ac7b9f301b"),
                            GRoomId = new Guid("0a75998e-cbbc-4c01-a909-a053771b6f9e"),
                            Name = "B23",
                            Type = 2
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5f06599-bc99-4206-bffb-82518af85a07"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22")
                        },
                        new
                        {
                            Id = new Guid("37d5cc0c-92ca-4465-860a-5026c3523a42"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22")
                        },
                        new
                        {
                            Id = new Guid("6dae95de-1ba1-4c43-96b6-2e0715454725"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22")
                        },
                        new
                        {
                            Id = new Guid("844e5bfd-255e-413d-aac6-af2eff2339c6"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22")
                        },
                        new
                        {
                            Id = new Guid("6f73253c-6409-4d57-afbc-ad1c684fba97"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd")
                        },
                        new
                        {
                            Id = new Guid("b5fdfda0-7143-41ce-95fe-c5535a0448f9"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd")
                        },
                        new
                        {
                            Id = new Guid("bc2884f7-84bd-4e29-ac33-8c5863575045"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd")
                        },
                        new
                        {
                            Id = new Guid("00f8fd70-c19f-45e4-b37c-cfe098182ec5"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd")
                        },
                        new
                        {
                            Id = new Guid("0a6d2b0f-1962-4e31-8183-1a50a101234f"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("2aecfd54-49af-4384-9462-6d73845dbe0d"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("a63990f4-dad8-4377-b863-c54fde6594a1"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4ba29b50-f1f1-4cef-be06-170964aeedd8"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("436703e2-0312-4765-8aab-39c97c04f3fc")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("105aa40f-048a-4ece-9f33-50a792846ac3"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("e8dc9482-21f3-41b2-ab71-2e78eab48ffd")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4a066f3b-0bdd-41d8-ade6-1e63190d55d2"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("1164ecd9-2cd9-40c1-81d7-ea38b3592316")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("f23bc42c-b3aa-4460-98de-b9226a615687"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("43ec95b8-37f5-4f93-ab1a-1c1cedfb9d9d")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("baa67a67-d02a-480d-889f-8b1d0fdb6281"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("538b1f17-2db8-476e-aa65-cfbb2735e469")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("49e29ac3-f793-42f6-aa83-2838cb721378"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("61107f8e-6c3d-441c-bd2c-9499b222d1cb")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2bad4ba5-0095-4d1e-8b7a-95efe82954b1"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("1915f736-18c6-4942-a641-e662bb179959")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9b388e21-e214-4b99-9553-2d979fc30f8b"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6629dff6-4901-47e3-b93f-1f633f488a81"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("80d67d4d-24c3-43aa-84a2-d96adbbdbfd6"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("e6701ed7-6de5-407d-9928-d206780f79d4"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("436703e2-0312-4765-8aab-39c97c04f3fc")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("67a40e58-e087-49d6-ba87-8d328993d334"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("e8dc9482-21f3-41b2-ab71-2e78eab48ffd")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d5cd41f6-57b1-4e8b-ba09-bb7b82638ad5"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("1164ecd9-2cd9-40c1-81d7-ea38b3592316")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("f273aa50-7232-4855-a51d-df8e82aaec9f"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("1164ecd9-2cd9-40c1-81d7-ea38b3592316")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c175e36f-6557-434a-9e15-ee97a858b9a5"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("43ec95b8-37f5-4f93-ab1a-1c1cedfb9d9d")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("7705cd8f-3258-4f6b-8355-35c363022593"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("61107f8e-6c3d-441c-bd2c-9499b222d1cb")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("30426c39-78b2-44d4-8b75-b463a1b31535"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("1915f736-18c6-4942-a641-e662bb179959")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("Room1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Room2Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Room1Id");

                    b.HasIndex("Room2Id");

                    b.ToTable("RoomMerging");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("newRoomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSpliting");
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ee5e219-5fc0-4603-afe3-548b52b6b3d2"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("14621e59-7575-4c53-b304-30124c345c82"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59183a76-c927-4cc4-987f-b161efde8041"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("a588f944-7da5-4e7b-8df9-9825cc3efe55"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d0a485f-c62e-461d-9c30-4485ac1dcf17"),
                            AddressId = new Guid("14621e59-7575-4c53-b304-30124c345c82"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("280d3b2a-8908-4480-96ec-b0d986453ffd"),
                            SpecializationId = new Guid("5f05b40b-50e1-4478-a023-0da60f1d6bd4"),
                            WorkingScheduleId = new Guid("eeff5627-d874-483f-9ac4-1eeb38fbd681")
                        },
                        new
                        {
                            Id = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            AddressId = new Guid("6ee5e219-5fc0-4603-afe3-548b52b6b3d2"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("5ffabde1-ac61-4bd4-8c85-afb6147d7a22"),
                            SpecializationId = new Guid("f06ba0e2-a08f-4084-af37-d2243e621668"),
                            WorkingScheduleId = new Guid("eeff5627-d874-483f-9ac4-1eeb38fbd681")
                        },
                        new
                        {
                            Id = new Guid("c0afd842-88f3-4eb0-b5c4-5b1af426af9c"),
                            AddressId = new Guid("6ee5e219-5fc0-4603-afe3-548b52b6b3d2"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("538b1f17-2db8-476e-aa65-cfbb2735e469"),
                            SpecializationId = new Guid("f06ba0e2-a08f-4084-af37-d2243e621668"),
                            WorkingScheduleId = new Guid("eeff5627-d874-483f-9ac4-1eeb38fbd681")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("678be9c5-86a7-402e-a72b-6bd3b68c93cb"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        },
                        new
                        {
                            Id = new Guid("522de892-9ec7-4dd4-b48a-d78af6b046ed"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Blood Bank",
                            UserRole = 3,
                            Username = "ManagerBB"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ffbd263-5867-42e4-8254-d5a6e7e47375"),
                            AddressId = new Guid("6ee5e219-5fc0-4603-afe3-548b52b6b3d2"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("0fe87c5f-ef07-4102-840f-7d6f57ea9730"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("23db877e-6fbc-4cb8-8f7d-bfbc9347950b"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("572136d7-ee96-4a5e-a54a-c05a48e0b6ad"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c0afd842-88f3-4eb0-b5c4-5b1af426af9c"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("9258216a-a5dd-42bc-a4dd-e868262567aa"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("fd70357e-13eb-44e6-9cd7-335b868fdc8b"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("4796e4e2-8426-4baa-b155-415a91ad7866"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c0afd842-88f3-4eb0-b5c4-5b1af426af9c"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("a109dc55-0793-4110-9e73-5cbe0f07a302"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c0afd842-88f3-4eb0-b5c4-5b1af426af9c"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("901fb5d3-a91d-406e-bc52-2691b1523c5c"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("7d0a485f-c62e-461d-9c30-4485ac1dcf17"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("8d9f2fb8-d5b8-43f2-8937-9f59c5c26547"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("7d0a485f-c62e-461d-9c30-4485ac1dcf17"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("948f9997-53a4-4b39-935d-c9f41b75fa62"),
                            AddressId = new Guid("135e0e89-2203-4120-a2d2-4d2b0e55416e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c0afd842-88f3-4eb0-b5c4-5b1af426af9c"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("ebae98ac-8e07-4f73-9987-e2391ab7ec0e"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("bee5921d-a85c-4283-87f5-4e6e1c365368"),
                                    From = new DateTime(2022, 12, 15, 8, 56, 32, 935, DateTimeKind.Local).AddTicks(4309),
                                    To = new DateTime(2022, 12, 15, 9, 26, 32, 937, DateTimeKind.Local).AddTicks(682)
                                },
                                new
                                {
                                    AppointmentId = new Guid("4e6f3625-2ef1-4e39-9d1a-1799e6aea46c"),
                                    From = new DateTime(2022, 12, 15, 9, 41, 32, 937, DateTimeKind.Local).AddTicks(810),
                                    To = new DateTime(2022, 12, 15, 10, 11, 32, 937, DateTimeKind.Local).AddTicks(820)
                                },
                                new
                                {
                                    AppointmentId = new Guid("a157e0dd-6f00-4673-a2a8-0dfea0d335dc"),
                                    From = new DateTime(2022, 12, 15, 10, 26, 32, 937, DateTimeKind.Local).AddTicks(825),
                                    To = new DateTime(2022, 12, 15, 10, 56, 32, 937, DateTimeKind.Local).AddTicks(828)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("HospitalLibrary.SharedModel.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("ConsiliumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Duration")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consiliums");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Room");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("eeff5627-d874-483f-9ac4-1eeb38fbd681"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("906d8f00-0f78-4998-8223-0a78c2224335"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("eeff5627-d874-483f-9ac4-1eeb38fbd681"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("906d8f00-0f78-4998-8223-0a78c2224335"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationId");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("91b02dbe-d30e-4b8d-9cb4-842a48f43067"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room1")
                        .WithMany()
                        .HasForeignKey("Room1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room2")
                        .WithMany()
                        .HasForeignKey("Room2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DatesForSearch", b1 =>
                        {
                            b1.Property<Guid>("RoomMergingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomMergingId");

                            b1.ToTable("RoomMerging");

                            b1.WithOwner()
                                .HasForeignKey("RoomMergingId");
                        });

                    b.Navigation("DatesForSearch");

                    b.Navigation("Room1");

                    b.Navigation("Room2");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DatesForSearch", b1 =>
                        {
                            b1.Property<Guid>("RoomSplitingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomSplitingId");

                            b1.ToTable("RoomSpliting");

                            b1.WithOwner()
                                .HasForeignKey("RoomSplitingId");
                        });

                    b.Navigation("DatesForSearch");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
