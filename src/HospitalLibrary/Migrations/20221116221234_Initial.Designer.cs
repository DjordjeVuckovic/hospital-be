// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221116221234_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47c54606-180f-4f97-ae26-078d542fee93"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5247f675-6fc5-4700-be92-bc82524432ee"),
                            Emergent = false,
                            PatientId = new Guid("35c574d9-f951-4c88-a6c4-e6428603ccd7")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de5373d1-a93f-47b7-bf98-acc243e173f0"),
                            Amount = 2,
                            BloodUnitId = new Guid("f2fae117-abef-4d26-8c0f-4224b3f9f474"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("e7265c5d-23ed-49a5-ad31-acafb48b5f98"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("4b69ee2a-d70f-4269-93ca-7230bee0de07"),
                            Amount = 4,
                            BloodUnitId = new Guid("f2fae117-abef-4d26-8c0f-4224b3f9f474"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("e7265c5d-23ed-49a5-ad31-acafb48b5f98"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2fae117-abef-4d26-8c0f-4224b3f9f474"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("feb5447d-925e-4045-aa1f-0a6cc1bc8fec"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("c01a9e32-a03a-4bcd-8c3e-4c2e7f6017ed"),
                            Amount = 1,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a66e328-84ed-4675-98ee-3a5ee4a0d1af"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("06966703-a723-41b7-bea2-2058153acd28"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("bf3ab02b-b50a-4056-a5a6-c0f8dd332e4a"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cc6366f-3dd3-4571-83b7-04605d3563bd")
                        },
                        new
                        {
                            Id = new Guid("bc326031-0f04-48f6-adb6-14c3187ec53c")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d86a8244-1b5f-411d-bfbf-155d5f314a68"),
                            BuildingId = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("168cae2a-18f3-473a-bf26-1621428349b0"),
                            BuildingId = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("8e2c5c2d-8c90-400f-9569-d8e602fe3769"),
                            BuildingId = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("93a3d660-6eb8-4cc1-9c83-f63a1c84d850"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("e8da148b-37e3-400c-abeb-f59957b33c19"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("ccaab702-e4da-40d5-a9ca-c7e7b7f9cfa8"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26eb046b-b919-47ce-bd1d-db5c232f58e7"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("2213318e-5e47-4f0f-bff2-6c1722a832bc"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b7e76b2d-00ea-4cc1-8b83-9d5fa5ea2aa6"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("78639062-a287-4f43-ad3b-029f583d0d04"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("4b861b09-52c8-4bcb-9987-af8d1e5e811c"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("6f080b04-bb3b-4cfd-a8d3-8b2ce9b21090"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("31994448-a94a-4e94-a985-0aa545aa3625"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("bae1f499-4971-4745-9e19-23c398ccd44e"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("5f4b8ef5-6926-4b77-9fc3-27dc55d673a9"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7ef5ef2a-00a7-4aca-94a4-07408db50c3d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("50f2bdbf-bed6-44d4-9c42-b3bcaed9b46c"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("98afdd4f-b6de-43ac-bc2f-549ede452023"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("ede13884-1d9b-490e-8485-539594b699f2"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("403c7ee1-945c-4973-a787-1e67aafedaa6"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7d0b8a82-b315-46ca-9bf7-d97b0659ae5f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("bc6f950f-35c4-4347-8c85-d0ec55b968ee"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7b97b8a8-595c-4504-9ee9-e96c0d1344bb"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2213318e-5e47-4f0f-bff2-6c1722a832bc"),
                            BuildingId = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            FloorId = new Guid("d86a8244-1b5f-411d-bfbf-155d5f314a68"),
                            GRoomId = new Guid("26eb046b-b919-47ce-bd1d-db5c232f58e7"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e"),
                            BuildingId = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            FloorId = new Guid("d86a8244-1b5f-411d-bfbf-155d5f314a68"),
                            GRoomId = new Guid("b7e76b2d-00ea-4cc1-8b83-9d5fa5ea2aa6"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("4b861b09-52c8-4bcb-9987-af8d1e5e811c"),
                            BuildingId = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            FloorId = new Guid("168cae2a-18f3-473a-bf26-1621428349b0"),
                            GRoomId = new Guid("78639062-a287-4f43-ad3b-029f583d0d04"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("31994448-a94a-4e94-a985-0aa545aa3625"),
                            BuildingId = new Guid("add738a4-c9ad-4adc-a8c5-a642b496d816"),
                            FloorId = new Guid("8e2c5c2d-8c90-400f-9569-d8e602fe3769"),
                            GRoomId = new Guid("6f080b04-bb3b-4cfd-a8d3-8b2ce9b21090"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("5f4b8ef5-6926-4b77-9fc3-27dc55d673a9"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorId = new Guid("93a3d660-6eb8-4cc1-9c83-f63a1c84d850"),
                            GRoomId = new Guid("bae1f499-4971-4745-9e19-23c398ccd44e"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("50f2bdbf-bed6-44d4-9c42-b3bcaed9b46c"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorId = new Guid("93a3d660-6eb8-4cc1-9c83-f63a1c84d850"),
                            GRoomId = new Guid("7ef5ef2a-00a7-4aca-94a4-07408db50c3d"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("ede13884-1d9b-490e-8485-539594b699f2"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorId = new Guid("e8da148b-37e3-400c-abeb-f59957b33c19"),
                            GRoomId = new Guid("98afdd4f-b6de-43ac-bc2f-549ede452023"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("7d0b8a82-b315-46ca-9bf7-d97b0659ae5f"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorId = new Guid("ccaab702-e4da-40d5-a9ca-c7e7b7f9cfa8"),
                            GRoomId = new Guid("403c7ee1-945c-4973-a787-1e67aafedaa6"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("7b97b8a8-595c-4504-9ee9-e96c0d1344bb"),
                            BuildingId = new Guid("4d7c2229-22e8-4624-a6dd-de302556e2d1"),
                            FloorId = new Guid("ccaab702-e4da-40d5-a9ca-c7e7b7f9cfa8"),
                            GRoomId = new Guid("bc6f950f-35c4-4347-8c85-d0ec55b968ee"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("280ebab3-b181-4ca3-9238-89556dbb2414"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("2213318e-5e47-4f0f-bff2-6c1722a832bc")
                        },
                        new
                        {
                            Id = new Guid("001bffd0-5751-41a4-99ca-ecbfd76d26b2"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("2213318e-5e47-4f0f-bff2-6c1722a832bc")
                        },
                        new
                        {
                            Id = new Guid("ed257944-f6d2-427a-a725-ec1cb6127136"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("2213318e-5e47-4f0f-bff2-6c1722a832bc")
                        },
                        new
                        {
                            Id = new Guid("f4bd7d3d-938c-4467-bf0d-31b8bf57566d"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("2213318e-5e47-4f0f-bff2-6c1722a832bc")
                        },
                        new
                        {
                            Id = new Guid("0be4aa93-ad2a-42bd-a0c8-6a40326efa98"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e")
                        },
                        new
                        {
                            Id = new Guid("40e1d6b4-00cc-4510-a6b3-b2451febf94b"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e")
                        },
                        new
                        {
                            Id = new Guid("ffc1abd5-0a45-431e-8d61-d5a44f5ba182"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e")
                        },
                        new
                        {
                            Id = new Guid("f554189a-5f2d-4286-9703-2f2cea72855e"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e")
                        },
                        new
                        {
                            Id = new Guid("2eb34a72-f6c8-4a30-9630-ef1865fb7ca9"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfHospitalization")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51513e24-e163-4050-bf0c-a9fd65a72e6c"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("0bbb381b-5ba8-455b-a0dd-26e6418eff14"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("fe5d2383-9923-4795-8f99-7adda27bb4b7"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IngredientPatient");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7265c5d-23ed-49a5-ad31-acafb48b5f98"),
                            AddressId = new Guid("0bbb381b-5ba8-455b-a0dd-26e6418eff14"),
                            Email = "DjordjeLopov@gmail.com",
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("e80abea0-f311-4fe0-b92d-9389a725475e"),
                            SpecializationId = new Guid("bf3ab02b-b50a-4056-a5a6-c0f8dd332e4a"),
                            WorkingScheduleId = new Guid("1cc6366f-3dd3-4571-83b7-04605d3563bd")
                        },
                        new
                        {
                            Id = new Guid("5247f675-6fc5-4700-be92-bc82524432ee"),
                            AddressId = new Guid("51513e24-e163-4050-bf0c-a9fd65a72e6c"),
                            Email = "Cajons@gmail.com",
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("2213318e-5e47-4f0f-bff2-6c1722a832bc"),
                            SpecializationId = new Guid("bf3ab02b-b50a-4056-a5a6-c0f8dd332e4a"),
                            WorkingScheduleId = new Guid("bc326031-0f04-48f6-adb6-14c3187ec53c")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2e555fa-5140-4f4c-a364-9fdf34e86210"),
                            AddressId = new Guid("fe5d2383-9923-4795-8f99-7adda27bb4b7"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35c574d9-f951-4c88-a6c4-e6428603ccd7"),
                            AddressId = new Guid("51513e24-e163-4050-bf0c-a9fd65a72e6c"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale"
                        },
                        new
                        {
                            Id = new Guid("6ed6fbf9-b84c-4c50-9ca0-e4a6ff2c3b79"),
                            AddressId = new Guid("fe5d2383-9923-4795-8f99-7adda27bb4b7"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("47c54606-180f-4f97-ae26-078d542fee93"),
                                    From = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 15, 15, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holiday");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("1cc6366f-3dd3-4571-83b7-04605d3563bd"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("bc326031-0f04-48f6-adb6-14c3187ec53c"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("1cc6366f-3dd3-4571-83b7-04605d3563bd"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("bc326031-0f04-48f6-adb6-14c3187ec53c"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany()
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany()
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("TreatmentReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("TreatmentReportId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TreatmentReportId");

                            b1.ToTable("TreatmentReport");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentReportId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");

                    b.Navigation("TreatmentReports");
                });
#pragma warning restore 612, 618
        }
    }
}
