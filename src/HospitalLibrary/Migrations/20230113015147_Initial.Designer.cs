// <auto-generated />
using System;
using System.Collections.Generic;
using HospitalLibrary.Settings;
using HospitalLibrary.SharedModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20230113015147_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<Guid>("ConsiliumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Jmbg>("Jmbg")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Phone>("Phone")
                        .HasColumnType("jsonb");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e60c03d8-1511-41a7-961a-0e60fb9c636c"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Moja Banka Krvi",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Moja Banka Krvi",
                            UserRole = 4,
                            Username = "BloodBank"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0576733-b7fa-4974-b60c-d3d7e8c9f216"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("09d8369a-4bcf-4636-a757-d6ab40d59060"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("e2f0f436-e57f-46af-aa16-e629407697c8"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("43f92899-f9c2-4f8a-9441-5b099dd0e26e"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("3fa0b63a-92fb-4428-9c1b-852e79069e1b"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("739820c9-7880-4081-b750-4ce984110fd5"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("dcad6271-0e26-4f94-bd02-947bfd3cb7b8"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("20c1eb71-20d5-4f7c-bfd8-acd432653aab"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("4b69775d-1c12-4088-8592-d00a87d665f9"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("2bf1dc7d-bc85-4232-b0b1-e04d11d1cf1a"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("556e5a69-bf8a-4cc7-97e5-380a059828b7"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("10b9d9b4-414a-47bb-a3fe-1493174c4447"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        },
                        new
                        {
                            Id = new Guid("cfee2e95-9bc9-4835-acd8-72a87f7133fb"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Emergent = false,
                            PatientId = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80cd73b0-09c4-43a6-bc28-2c2d10f95c10"),
                            Amount = 2,
                            BloodUnitId = new Guid("6ab296dd-4e43-4c20-a598-08334de07ddb"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("106ae974-ce1a-4e21-884f-8e28ab9d0e37"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("811f7af9-1f33-4b23-a79c-0ec2da2f1bd5"),
                            Amount = 4,
                            BloodUnitId = new Guid("6ab296dd-4e43-4c20-a598-08334de07ddb"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("106ae974-ce1a-4e21-884f-8e28ab9d0e37"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ab296dd-4e43-4c20-a598-08334de07ddb"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("710e2969-b40f-417b-81f9-1d6ecfb49a63"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6555553f-b095-4e01-bbb3-849f202da976"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2aa4b1c3-2373-4c34-9dae-680d7d80e4c9"),
                            Amount = 5,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Source = "URGENT"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Common.EventSourcing.DomainEvent<HospitalLibrary.Appointments.DomainEvents.EventStoreSchedulingAppointmentType>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("DomainEvent<EventStoreSchedulingAppointmentType>");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f637627-8b51-4091-b027-21883b61e72c"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("fa838465-5f15-4ced-ae08-8f8a1f4991c2"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("cc42df20-363f-4d79-b9d2-5effc6ee4634"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d104ae9b-ee45-4423-b194-488e145621d9")
                        },
                        new
                        {
                            Id = new Guid("021f0a2d-c6f8-4a3e-8fec-87f62826a167")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.EventStores.EventStoreExamination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Data")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId");

                    b.ToTable("EventStoreExaminations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d47644c4-80fa-44e9-a4ef-c0f981bdf85c"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("891ae072-fc32-4edf-93fe-9ee39582ab2f"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("68de85e1-1537-464b-bbfc-fc447e46d860"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("b5505320-43e6-467b-86aa-804edd910a88"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("4a0ceb88-73be-44cf-900a-a294c2193397"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("e1283090-1b19-4d78-9625-3b23ec6845d2"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("226b1b76-c2a4-4d91-a358-8769a86d8fee"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("290b0ed3-b163-4452-8b53-cb8bf69888c9"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("e14530af-68b2-41ae-a15b-e5588d64911b"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("8627701d-c7f5-4e6b-b2e4-8739be146ed2"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("09f2084c-32a4-42f6-ae38-4d0b82c74d22"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("6933faab-293b-4a14-9855-ca8d702c72f0"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("c8d9ef86-b116-40d9-b3bb-132f5460a7e5"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("7ff613a0-20dc-43b7-b7be-b16a4df66b0b"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("0dcd97d3-2bde-4a98-a1c8-0eee780003c4"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("a054e9b6-7f66-46fa-8778-e941ca21f82c"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("5fab9f92-947e-4404-84d7-0b124fa27168"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("0f70eff3-d322-47fa-9c91-eeb362b8f2fd"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("a8a67d72-8689-4656-a9bd-0e75c4f26ccc"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("4a017243-3ff0-4e31-9ee5-37f0e7725695"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("935a4de8-4c4c-409d-b28a-8a742b870d47"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a57d6c9-6239-4251-825d-881053873621"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bad64163-531f-4124-9e57-d176690ecc81"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("da066c33-695f-48c4-90b7-946cbcfb5d3b"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("89a410e9-17bb-42a9-ab23-d6b0ed2ec7d7"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("26651aa3-b625-4c13-a32e-25fbb991c413"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("46541ceb-8847-449e-bc25-0a75b27593d0"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("17f6208d-e451-45b3-b253-60b8e6c2ea7c"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("00300b1a-e51b-4cc4-8f57-54896eee64e7"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("852d3800-9ad9-4802-a885-31a90a121994"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Malicious")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfCancellations")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MaliciousPatients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("PatientHealthState");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthStateNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Notifications")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHealthStateNotification");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb3bc660-b5cb-486d-8277-b3ffac62a383"),
                            BuildingId = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("fa80debf-a147-4aa5-be4e-2adc6b2c1794"),
                            BuildingId = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("4f74a46e-a341-431d-87b5-cd19f0e00ec5"),
                            BuildingId = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("a9426238-4726-4d35-becf-36ce525cb1ca"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("7489e06d-b9ee-4c38-959f-2009f53b4918"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("ec1aaf90-6aa8-4515-b078-4ff72a21eadd"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fb30e0b-180c-48a7-98d1-b33558243ff2"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b7dd6790-fbd0-4968-ac89-143b2d303475"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("66589383-6120-4413-a662-7514eb517243"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("6d3aa3c6-7083-42da-944f-fac4cf10c040"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("9f682da0-0a5c-41cf-999e-db9c2715a6f2"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c1ba9060-59d0-4212-86ce-d5ef73441c75"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("84c2dadc-7d7d-4d0a-b44c-dec720ecc730"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("1b6835b7-c14b-4488-a9fd-42f68470d0c2"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("3c7b3406-f1ad-4e4a-9d0a-4565d671686c"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("b7023d87-6e8e-4d26-80cc-70c543997336"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e986202e-57bb-4efd-a4c7-00968a1b8742"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("89038e1f-ca34-4965-b8f8-49fe6d4e00ba"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("46ee8189-6ae6-47e9-a942-95ed51d1f9c6"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("d315aae0-e2aa-4c1f-b81d-0534c446517b"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("33599b73-fae3-4fc5-ad0d-8a2ca6817aca"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("54036bee-7da3-4afe-a6d3-f351ccaa4a83"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d"),
                            BuildingId = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            FloorId = new Guid("bb3bc660-b5cb-486d-8277-b3ffac62a383"),
                            GRoomId = new Guid("8fb30e0b-180c-48a7-98d1-b33558243ff2"),
                            Name = "A11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691"),
                            BuildingId = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            FloorId = new Guid("bb3bc660-b5cb-486d-8277-b3ffac62a383"),
                            GRoomId = new Guid("b7dd6790-fbd0-4968-ac89-143b2d303475"),
                            Name = "B11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("6d3aa3c6-7083-42da-944f-fac4cf10c040"),
                            BuildingId = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            FloorId = new Guid("fa80debf-a147-4aa5-be4e-2adc6b2c1794"),
                            GRoomId = new Guid("66589383-6120-4413-a662-7514eb517243"),
                            Name = "A12",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c1ba9060-59d0-4212-86ce-d5ef73441c75"),
                            BuildingId = new Guid("568380d9-3252-4770-8848-431c82718428"),
                            FloorId = new Guid("4f74a46e-a341-431d-87b5-cd19f0e00ec5"),
                            GRoomId = new Guid("9f682da0-0a5c-41cf-999e-db9c2715a6f2"),
                            Name = "A13",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("1b6835b7-c14b-4488-a9fd-42f68470d0c2"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorId = new Guid("a9426238-4726-4d35-becf-36ce525cb1ca"),
                            GRoomId = new Guid("84c2dadc-7d7d-4d0a-b44c-dec720ecc730"),
                            Name = "A21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("b7023d87-6e8e-4d26-80cc-70c543997336"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorId = new Guid("a9426238-4726-4d35-becf-36ce525cb1ca"),
                            GRoomId = new Guid("3c7b3406-f1ad-4e4a-9d0a-4565d671686c"),
                            Name = "B21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("89038e1f-ca34-4965-b8f8-49fe6d4e00ba"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorId = new Guid("7489e06d-b9ee-4c38-959f-2009f53b4918"),
                            GRoomId = new Guid("e986202e-57bb-4efd-a4c7-00968a1b8742"),
                            Name = "A22",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("d315aae0-e2aa-4c1f-b81d-0534c446517b"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorId = new Guid("ec1aaf90-6aa8-4515-b078-4ff72a21eadd"),
                            GRoomId = new Guid("46ee8189-6ae6-47e9-a942-95ed51d1f9c6"),
                            Name = "C23",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("54036bee-7da3-4afe-a6d3-f351ccaa4a83"),
                            BuildingId = new Guid("1c142059-50c9-46d7-b700-91c0f242e157"),
                            FloorId = new Guid("ec1aaf90-6aa8-4515-b078-4ff72a21eadd"),
                            GRoomId = new Guid("33599b73-fae3-4fc5-ad0d-8a2ca6817aca"),
                            Name = "B23",
                            Type = 2
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7067a08b-f441-4e82-8f18-77f61bb398e9"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d")
                        },
                        new
                        {
                            Id = new Guid("f1b3f2b1-51e0-42e2-8a7b-1b854f237e7d"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d")
                        },
                        new
                        {
                            Id = new Guid("47d0279c-f487-43de-a687-535e3e9b6425"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d")
                        },
                        new
                        {
                            Id = new Guid("3d116f44-265e-44ac-9d66-8e7ec7071c43"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d")
                        },
                        new
                        {
                            Id = new Guid("1d1d86ed-4c14-4d6e-998e-768b199df9b5"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691")
                        },
                        new
                        {
                            Id = new Guid("0f85a582-0e3a-45b7-9264-f5e7a3106325"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691")
                        },
                        new
                        {
                            Id = new Guid("1cf979d3-4040-492e-95ac-0bb82dfa4db4"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691")
                        },
                        new
                        {
                            Id = new Guid("1a6958c2-f886-46fe-9dd5-ae0b85cb4588"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691")
                        },
                        new
                        {
                            Id = new Guid("f3cfdd8f-2218-4cfe-84ab-552f511466ef"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("6f849664-adf4-43d3-a02b-bb2a0cc797ca"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9cabaaaf-dc5e-481e-ab79-b8e693cb55cc"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("948a604a-5d28-41f1-803e-6f82f3e94f39"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("6d3aa3c6-7083-42da-944f-fac4cf10c040")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("158761ab-c2c8-4232-a4d3-48a67972e947"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("c1ba9060-59d0-4212-86ce-d5ef73441c75")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b2b61721-f419-4d6b-b183-d22e1876adf8"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("1b6835b7-c14b-4488-a9fd-42f68470d0c2")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9657ab46-9efc-45a8-a5c3-cea8a15b047c"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("b7023d87-6e8e-4d26-80cc-70c543997336")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("5eef24d0-eb2e-48b0-9ea9-0e6bae4c26bb"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("89038e1f-ca34-4965-b8f8-49fe6d4e00ba")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("396f1abe-4d59-4236-962b-14125b942c8e"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("d315aae0-e2aa-4c1f-b81d-0534c446517b")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("13bb883f-430f-4bf8-b56e-af16c40d3d9d"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("54036bee-7da3-4afe-a6d3-f351ccaa4a83")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("39f720b9-e999-4c8d-bd12-57bf80ad0b31"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("67e43c44-1b42-4ad9-b976-3451b00f16a5"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("76e772f4-6ab5-4e4d-9d9d-a101b7ffc792"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9dfb229f-2061-4903-9f0e-507d395d0293"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("6d3aa3c6-7083-42da-944f-fac4cf10c040")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("782e8581-aa2f-4907-bdd3-06969d5026e7"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("c1ba9060-59d0-4212-86ce-d5ef73441c75")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("da919d83-5b5a-4a87-8354-ab85778dc484"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("1b6835b7-c14b-4488-a9fd-42f68470d0c2")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("411450a1-5a94-4e19-80bf-3793f1c09236"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("1b6835b7-c14b-4488-a9fd-42f68470d0c2")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6a79acfb-2177-4332-9035-f97845d14b01"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("b7023d87-6e8e-4d26-80cc-70c543997336")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4ca45201-228c-4928-b566-7ccc79323351"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("d315aae0-e2aa-4c1f-b81d-0534c446517b")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("691db9f9-a0d6-4f2c-a86e-740065103fe7"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("54036bee-7da3-4afe-a6d3-f351ccaa4a83")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomEvent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa1377e8-07a1-46e4-afb0-79585658f2d5"),
                            EventName = "SessionStarted",
                            TimeStamp = new DateTime(2023, 1, 13, 2, 51, 47, 209, DateTimeKind.Local).AddTicks(917),
                            UserId = new Guid("90f13cb3-cf31-469d-bf3c-dffdef88269a"),
                            Value = "null"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("Room1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Room2Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Room1Id");

                    b.HasIndex("Room2Id");

                    b.ToTable("RoomMerging");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("newRoomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSpliting");
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd503ae-9092-44aa-8c0c-ea33a07eb08c"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("89602358-aabe-40ce-a9f1-ffbafe0ddbe5"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68070d19-6175-480b-9eb1-fddc5294cf40"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("e32acba6-72db-4f89-bb0e-166dc3c8a670"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("106ae974-ce1a-4e21-884f-8e28ab9d0e37"),
                            AddressId = new Guid("89602358-aabe-40ce-a9f1-ffbafe0ddbe5"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("0aa4c1e5-aa74-4a97-8319-457cbe42f691"),
                            SpecializationId = new Guid("cc42df20-363f-4d79-b9d2-5effc6ee4634"),
                            WorkingScheduleId = new Guid("d104ae9b-ee45-4423-b194-488e145621d9")
                        },
                        new
                        {
                            Id = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            AddressId = new Guid("bbd503ae-9092-44aa-8c0c-ea33a07eb08c"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("d88c2bf0-653b-4a27-84ea-27b08483527d"),
                            SpecializationId = new Guid("fa838465-5f15-4ced-ae08-8f8a1f4991c2"),
                            WorkingScheduleId = new Guid("d104ae9b-ee45-4423-b194-488e145621d9")
                        },
                        new
                        {
                            Id = new Guid("c454e084-4d41-4461-8b5d-16c56140daa3"),
                            AddressId = new Guid("bbd503ae-9092-44aa-8c0c-ea33a07eb08c"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("89038e1f-ca34-4965-b8f8-49fe6d4e00ba"),
                            SpecializationId = new Guid("fa838465-5f15-4ced-ae08-8f8a1f4991c2"),
                            WorkingScheduleId = new Guid("d104ae9b-ee45-4423-b194-488e145621d9")
                        },
                        new
                        {
                            Id = new Guid("c0db68dd-79c2-4c4d-8598-69153d8ed147"),
                            AddressId = new Guid("bbd503ae-9092-44aa-8c0c-ea33a07eb08c"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Jakov",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Jakov",
                            RoomId = new Guid("c1ba9060-59d0-4212-86ce-d5ef73441c75"),
                            SpecializationId = new Guid("1f637627-8b51-4091-b027-21883b61e72c"),
                            WorkingScheduleId = new Guid("021f0a2d-c6f8-4a3e-8fec-87f62826a167")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90f13cb3-cf31-469d-bf3c-dffdef88269a"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        },
                        new
                        {
                            Id = new Guid("d7fef085-5e2b-496f-87b1-d07cc4313eb6"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Blood Bank",
                            UserRole = 3,
                            Username = "ManagerBB"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("284842dc-f5a9-4558-a408-ba8903dd03f5"),
                            AddressId = new Guid("bbd503ae-9092-44aa-8c0c-ea33a07eb08c"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("421f330c-c7b4-4001-b981-d1c89d0afdc5"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("4ab6d5fc-4765-497f-9cf6-cfdc6e70651f"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("ca59216b-8af6-45d8-9620-559f433ba1fe"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c454e084-4d41-4461-8b5d-16c56140daa3"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("58b497a0-20ff-4cfa-801e-61917b8f5e4a"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("238b29b1-3025-4349-a3f5-69e7772eecff"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("6f0daebc-1391-4b22-bc57-2fc1a25b2dad"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c454e084-4d41-4461-8b5d-16c56140daa3"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("650c5caa-85b9-4b6c-92f9-2d229a490a21"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c454e084-4d41-4461-8b5d-16c56140daa3"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("7eb286b3-9c90-4314-9a3e-e71b267e0d83"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("106ae974-ce1a-4e21-884f-8e28ab9d0e37"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("a3f79940-bbf5-4389-b285-3ce663437677"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("106ae974-ce1a-4e21-884f-8e28ab9d0e37"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("55569299-ba89-40b0-9003-69e2e3abfac9"),
                            AddressId = new Guid("6b856808-564f-4104-ab1b-eba5ba148cd6"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("c454e084-4d41-4461-8b5d-16c56140daa3"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("c0576733-b7fa-4974-b60c-d3d7e8c9f216"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("09d8369a-4bcf-4636-a757-d6ab40d59060"),
                                    From = new DateTime(2023, 1, 13, 1, 51, 47, 206, DateTimeKind.Local).AddTicks(4588),
                                    To = new DateTime(2023, 1, 13, 2, 21, 47, 208, DateTimeKind.Local).AddTicks(2232)
                                },
                                new
                                {
                                    AppointmentId = new Guid("e2f0f436-e57f-46af-aa16-e629407697c8"),
                                    From = new DateTime(2023, 1, 13, 0, 51, 47, 208, DateTimeKind.Local).AddTicks(2257),
                                    To = new DateTime(2023, 1, 13, 1, 21, 47, 208, DateTimeKind.Local).AddTicks(2260)
                                },
                                new
                                {
                                    AppointmentId = new Guid("43f92899-f9c2-4f8a-9441-5b099dd0e26e"),
                                    From = new DateTime(2023, 1, 12, 23, 31, 47, 208, DateTimeKind.Local).AddTicks(2263),
                                    To = new DateTime(2023, 1, 13, 0, 1, 47, 208, DateTimeKind.Local).AddTicks(2266)
                                },
                                new
                                {
                                    AppointmentId = new Guid("3fa0b63a-92fb-4428-9c1b-852e79069e1b"),
                                    From = new DateTime(2023, 1, 12, 22, 21, 47, 208, DateTimeKind.Local).AddTicks(2269),
                                    To = new DateTime(2023, 1, 12, 23, 31, 47, 208, DateTimeKind.Local).AddTicks(2272)
                                },
                                new
                                {
                                    AppointmentId = new Guid("739820c9-7880-4081-b750-4ce984110fd5"),
                                    From = new DateTime(2023, 1, 12, 21, 1, 47, 208, DateTimeKind.Local).AddTicks(2274),
                                    To = new DateTime(2023, 1, 12, 22, 41, 47, 208, DateTimeKind.Local).AddTicks(2276)
                                },
                                new
                                {
                                    AppointmentId = new Guid("dcad6271-0e26-4f94-bd02-947bfd3cb7b8"),
                                    From = new DateTime(2023, 1, 12, 19, 46, 47, 208, DateTimeKind.Local).AddTicks(2279),
                                    To = new DateTime(2023, 1, 12, 20, 46, 47, 208, DateTimeKind.Local).AddTicks(2281)
                                },
                                new
                                {
                                    AppointmentId = new Guid("20c1eb71-20d5-4f7c-bfd8-acd432653aab"),
                                    From = new DateTime(2022, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("4b69775d-1c12-4088-8592-d00a87d665f9"),
                                    From = new DateTime(2022, 8, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 8, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("2bf1dc7d-bc85-4232-b0b1-e04d11d1cf1a"),
                                    From = new DateTime(2022, 9, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 9, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("556e5a69-bf8a-4cc7-97e5-380a059828b7"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("10b9d9b4-414a-47bb-a3fe-1493174c4447"),
                                    From = new DateTime(2022, 11, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 11, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("cfee2e95-9bc9-4835-acd8-72a87f7133fb"),
                                    From = new DateTime(2022, 12, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 12, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Common.EventSourcing.DomainEvent<HospitalLibrary.Appointments.DomainEvents.EventStoreSchedulingAppointmentType>", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", null)
                        .WithMany("Changes")
                        .HasForeignKey("AppointmentId");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("HospitalLibrary.SharedModel.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("ConsiliumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Duration")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consiliums");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Room");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("d104ae9b-ee45-4423-b194-488e145621d9"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("021f0a2d-c6f8-4a3e-8fec-87f62826a167"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.NullableDateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleFrom");

                            b1.Property<DateTime?>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("d104ae9b-ee45-4423-b194-488e145621d9"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("021f0a2d-c6f8-4a3e-8fec-87f62826a167"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.EventStores.EventStoreExamination", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", "Aggregate")
                        .WithMany()
                        .HasForeignKey("AggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aggregate");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("4a57d6c9-6239-4251-825d-881053873621"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthState", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Patients.Model.BloodPressure", "BloodPressure", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("LowerPressure")
                                .HasColumnType("integer");

                            b1.Property<int>("UpperPressure")
                                .HasColumnType("integer");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.OwnsOne("HospitalLibrary.Patients.Model.BloodSugarLevel", "BloodSugarLevel", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SugarLevel")
                                .HasColumnType("integer");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "MenstrualCycle", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.Percentage", "BodyFatPercent", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.Navigation("BloodPressure");

                    b.Navigation("BloodSugarLevel");

                    b.Navigation("BodyFatPercent");

                    b.Navigation("MenstrualCycle");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthStateNotification", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room1")
                        .WithMany()
                        .HasForeignKey("Room1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room2")
                        .WithMany()
                        .HasForeignKey("Room2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRangeOfMerging", b1 =>
                        {
                            b1.Property<Guid>("RoomMergingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomMergingId");

                            b1.ToTable("RoomMerging");

                            b1.WithOwner()
                                .HasForeignKey("RoomMergingId");
                        });

                    b.Navigation("DateRangeOfMerging");

                    b.Navigation("Room1");

                    b.Navigation("Room2");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DatesForSearch", b1 =>
                        {
                            b1.Property<Guid>("RoomSplitingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomSplitingId");

                            b1.ToTable("RoomSpliting");

                            b1.WithOwner()
                                .HasForeignKey("RoomSplitingId");
                        });

                    b.Navigation("DatesForSearch");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
