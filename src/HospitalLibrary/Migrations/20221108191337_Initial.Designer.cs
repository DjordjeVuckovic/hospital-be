// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221108191337_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4276b64-cdf9-42c2-9c66-1dc752a8b4d3"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("d30fc010-72e2-4ea7-b862-aaa4fc4adeea"),
                            Emergent = false,
                            PatientId = new Guid("89b205bf-d61b-4ba6-a1c7-30c858b28ef5")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("047993d2-ff75-40fa-9c3d-5a27190186dc"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("c1b57334-6e99-4eda-9212-463b0949f690"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("904dba39-ac06-4a4f-bdc9-10ad06e2e0ad"),
                            BuildingId = new Guid("047993d2-ff75-40fa-9c3d-5a27190186dc"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("1a8d83a1-c314-43bc-b47f-7d68fc929630"),
                            BuildingId = new Guid("047993d2-ff75-40fa-9c3d-5a27190186dc"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("7612d881-ac40-4137-ab59-f70de196fffd"),
                            BuildingId = new Guid("047993d2-ff75-40fa-9c3d-5a27190186dc"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("4bae7ea0-68c2-4dc3-8f2e-91ac85dee0cf"),
                            BuildingId = new Guid("c1b57334-6e99-4eda-9212-463b0949f690"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("ed5f12d1-08a7-40d3-9e1e-756b63411a3f"),
                            BuildingId = new Guid("c1b57334-6e99-4eda-9212-463b0949f690"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("97c12a19-bf14-43dd-a171-575c62fec804"),
                            BuildingId = new Guid("c1b57334-6e99-4eda-9212-463b0949f690"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.FloorPlanView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PosX")
                        .HasColumnType("integer");

                    b.Property<int>("PosY")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FloorPlanViews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f2cbca1-7a23-4666-8408-b58fdeae0a6c"),
                            Lenght = 5,
                            PosX = 0,
                            PosY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("48e962e4-d14e-4bee-9ed3-da0428e3f9a7"),
                            Lenght = 5,
                            PosX = 5,
                            PosY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("202a34c7-cfa2-4aba-bd40-a401d085ec0e"),
                            Lenght = 5,
                            PosX = 0,
                            PosY = 5,
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4545953-d8c0-4bab-8a0c-91cf3933bcc8"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("e158ba7c-a07d-4231-ab57-3ebb09740bff"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("164898c6-f779-4f13-a876-3cc467200fa3"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("8360e6d1-5801-4cc7-b506-6239b48f66c9"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingName")
                        .HasColumnType("text");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FloorName")
                        .HasColumnType("text");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e158ba7c-a07d-4231-ab57-3ebb09740bff"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("904dba39-ac06-4a4f-bdc9-10ad06e2e0ad"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "11A",
                            PositionX = 0,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("8360e6d1-5801-4cc7-b506-6239b48f66c9"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("904dba39-ac06-4a4f-bdc9-10ad06e2e0ad"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "12A",
                            PositionX = 5,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("60f952a5-dd61-4f74-bdd9-e89aec91b3d9"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("1a8d83a1-c314-43bc-b47f-7d68fc929630"),
                            FloorName = "Drugi",
                            Lenght = 5,
                            Number = "13A",
                            PositionX = 10,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("df7ba662-02d9-4838-8fbd-1c10a37ef6f6"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("7612d881-ac40-4137-ab59-f70de196fffd"),
                            FloorName = "Treci",
                            Lenght = 5,
                            Number = "14A",
                            PositionX = 0,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2b76cbe4-c4b6-4597-b88b-e7f242db5957"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("4bae7ea0-68c2-4dc3-8f2e-91ac85dee0cf"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "11B",
                            PositionX = 0,
                            PositionY = 10,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("bf5f81b2-354f-4023-9453-4d142147dd8d"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("4bae7ea0-68c2-4dc3-8f2e-91ac85dee0cf"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "12B",
                            PositionX = 5,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("8bedba9f-0c67-4f93-8ffd-8dec0500123e"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("ed5f12d1-08a7-40d3-9e1e-756b63411a3f"),
                            FloorName = "Drugi",
                            Lenght = 5,
                            Number = "13B",
                            PositionX = 10,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("6558e425-a5f4-44ca-8df0-931be9d2d19c"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("97c12a19-bf14-43dd-a171-575c62fec804"),
                            FloorName = "Treci",
                            Lenght = 10,
                            Number = "14B",
                            PositionX = 0,
                            PositionY = 0,
                            Width = 20
                        },
                        new
                        {
                            Id = new Guid("6e5bed25-8060-4e7b-8cb3-81314084bc5c"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("97c12a19-bf14-43dd-a171-575c62fec804"),
                            FloorName = "Treci",
                            Lenght = 5,
                            Number = "15B",
                            PositionX = 0,
                            PositionY = 10,
                            Width = 20
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63f85104-47ee-4fb6-9b79-eab1ffa2a786"),
                            AddressId = new Guid("d740efda-6f4e-4301-a02e-a6a7ec00eaca"),
                            Email = "DjordjeLopov@gmail.com",
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "miki123",
                            Phone = "+612222222",
                            RoomId = new Guid("8360e6d1-5801-4cc7-b506-6239b48f66c9"),
                            SpecializationId = new Guid("db77985c-8711-49af-b1ed-0e3a2e7fcde5"),
                            Surname = "Vuckovic",
                            Username = "Tadjo",
                            WorkingScheduleId = new Guid("ede26ee9-3c29-4e4e-928d-1683917ff3ba")
                        },
                        new
                        {
                            Id = new Guid("d30fc010-72e2-4ea7-b862-aaa4fc4adeea"),
                            AddressId = new Guid("368c3c3f-a67e-41fe-8d32-ad48120f9cd1"),
                            Email = "Cajons@gmail.com",
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "miki123",
                            Phone = "+612222222",
                            RoomId = new Guid("e158ba7c-a07d-4231-ab57-3ebb09740bff"),
                            SpecializationId = new Guid("db77985c-8711-49af-b1ed-0e3a2e7fcde5"),
                            Surname = "Maric",
                            Username = "Ilija",
                            WorkingScheduleId = new Guid("c78f6e52-fe35-46d9-9c2c-6721a0eeebe3")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f6ea556-e5da-4464-a149-44a1cb28a96a"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("033c9f4d-522f-417f-845a-957dd0b31678"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("db77985c-8711-49af-b1ed-0e3a2e7fcde5"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ede26ee9-3c29-4e4e-928d-1683917ff3ba")
                        },
                        new
                        {
                            Id = new Guid("c78f6e52-fe35-46d9-9c2c-6721a0eeebe3")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89b205bf-d61b-4ba6-a1c7-30c858b28ef5"),
                            AddressId = new Guid("368c3c3f-a67e-41fe-8d32-ad48120f9cd1"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "sale1312",
                            Phone = "+612222222",
                            Surname = "Lave",
                            Username = "Sale"
                        },
                        new
                        {
                            Id = new Guid("b642a6f6-5492-48d9-b21c-3f5d4d019f44"),
                            AddressId = new Guid("5815143a-c898-4d2b-9cff-56a197cb6056"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "sale1312",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            Username = "Miki"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("368c3c3f-a67e-41fe-8d32-ad48120f9cd1"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("d740efda-6f4e-4301-a02e-a6a7ec00eaca"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("5815143a-c898-4d2b-9cff-56a197cb6056"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("a4276b64-cdf9-42c2-9c66-1dc752a8b4d3"),
                                    From = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 15, 15, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.GRoom", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holiday");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("ede26ee9-3c29-4e4e-928d-1683917ff3ba"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("c78f6e52-fe35-46d9-9c2c-6721a0eeebe3"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("ede26ee9-3c29-4e4e-928d-1683917ff3ba"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("c78f6e52-fe35-46d9-9c2c-6721a0eeebe3"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
