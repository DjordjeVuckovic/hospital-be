// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3a63ac5-a138-4946-b161-560fa77271c4"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("98686bc8-30cc-4b38-a474-2a8b78ec55c1"),
                            Emergent = false,
                            PatientId = new Guid("abeb8880-ae13-46be-8b2e-f16c14fc1e9b")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a214e76-9f98-45ba-90d5-27c2f2465b31"),
                            Amount = 2,
                            BloodUnitId = new Guid("32af5b5c-bfc2-485c-a721-73babde5922e"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("afbf1fc9-8bea-403a-b5d3-6c377f629ee5"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("246bd68a-bf46-4496-878a-7fab9c7a9b25"),
                            Amount = 4,
                            BloodUnitId = new Guid("32af5b5c-bfc2-485c-a721-73babde5922e"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("afbf1fc9-8bea-403a-b5d3-6c377f629ee5"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32af5b5c-bfc2-485c-a721-73babde5922e"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("66bd097f-9628-454e-b6a4-30b201259e95"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("3e824579-d974-4603-8c95-27656f41ea9d"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e67167ca-5b49-484e-87ce-703d1afe3178"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("40f0487d-60c5-46ee-b7f0-c41022925b4c"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("b4b57163-bff9-4e52-8128-c381763056cf"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0cdd2af-c43f-4b2f-9ac8-2ddaadf2d4de")
                        },
                        new
                        {
                            Id = new Guid("ccfc1025-9e24-4e15-9efa-d5377da98ad4")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7ac61ed-359e-4c3e-ae37-2ed58f76484d"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("98686bc8-30cc-4b38-a474-2a8b78ec55c1"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AllergenId")
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AllergenId");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41937dc0-e237-44c1-b10a-71e70d37d117"),
                            BuildingId = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("52fb1b8a-84b2-4f6e-8391-ee286b045742"),
                            BuildingId = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("0b8c7746-2b5b-4a09-8572-994c013fe113"),
                            BuildingId = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("8185ebb5-c037-4920-a664-b8ecf1e39f9f"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("7defac89-4c76-4a08-96c2-0bf3e5783bab"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("ddd0bcc5-14c5-4c14-9187-de481ccd5fb2"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f72e8a8-a7de-4430-8f4f-33b1741210e7"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b1781bd9-d90a-4ccf-9ad1-35cc502bf13b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2933cca5-edb0-48ee-8851-bd1f1fbd959b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("30f24c23-d725-4d77-aa53-7034b7f2fd4f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("f673ba42-363b-496c-8777-f9fdb857dea3"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("18254443-5a19-490a-a0c7-21f2f8c8b2a1"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e2562bd5-0bfa-434f-936c-ac79b87ca433"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("d3cdceb5-156a-4ecd-bb81-ebfb2d056e0a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("aff1d89e-77d6-4e5f-8c13-b5cce1a2c5cb"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("692170e9-6cce-4e5b-bf75-7026bf7cd823"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("1a9b31bd-7c63-48b6-836b-06e5b3775a01"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7b6c82f6-597b-4f6c-8a6d-8a847454fb6e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("4f4932ef-86fd-4388-afc9-04a085394793"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("cc8188ec-48b5-4f26-975f-053ba9f0969b"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("d9c5e23e-1e6c-49c8-87b4-cfe0d3beb495"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c0889713-0fa7-4143-8d24-d7a8802ee996"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0"),
                            BuildingId = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            FloorId = new Guid("41937dc0-e237-44c1-b10a-71e70d37d117"),
                            GRoomId = new Guid("9f72e8a8-a7de-4430-8f4f-33b1741210e7"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6"),
                            BuildingId = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            FloorId = new Guid("41937dc0-e237-44c1-b10a-71e70d37d117"),
                            GRoomId = new Guid("b1781bd9-d90a-4ccf-9ad1-35cc502bf13b"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("30f24c23-d725-4d77-aa53-7034b7f2fd4f"),
                            BuildingId = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            FloorId = new Guid("52fb1b8a-84b2-4f6e-8391-ee286b045742"),
                            GRoomId = new Guid("2933cca5-edb0-48ee-8851-bd1f1fbd959b"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("18254443-5a19-490a-a0c7-21f2f8c8b2a1"),
                            BuildingId = new Guid("787c9912-267f-431b-858f-48724fdcc730"),
                            FloorId = new Guid("0b8c7746-2b5b-4a09-8572-994c013fe113"),
                            GRoomId = new Guid("f673ba42-363b-496c-8777-f9fdb857dea3"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("d3cdceb5-156a-4ecd-bb81-ebfb2d056e0a"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorId = new Guid("8185ebb5-c037-4920-a664-b8ecf1e39f9f"),
                            GRoomId = new Guid("e2562bd5-0bfa-434f-936c-ac79b87ca433"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("692170e9-6cce-4e5b-bf75-7026bf7cd823"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorId = new Guid("8185ebb5-c037-4920-a664-b8ecf1e39f9f"),
                            GRoomId = new Guid("aff1d89e-77d6-4e5f-8c13-b5cce1a2c5cb"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("7b6c82f6-597b-4f6c-8a6d-8a847454fb6e"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorId = new Guid("7defac89-4c76-4a08-96c2-0bf3e5783bab"),
                            GRoomId = new Guid("1a9b31bd-7c63-48b6-836b-06e5b3775a01"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("cc8188ec-48b5-4f26-975f-053ba9f0969b"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorId = new Guid("ddd0bcc5-14c5-4c14-9187-de481ccd5fb2"),
                            GRoomId = new Guid("4f4932ef-86fd-4388-afc9-04a085394793"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("c0889713-0fa7-4143-8d24-d7a8802ee996"),
                            BuildingId = new Guid("da7e2346-6379-46b9-a951-ef18c298b9c8"),
                            FloorId = new Guid("ddd0bcc5-14c5-4c14-9187-de481ccd5fb2"),
                            GRoomId = new Guid("d9c5e23e-1e6c-49c8-87b4-cfe0d3beb495"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c9363b3-ce21-446f-8229-742e8b877732"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0")
                        },
                        new
                        {
                            Id = new Guid("02e97243-2b09-4bea-b171-0156976dcabf"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0")
                        },
                        new
                        {
                            Id = new Guid("1892f284-69d7-4fe7-b33a-c4a9da6e22de"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0")
                        },
                        new
                        {
                            Id = new Guid("c3efb477-dbd0-445d-a160-6fa63ef5e772"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0")
                        },
                        new
                        {
                            Id = new Guid("6d555f77-74a1-45ca-bf3f-4c252bcb344b"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6")
                        },
                        new
                        {
                            Id = new Guid("711bc83f-3af7-4d4b-b2e6-ffb14af9200b"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6")
                        },
                        new
                        {
                            Id = new Guid("62d7a65f-56f6-4880-b2a8-a2dfe7dc2728"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6")
                        },
                        new
                        {
                            Id = new Guid("95292f0c-4fb3-47b2-baa8-40a47176534e"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6")
                        },
                        new
                        {
                            Id = new Guid("81faf4c6-975d-4478-947c-eddad3d09274"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("b01ca778-c726-45e4-876d-4fc24b158ada"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9ceb27ea-3931-4e6c-8e93-3717ab1f0d0d"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6b195355-cc2e-4770-a760-f217a9fb6f94"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("30f24c23-d725-4d77-aa53-7034b7f2fd4f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6b08f1b1-e16c-4659-a008-d1fd3f29897a"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("18254443-5a19-490a-a0c7-21f2f8c8b2a1")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("acaea3ce-31bf-443f-8fba-d80b2d0a3e9f"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("d3cdceb5-156a-4ecd-bb81-ebfb2d056e0a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d861ac46-2ba4-44a1-93e8-146a8f638a5d"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("692170e9-6cce-4e5b-bf75-7026bf7cd823")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("907427c4-039c-469b-8bd6-9cdc4d98e9b6"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("7b6c82f6-597b-4f6c-8a6d-8a847454fb6e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("7668af09-f9c5-4a87-905f-e5320af1b851"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("cc8188ec-48b5-4f26-975f-053ba9f0969b")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c9fffa1d-dd02-4153-af7d-09a6fd58f7a4"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("c0889713-0fa7-4143-8d24-d7a8802ee996")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c5d3bc76-c745-44ab-8219-e95b2e29c8dd"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("cd52da5c-0c29-4bb0-977c-693140b96063"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9a254cc3-8495-44c0-a137-ad2befe4969b"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("58a4f436-73f0-4408-9c33-b8872d1b0fac"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("30f24c23-d725-4d77-aa53-7034b7f2fd4f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("463f68f7-9ed4-4a84-8110-dca61d09ff86"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("18254443-5a19-490a-a0c7-21f2f8c8b2a1")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9be72035-9406-412c-866b-7b142454a551"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("d3cdceb5-156a-4ecd-bb81-ebfb2d056e0a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("86deb4ab-66ec-4996-a91c-d85be09424b0"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("d3cdceb5-156a-4ecd-bb81-ebfb2d056e0a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("e4bd0e39-bad6-477c-9cab-ce90e7e36e77"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("692170e9-6cce-4e5b-bf75-7026bf7cd823")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("a5fdc370-a91f-4aef-a058-6bd98b672b18"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("cc8188ec-48b5-4f26-975f-053ba9f0969b")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("57bf8ac3-fa34-47ec-b1f8-d5400c6627b2"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("c0889713-0fa7-4143-8d24-d7a8802ee996")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55c5d04a-3bf8-4e2f-bf30-7a7c97882c68"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("6238e514-f939-4b72-86dd-400020049f50"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("1eabe8eb-e71a-4437-841c-5f82836eb73e"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebecb2f5-2bc5-44b4-be26-7e8c4313e14a"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("3613e474-7b20-4550-96cf-d3aa09419ce1"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afbf1fc9-8bea-403a-b5d3-6c377f629ee5"),
                            AddressId = new Guid("6238e514-f939-4b72-86dd-400020049f50"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("3490465d-32e0-4b37-8326-c1a25b0413e6"),
                            SpecializationId = new Guid("b4b57163-bff9-4e52-8128-c381763056cf"),
                            WorkingScheduleId = new Guid("b0cdd2af-c43f-4b2f-9ac8-2ddaadf2d4de")
                        },
                        new
                        {
                            Id = new Guid("98686bc8-30cc-4b38-a474-2a8b78ec55c1"),
                            AddressId = new Guid("55c5d04a-3bf8-4e2f-bf30-7a7c97882c68"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("25b2975a-04f7-4871-ab15-6fe64e0f3df0"),
                            SpecializationId = new Guid("40f0487d-60c5-46ee-b7f0-c41022925b4c"),
                            WorkingScheduleId = new Guid("b0cdd2af-c43f-4b2f-9ac8-2ddaadf2d4de")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4454ec6b-038f-448d-8445-0051af4525c2"),
                            AddressId = new Guid("1eabe8eb-e71a-4437-841c-5f82836eb73e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("uuid");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abeb8880-ae13-46be-8b2e-f16c14fc1e9b"),
                            AddressId = new Guid("55c5d04a-3bf8-4e2f-bf30-7a7c97882c68"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DoctorId = new Guid("98686bc8-30cc-4b38-a474-2a8b78ec55c1"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("b4f0a67d-70c9-4a58-9382-0495732ced6c"),
                            AddressId = new Guid("1eabe8eb-e71a-4437-841c-5f82836eb73e"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DoctorId = new Guid("98686bc8-30cc-4b38-a474-2a8b78ec55c1"),
                            Gender = 0
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("a3a63ac5-a138-4946-b161-560fa77271c4"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("b0cdd2af-c43f-4b2f-9ac8-2ddaadf2d4de"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("ccfc1025-9e24-4e15-9efa-d5377da98ad4"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("b0cdd2af-c43f-4b2f-9ac8-2ddaadf2d4de"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("ccfc1025-9e24-4e15-9efa-d5377da98ad4"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("f7ac61ed-359e-4c3e-ae37-2ed58f76484d"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Allergen", null)
                        .WithMany("Medicines")
                        .HasForeignKey("AllergenId");

                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany("Patients")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Allergen", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
