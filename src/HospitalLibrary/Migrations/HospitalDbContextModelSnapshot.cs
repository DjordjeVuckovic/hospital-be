// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f264a60-d859-41b9-811e-9885e81007e9"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("f28b8676-b143-4eac-af95-c8bbdcb31d1a"),
                            Emergent = false,
                            PatientId = new Guid("6cfcc49e-3d89-4d15-aaf5-3e0271a341c3")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06b48a9d-edf4-469b-b8bb-2f58720d7ca9"),
                            Amount = 2,
                            BloodUnitId = new Guid("422cd720-d97e-4fee-8b83-b98d37044eed"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("351548cc-14f9-40f6-8b79-8a5c863a57f5"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("7de2022d-16e2-4b77-aa09-0d3a5210778a"),
                            Amount = 4,
                            BloodUnitId = new Guid("422cd720-d97e-4fee-8b83-b98d37044eed"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("351548cc-14f9-40f6-8b79-8a5c863a57f5"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("422cd720-d97e-4fee-8b83-b98d37044eed"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("0315f872-ed90-4727-a5b2-a09646e405a5"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("d3762d1b-c636-496d-9764-c6fcbe70607e"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db498160-a04f-4b16-8108-5ceca1c5d253"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("28bb29ef-d482-462d-a4a3-e96bbf0b2ad6"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("9a7ea22c-7fbb-413d-8c02-122001218208"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7958c7f-4557-4b27-b3d9-2693e448afe3")
                        },
                        new
                        {
                            Id = new Guid("7296ad39-0c6a-4958-9df2-2c61831542ff")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be69c315-f095-4858-a487-50207c547143"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("f28b8676-b143-4eac-af95-c8bbdcb31d1a"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04dd12eb-b0ab-4e67-83a1-4b675caf66fd"),
                            BuildingId = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("14c4036f-2003-4cb2-8bd2-aabd81c29a4c"),
                            BuildingId = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("d08994f9-8ec8-4b2a-bab2-5458d39b5360"),
                            BuildingId = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("f1a3641e-7e82-4c2f-bd69-6b751860e690"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("17294693-a46e-4204-a99b-908e2d1b7d01"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("01b31817-3b57-47fc-8cc5-fe5491970bb4"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17c9610a-8993-4eca-92d0-d5dc1f334b0e"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("e7e57c92-f61f-4477-a99b-96b055855588"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("80ae8241-d8db-49c4-882b-46569c59a26d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("21dfd6a4-e7d2-453a-9e48-8fbf6abeee41"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("03e15153-e6e7-48b9-b933-6ce7ceeb2aea"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c9baa643-ec97-47c1-89d8-6fa7737fef3d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("ed37ea6c-ae3e-4c28-a334-7b0a6acceb0e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b3ab0ed0-7732-4818-bc04-dc0cf1463bf3"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("403ea930-6c16-4e0b-b1e0-9e31bca7e038"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("587e939a-4e1f-4ebb-a039-ab94bcd8526d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("16e85fc2-e0d0-4b7f-8c07-01f967bc1072"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2e7c837a-28b9-4868-8acf-f8147c98863d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("a521507e-656f-4b89-8939-19e87dc1a7cd"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b1bdc6d2-9516-4900-b9f2-5ecdcc655828"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("d07d891b-6120-47dc-bef7-743fde5ea829"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("0c6bcf8b-0c92-4d98-95b0-cc5e854778e7"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("f6b4254e-d125-4b58-b9f3-de67d535cf85"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7e57c92-f61f-4477-a99b-96b055855588"),
                            BuildingId = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            FloorId = new Guid("04dd12eb-b0ab-4e67-83a1-4b675caf66fd"),
                            GRoomId = new Guid("17c9610a-8993-4eca-92d0-d5dc1f334b0e"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a"),
                            BuildingId = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            FloorId = new Guid("04dd12eb-b0ab-4e67-83a1-4b675caf66fd"),
                            GRoomId = new Guid("80ae8241-d8db-49c4-882b-46569c59a26d"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("03e15153-e6e7-48b9-b933-6ce7ceeb2aea"),
                            BuildingId = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            FloorId = new Guid("14c4036f-2003-4cb2-8bd2-aabd81c29a4c"),
                            GRoomId = new Guid("21dfd6a4-e7d2-453a-9e48-8fbf6abeee41"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("ed37ea6c-ae3e-4c28-a334-7b0a6acceb0e"),
                            BuildingId = new Guid("e16fbbeb-de41-4dc2-b1ae-3f1f13cd7f9c"),
                            FloorId = new Guid("d08994f9-8ec8-4b2a-bab2-5458d39b5360"),
                            GRoomId = new Guid("c9baa643-ec97-47c1-89d8-6fa7737fef3d"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("403ea930-6c16-4e0b-b1e0-9e31bca7e038"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorId = new Guid("f1a3641e-7e82-4c2f-bd69-6b751860e690"),
                            GRoomId = new Guid("b3ab0ed0-7732-4818-bc04-dc0cf1463bf3"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("16e85fc2-e0d0-4b7f-8c07-01f967bc1072"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorId = new Guid("f1a3641e-7e82-4c2f-bd69-6b751860e690"),
                            GRoomId = new Guid("587e939a-4e1f-4ebb-a039-ab94bcd8526d"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("a521507e-656f-4b89-8939-19e87dc1a7cd"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorId = new Guid("17294693-a46e-4204-a99b-908e2d1b7d01"),
                            GRoomId = new Guid("2e7c837a-28b9-4868-8acf-f8147c98863d"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("d07d891b-6120-47dc-bef7-743fde5ea829"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorId = new Guid("01b31817-3b57-47fc-8cc5-fe5491970bb4"),
                            GRoomId = new Guid("b1bdc6d2-9516-4900-b9f2-5ecdcc655828"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("f6b4254e-d125-4b58-b9f3-de67d535cf85"),
                            BuildingId = new Guid("734640f9-229d-45db-8c5f-9ab2e17d18fa"),
                            FloorId = new Guid("01b31817-3b57-47fc-8cc5-fe5491970bb4"),
                            GRoomId = new Guid("0c6bcf8b-0c92-4d98-95b0-cc5e854778e7"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("487bd34c-62f0-4e52-a7be-7d8a888cd531"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("e7e57c92-f61f-4477-a99b-96b055855588")
                        },
                        new
                        {
                            Id = new Guid("c08ebcf2-110d-413b-9053-4f04a986c07d"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("e7e57c92-f61f-4477-a99b-96b055855588")
                        },
                        new
                        {
                            Id = new Guid("f9a29fd9-e48b-499d-bc2a-63dd95c2370d"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("e7e57c92-f61f-4477-a99b-96b055855588")
                        },
                        new
                        {
                            Id = new Guid("1af33766-a69b-4004-9264-401b4437f4aa"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("e7e57c92-f61f-4477-a99b-96b055855588")
                        },
                        new
                        {
                            Id = new Guid("6e057237-31f8-484b-90b1-ef6c52d80d47"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a")
                        },
                        new
                        {
                            Id = new Guid("fa37d4fe-527f-452d-ab25-9a0d25ef5121"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a")
                        },
                        new
                        {
                            Id = new Guid("1572e8ec-0e39-4756-aaf0-fcac818ddfd1"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a")
                        },
                        new
                        {
                            Id = new Guid("9063f755-193d-419e-9163-a0a2932815c1"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a")
                        },
                        new
                        {
                            Id = new Guid("3f0ba9ef-f06d-4eaa-8c54-6879b334b0e3"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("95c9a43b-b0c7-4a9b-8afb-8704f0ed44c3"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("e7e57c92-f61f-4477-a99b-96b055855588")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("bb576778-36f9-45b4-8158-078d62519c61"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("ab2fc5a7-b2a5-401d-90db-8984bf4ec265"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("03e15153-e6e7-48b9-b933-6ce7ceeb2aea")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("272d2c40-91f2-4b2d-8960-a84bc8b01a28"),
                            Amount = 1,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("ed37ea6c-ae3e-4c28-a334-7b0a6acceb0e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("973662e6-46a4-4f49-a38c-242898589dfe"),
                            Amount = 2,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("403ea930-6c16-4e0b-b1e0-9e31bca7e038")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("269569bf-4d47-4dfe-9b1f-107d095d2a9f"),
                            Amount = 4,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("16e85fc2-e0d0-4b7f-8c07-01f967bc1072")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("397bcd52-f151-487a-b1c2-858ea365fe52"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("a521507e-656f-4b89-8939-19e87dc1a7cd")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("be81f94b-2f84-4408-9bfd-d06e6cb14170"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("d07d891b-6120-47dc-bef7-743fde5ea829")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0c623d39-3942-4671-aad9-e7405ebcec43"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("f6b4254e-d125-4b58-b9f3-de67d535cf85")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b416d95-c7db-4c27-9f6a-51cfbde8d0c9"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("c40bc3dc-acac-4943-bfd2-bdc923643439"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("7393b911-dcdf-490c-86d3-6dacac45fa81"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IngredientPatient");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("351548cc-14f9-40f6-8b79-8a5c863a57f5"),
                            AddressId = new Guid("c40bc3dc-acac-4943-bfd2-bdc923643439"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("e44339ed-eb75-4901-a5b2-aaf874f13f8a"),
                            SpecializationId = new Guid("9a7ea22c-7fbb-413d-8c02-122001218208"),
                            WorkingScheduleId = new Guid("a7958c7f-4557-4b27-b3d9-2693e448afe3")
                        },
                        new
                        {
                            Id = new Guid("f28b8676-b143-4eac-af95-c8bbdcb31d1a"),
                            AddressId = new Guid("0b416d95-c7db-4c27-9f6a-51cfbde8d0c9"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("e7e57c92-f61f-4477-a99b-96b055855588"),
                            SpecializationId = new Guid("9a7ea22c-7fbb-413d-8c02-122001218208"),
                            WorkingScheduleId = new Guid("a7958c7f-4557-4b27-b3d9-2693e448afe3")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("632ec291-460e-4e4d-b2df-b7bcac9714cd"),
                            AddressId = new Guid("7393b911-dcdf-490c-86d3-6dacac45fa81"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cfcc49e-3d89-4d15-aaf5-3e0271a341c3"),
                            AddressId = new Guid("0b416d95-c7db-4c27-9f6a-51cfbde8d0c9"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("b4a26e03-4d9d-4822-8f7c-d6bf297a885d"),
                            AddressId = new Guid("7393b911-dcdf-490c-86d3-6dacac45fa81"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Gender = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("0f264a60-d859-41b9-811e-9885e81007e9"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("a7958c7f-4557-4b27-b3d9-2693e448afe3"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("7296ad39-0c6a-4958-9df2-2c61831542ff"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("a7958c7f-4557-4b27-b3d9-2693e448afe3"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("7296ad39-0c6a-4958-9df2-2c61831542ff"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("be69c315-f095-4858-a487-50207c547143"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany()
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany()
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("TreatmentReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");

                    b.Navigation("TreatmentReports");
                });
#pragma warning restore 612, 618
        }
    }
}
