// <auto-generated />
using System;
using HospitalLibrary.Settings;
using HospitalLibrary.SharedModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<Guid>("ConsiliumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Jmbg>("Jmbg")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76e8917c-b221-46c9-9e85-bfb683ed18e3"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Moja Banka Krvi",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Moja Banka Krvi",
                            UserRole = 4,
                            Username = "BloodBank"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("618bf40b-2979-4a05-bce7-dd86990bc179"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Emergent = false,
                            PatientId = new Guid("027e09ee-0e09-43c1-935a-4b987f1bc5d4")
                        },
                        new
                        {
                            Id = new Guid("3e7fe8a0-b603-43b2-9f72-09222759212d"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Emergent = false,
                            PatientId = new Guid("027e09ee-0e09-43c1-935a-4b987f1bc5d4")
                        },
                        new
                        {
                            Id = new Guid("376e5afc-0d07-439f-9d7d-3ab1da49f53a"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Emergent = false,
                            PatientId = new Guid("027e09ee-0e09-43c1-935a-4b987f1bc5d4")
                        },
                        new
                        {
                            Id = new Guid("4378cc94-6ed1-4f03-81cb-4a6c108f7bb7"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Emergent = false,
                            PatientId = new Guid("027e09ee-0e09-43c1-935a-4b987f1bc5d4")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f084800-05ee-4c44-8b57-5a15668b9b45"),
                            Amount = 2,
                            BloodUnitId = new Guid("b08c5a67-7b67-439b-b8d3-874db980203d"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("2ee39572-29c5-4349-bf89-c1b0e12eb405"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("c47ce7d7-eb8e-4136-b962-a4fa76e19486"),
                            Amount = 4,
                            BloodUnitId = new Guid("b08c5a67-7b67-439b-b8d3-874db980203d"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("2ee39572-29c5-4349-bf89-c1b0e12eb405"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b08c5a67-7b67-439b-b8d3-874db980203d"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("f9c8b3eb-98b6-4f67-8584-18953f3cac7f"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("d21bc63d-56a7-4e94-a77c-f5e82ba226ce"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36255eb3-4d66-4ab3-bfc4-7003dce763ce"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("16e41f46-d81d-4223-934e-f83eb3cfac3d"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("5f8af184-c338-43c8-8b73-3d075a3ea46d"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64cb2c83-2ab7-47c4-a34b-a90c31d6bd6a")
                        },
                        new
                        {
                            Id = new Guid("a0513cbb-345c-493a-b976-473ca14c9e48")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExaminationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e25ce581-d560-4e92-88fc-26e8a214e0c8"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("41716b6f-09f3-4ea1-be1d-909736913aa5"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("52370a08-1bf2-43e8-91ff-0cc618e70d81"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("ba8fb171-c91c-4f63-8432-373d635d4d5f"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("d66beaf7-c102-4209-ba8a-7674875fd80b"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("610cbd73-cfb8-4777-a7d6-27616c255be6"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("385d2424-b109-4b29-818a-a7cdbf46fe5d"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("7128a751-4b3b-45f8-a7ff-ddadf4dc68c3"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("9564ee89-2466-4a60-824c-886e1e921309"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("d004d1cb-f9df-426f-865a-d6dabb3dba19"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("40871e49-12b7-4006-bd96-c0a515106b08"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("9e90fdbd-b631-4631-8b9d-412275c9c1a7"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("223ed3ef-5821-457a-8b0f-1e9312ff7b5a"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("8079f47e-4d9b-44bc-ba6c-42c359b923ce"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("a493e967-8d54-4a6a-9268-4a8ea1b3b0ae"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("7b880530-e355-43dc-aba1-8d13fb9e9d64"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("55b65170-9a8e-44aa-9cf6-36f58a3e6fcd"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("7be831a2-f1ad-42ae-bb73-0891784de32c"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("70aa7af4-1f9f-4d32-8ad7-c139ffbd035d"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("ffe930f0-611a-44cd-bced-9fea0bde49fa"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("1ab93ad6-2509-4b6c-9119-9b76161362c1"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c483e51-c86b-4ac9-ba05-3f2e2108145e"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96f69697-3fd9-459f-be57-d1a466d3c41f"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("81eddeaf-7be8-46a8-9ad9-e29a233b08c1"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("79a0b35d-2424-45d8-854b-be91a9f59acc"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("645e2c10-f024-430f-87fd-5e511c491005"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("4ab00993-33b6-4b11-9e40-e128381d9657"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("1d079d8e-eced-4641-9483-870701c6a64a"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("823ec83b-03af-4b14-b715-76dd928fc222"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("4b6e7b46-d05a-4454-a805-1a60b4d1a62d"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Malicious")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfCancellations")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MaliciousPatients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b21acc3-9982-4b89-8dba-35fbaec1cae8"),
                            BuildingId = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("95a68aab-cb1c-4ea5-a445-c8ba50d0bf81"),
                            BuildingId = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("59e29e4d-b183-4f5d-a8d3-4e1cb77d99eb"),
                            BuildingId = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("11afa8a1-5ac1-4fcf-ad17-2754eefc1143"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("c833ccd4-e53a-4b2f-8ef6-b15b83fce1d3"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("61b54c3b-33f1-4683-8487-07f788ed4005"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34c4f497-b1e3-4b7f-b3bb-5c3fdd8a5409"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c6324283-4b9a-4721-bb07-dd44d4723257"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("623712c7-56a8-46fe-811c-a0a99bccbed8"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("f3c62f92-43af-424e-9daf-845bd40c94e6"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e1293d26-aed6-465e-8ceb-d737c419cac9"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c5f5b9af-390c-4746-b633-67034b9af5f0"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e42d0ddf-287a-4ade-9913-fcd9ea91f7ce"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("3b5d430d-64e8-492b-9aae-2303b9398c4e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("cd72cd10-4ce4-4d3d-9ee6-fe157971bc32"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("d98f165e-414d-4d07-a19c-7250b06524bf"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("0e9f9c56-0ced-4906-8139-54b8ee156431"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("d32e2ca2-f426-440d-94f4-a63888345e94"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("14c2b90b-031d-4bd4-85c3-3d6f84869a63"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e0930c1f-1c7b-454a-af45-f719c964b6ca"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b961c6a0-5c04-4678-94b2-3cef26c6769b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("deea1f93-4e0c-437d-9356-c3ab3190af44"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496"),
                            BuildingId = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            FloorId = new Guid("8b21acc3-9982-4b89-8dba-35fbaec1cae8"),
                            GRoomId = new Guid("34c4f497-b1e3-4b7f-b3bb-5c3fdd8a5409"),
                            Name = "A11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("74d24c52-075f-4f58-b423-99afb93544ae"),
                            BuildingId = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            FloorId = new Guid("8b21acc3-9982-4b89-8dba-35fbaec1cae8"),
                            GRoomId = new Guid("c6324283-4b9a-4721-bb07-dd44d4723257"),
                            Name = "B11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("f3c62f92-43af-424e-9daf-845bd40c94e6"),
                            BuildingId = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            FloorId = new Guid("95a68aab-cb1c-4ea5-a445-c8ba50d0bf81"),
                            GRoomId = new Guid("623712c7-56a8-46fe-811c-a0a99bccbed8"),
                            Name = "A12",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c5f5b9af-390c-4746-b633-67034b9af5f0"),
                            BuildingId = new Guid("e8c5ec1a-b038-4a72-b2a5-82762020246f"),
                            FloorId = new Guid("59e29e4d-b183-4f5d-a8d3-4e1cb77d99eb"),
                            GRoomId = new Guid("e1293d26-aed6-465e-8ceb-d737c419cac9"),
                            Name = "A13",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("3b5d430d-64e8-492b-9aae-2303b9398c4e"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorId = new Guid("11afa8a1-5ac1-4fcf-ad17-2754eefc1143"),
                            GRoomId = new Guid("e42d0ddf-287a-4ade-9913-fcd9ea91f7ce"),
                            Name = "A21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("d98f165e-414d-4d07-a19c-7250b06524bf"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorId = new Guid("11afa8a1-5ac1-4fcf-ad17-2754eefc1143"),
                            GRoomId = new Guid("cd72cd10-4ce4-4d3d-9ee6-fe157971bc32"),
                            Name = "B21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("d32e2ca2-f426-440d-94f4-a63888345e94"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorId = new Guid("c833ccd4-e53a-4b2f-8ef6-b15b83fce1d3"),
                            GRoomId = new Guid("0e9f9c56-0ced-4906-8139-54b8ee156431"),
                            Name = "A22",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("e0930c1f-1c7b-454a-af45-f719c964b6ca"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorId = new Guid("61b54c3b-33f1-4683-8487-07f788ed4005"),
                            GRoomId = new Guid("14c2b90b-031d-4bd4-85c3-3d6f84869a63"),
                            Name = "C23",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("deea1f93-4e0c-437d-9356-c3ab3190af44"),
                            BuildingId = new Guid("c39f32c7-9ed0-42f1-94db-ef3290e23985"),
                            FloorId = new Guid("61b54c3b-33f1-4683-8487-07f788ed4005"),
                            GRoomId = new Guid("b961c6a0-5c04-4678-94b2-3cef26c6769b"),
                            Name = "B23",
                            Type = 2
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("181affa6-c3b7-4f44-b165-bc441c9c1011"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496")
                        },
                        new
                        {
                            Id = new Guid("07aa133b-9353-4fc2-b7ea-b60089c52278"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496")
                        },
                        new
                        {
                            Id = new Guid("651e1dc8-49d9-4594-996d-28e68fba44ae"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496")
                        },
                        new
                        {
                            Id = new Guid("7612d917-b228-42de-8ece-f6d653fd796a"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496")
                        },
                        new
                        {
                            Id = new Guid("c71f412c-cab0-4062-9413-4c6dbbde98f5"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae")
                        },
                        new
                        {
                            Id = new Guid("781a3f15-1d44-426d-bf23-748808a7b764"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae")
                        },
                        new
                        {
                            Id = new Guid("151cf733-21d7-4445-95fe-0c28e73854ef"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae")
                        },
                        new
                        {
                            Id = new Guid("fae791ee-4fb0-49b3-9ccf-13c6dfe7560a"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae")
                        },
                        new
                        {
                            Id = new Guid("d0673cea-9ffd-4ef1-a489-e8e8d4558d66"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("7e399fb1-441a-4359-88f4-2a75b68b4e09"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("ffcb226e-1521-49f3-8eda-860354e09175"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("978170cd-7603-4bfb-a96d-1e9a054e634c"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("f3c62f92-43af-424e-9daf-845bd40c94e6")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d21cd89b-ee36-442d-bd70-c8a03d1d6ff2"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("c5f5b9af-390c-4746-b633-67034b9af5f0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c015a57b-c5a9-42c5-b588-03df450681af"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("3b5d430d-64e8-492b-9aae-2303b9398c4e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("70dd3908-f88b-4455-ba55-1c76f8a4b6d3"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("d98f165e-414d-4d07-a19c-7250b06524bf")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d2364dfc-63f7-4851-89a5-0f7241305dd7"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("d32e2ca2-f426-440d-94f4-a63888345e94")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2eb306f8-550d-40ee-803d-395fe357fd51"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("e0930c1f-1c7b-454a-af45-f719c964b6ca")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0f5f6070-4f8e-480a-9afb-5654c6014442"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("deea1f93-4e0c-437d-9356-c3ab3190af44")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3706975d-7a61-4c13-826f-f1def68ff39a"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("9287d2a2-5936-44d3-90f4-f015e5985390"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("aec23815-8e09-417e-841c-c609a4eec804"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4aad4bda-13cc-42be-8497-3cbbd3fc401c"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("f3c62f92-43af-424e-9daf-845bd40c94e6")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("a7388597-6b17-4ada-a1d5-a57cb5a5e080"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("c5f5b9af-390c-4746-b633-67034b9af5f0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2496a0bb-46e0-435d-b644-b9b6a198682b"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("3b5d430d-64e8-492b-9aae-2303b9398c4e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("81d190aa-3a32-4cbe-85ac-11ad2dedbd31"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("3b5d430d-64e8-492b-9aae-2303b9398c4e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6d499348-7439-4f0e-9fdd-aa30a5d89372"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("d98f165e-414d-4d07-a19c-7250b06524bf")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6066560f-3f5b-49dd-a0da-eed93b646932"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("e0930c1f-1c7b-454a-af45-f719c964b6ca")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("dbd8a36c-0c21-4c60-bb04-09888207cacd"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("deea1f93-4e0c-437d-9356-c3ab3190af44")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("Room1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Room2Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Room1Id");

                    b.HasIndex("Room2Id");

                    b.ToTable("RoomMerging");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("newRoomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSpliting");
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e26d5b57-fc4b-48e8-a2e3-d9b36f0f8793"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("8721474b-6941-41d9-a635-66006e4e06ea"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76006241-8940-4f31-9dee-402e86467249"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("ff5030dd-96eb-4310-8094-15b221b6f8db"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ee39572-29c5-4349-bf89-c1b0e12eb405"),
                            AddressId = new Guid("8721474b-6941-41d9-a635-66006e4e06ea"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("74d24c52-075f-4f58-b423-99afb93544ae"),
                            SpecializationId = new Guid("5f8af184-c338-43c8-8b73-3d075a3ea46d"),
                            WorkingScheduleId = new Guid("64cb2c83-2ab7-47c4-a34b-a90c31d6bd6a")
                        },
                        new
                        {
                            Id = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            AddressId = new Guid("e26d5b57-fc4b-48e8-a2e3-d9b36f0f8793"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("3db85e38-8946-4ff3-ab19-99970bdc4496"),
                            SpecializationId = new Guid("16e41f46-d81d-4223-934e-f83eb3cfac3d"),
                            WorkingScheduleId = new Guid("64cb2c83-2ab7-47c4-a34b-a90c31d6bd6a")
                        },
                        new
                        {
                            Id = new Guid("78845798-0ae6-49f4-89d4-1ab0a3d04979"),
                            AddressId = new Guid("e26d5b57-fc4b-48e8-a2e3-d9b36f0f8793"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("d32e2ca2-f426-440d-94f4-a63888345e94"),
                            SpecializationId = new Guid("16e41f46-d81d-4223-934e-f83eb3cfac3d"),
                            WorkingScheduleId = new Guid("64cb2c83-2ab7-47c4-a34b-a90c31d6bd6a")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90a6aad6-9189-45c4-b36c-ceda7816a2ac"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        },
                        new
                        {
                            Id = new Guid("7a9e6c2e-93a1-4e00-9347-fc31eb9caabb"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Blood Bank",
                            UserRole = 3,
                            Username = "ManagerBB"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("027e09ee-0e09-43c1-935a-4b987f1bc5d4"),
                            AddressId = new Guid("e26d5b57-fc4b-48e8-a2e3-d9b36f0f8793"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("008fb634-c355-4362-9602-904823b5039a"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("23a2efe1-b024-40d9-b98f-5dd4bfd987b6"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("1f51cf01-3b5d-4cd8-9a99-8e9e78173a63"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("78845798-0ae6-49f4-89d4-1ab0a3d04979"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("fd39efc0-bc56-4632-b88d-228231fcb0c7"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("e4b97724-f787-4760-bf9b-9f2e27d18b7f"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("81988ffb-4726-4673-899c-1bd2671cbbd4"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("78845798-0ae6-49f4-89d4-1ab0a3d04979"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("b8494092-00f2-45af-b65e-4639535f392f"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("78845798-0ae6-49f4-89d4-1ab0a3d04979"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("ba97474f-e3cb-450e-8646-9624b1b6aee5"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("2ee39572-29c5-4349-bf89-c1b0e12eb405"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("b6b0186d-c973-4d9f-bda0-02b18f35748e"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("2ee39572-29c5-4349-bf89-c1b0e12eb405"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("37d2eec7-eb41-488f-a33e-f6dbdd8ac71a"),
                            AddressId = new Guid("96a3de17-5b59-4d64-a4ed-54312ad709e4"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("78845798-0ae6-49f4-89d4-1ab0a3d04979"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("618bf40b-2979-4a05-bce7-dd86990bc179"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("3e7fe8a0-b603-43b2-9f72-09222759212d"),
                                    From = new DateTime(2022, 12, 15, 22, 42, 56, 29, DateTimeKind.Local).AddTicks(6919),
                                    To = new DateTime(2022, 12, 15, 23, 12, 56, 39, DateTimeKind.Local).AddTicks(3748)
                                },
                                new
                                {
                                    AppointmentId = new Guid("376e5afc-0d07-439f-9d7d-3ab1da49f53a"),
                                    From = new DateTime(2022, 12, 15, 23, 27, 56, 39, DateTimeKind.Local).AddTicks(3803),
                                    To = new DateTime(2022, 12, 15, 23, 57, 56, 39, DateTimeKind.Local).AddTicks(3808)
                                },
                                new
                                {
                                    AppointmentId = new Guid("4378cc94-6ed1-4f03-81cb-4a6c108f7bb7"),
                                    From = new DateTime(2022, 12, 16, 0, 12, 56, 39, DateTimeKind.Local).AddTicks(3811),
                                    To = new DateTime(2022, 12, 16, 0, 42, 56, 39, DateTimeKind.Local).AddTicks(3814)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("HospitalLibrary.SharedModel.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("ConsiliumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Duration")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consiliums");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Room");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("64cb2c83-2ab7-47c4-a34b-a90c31d6bd6a"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("a0513cbb-345c-493a-b976-473ca14c9e48"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.NullableDateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleFrom");

                            b1.Property<DateTime?>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("64cb2c83-2ab7-47c4-a34b-a90c31d6bd6a"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("a0513cbb-345c-493a-b976-473ca14c9e48"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationId");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("8c483e51-c86b-4ac9-ba05-3f2e2108145e"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room1")
                        .WithMany()
                        .HasForeignKey("Room1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room2")
                        .WithMany()
                        .HasForeignKey("Room2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRangeOfMerging", b1 =>
                        {
                            b1.Property<Guid>("RoomMergingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomMergingId");

                            b1.ToTable("RoomMerging");

                            b1.WithOwner()
                                .HasForeignKey("RoomMergingId");
                        });

                    b.Navigation("DateRangeOfMerging");

                    b.Navigation("Room1");

                    b.Navigation("Room2");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DatesForSearch", b1 =>
                        {
                            b1.Property<Guid>("RoomSplitingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomSplitingId");

                            b1.ToTable("RoomSpliting");

                            b1.WithOwner()
                                .HasForeignKey("RoomSplitingId");
                        });

                    b.Navigation("DatesForSearch");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
