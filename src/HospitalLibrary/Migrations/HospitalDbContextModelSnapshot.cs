// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e84fa919-a569-41a3-8192-fbf8634e6df9"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("bddae6d8-ae39-46d6-91eb-51eaac51b028"),
                            Emergent = false,
                            PatientId = new Guid("a893b63d-ac96-443d-b069-37716d9025ab")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e69de57a-f5b5-4dbe-a1e4-4e4a0dd33e25"),
                            Amount = 2,
                            BloodUnitId = new Guid("1f3d59b8-d65f-433c-98f9-68fe7a2a7387"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("03880943-232f-429b-95b0-3c423c757c77"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("012889b4-853a-4078-ae0f-955c21167ef6"),
                            Amount = 4,
                            BloodUnitId = new Guid("1f3d59b8-d65f-433c-98f9-68fe7a2a7387"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("03880943-232f-429b-95b0-3c423c757c77"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f3d59b8-d65f-433c-98f9-68fe7a2a7387"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("7f3e3dfe-dd25-436f-9cb8-24b2dddde041"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("db8ba7a0-8bf4-481e-bce0-21999fa61f47"),
                            Amount = 1,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00937117-7c24-4ab3-9da9-66dba55f258d"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("b6d2b201-5fa7-4f61-a829-54bcb1c8a707"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("f63cebce-7511-4b62-8f48-203cfd5b8859"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18c85e1e-eb6d-461a-9b0d-6a1f232c7ca4")
                        },
                        new
                        {
                            Id = new Guid("1ddb775b-6aeb-446b-973d-6f4771677af6")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6229b59-8958-4fb2-88d0-82e1f5a6a5a9"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("bddae6d8-ae39-46d6-91eb-51eaac51b028"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1569a7c7-7fd5-4ee4-9e00-a2d4592bb50f"),
                            BuildingId = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("cba599ff-cbc9-4782-8b36-fffef5c6370f"),
                            BuildingId = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("57feeaa4-6fbf-4d77-bf28-09fbf3b50ab9"),
                            BuildingId = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("1598f6a8-e5b3-47ee-9d8b-d505ccf106ae"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("37548f51-3f0d-4534-a84a-7e21c03a61ae"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("309f6282-cb29-4032-a4bd-b8e2ba57f04d"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37dd67ed-fde3-479d-bf83-0232fed8cf10"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("7aca4727-c2e0-4bbb-94ca-57ebdd8c79fc"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("847c5bf8-bcc6-4574-a5b6-3d473bfd3fba"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("3bd8b0ed-d180-4147-aa8f-f65454dde75a"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("460c76c7-7e3a-42b3-a0c5-9703f4243e6a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b6a156f8-db34-48d7-a7f3-f5bc93398b9a"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7df20f13-b88f-47b9-8810-4a2e29ef9baa"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("a62dc92c-490b-4646-a720-b84b415025fa"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c1734ac7-f933-4cd8-ae58-c55dff2a1868"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("1f6612e9-3fb8-4133-973e-946ad66fe12b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("66eea6ac-ac1b-4b75-a00e-ccd5c56a6338"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c86d04d8-d45e-4ea8-9749-b6bb4f061428"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("aec05d5d-2ee6-45f3-8cc6-7b41573b5b49"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c23d6f5e-7a32-4156-8070-8a519f4313e9"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7e66bd65-8a25-4ec3-a992-16e6f42083d2"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("5557f373-07c1-48c1-8570-914adc69ba99"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("3d86b7b5-4ed8-4da0-9812-4a6a132eb965"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7aca4727-c2e0-4bbb-94ca-57ebdd8c79fc"),
                            BuildingId = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            FloorId = new Guid("1569a7c7-7fd5-4ee4-9e00-a2d4592bb50f"),
                            GRoomId = new Guid("37dd67ed-fde3-479d-bf83-0232fed8cf10"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a"),
                            BuildingId = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            FloorId = new Guid("1569a7c7-7fd5-4ee4-9e00-a2d4592bb50f"),
                            GRoomId = new Guid("847c5bf8-bcc6-4574-a5b6-3d473bfd3fba"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("460c76c7-7e3a-42b3-a0c5-9703f4243e6a"),
                            BuildingId = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            FloorId = new Guid("cba599ff-cbc9-4782-8b36-fffef5c6370f"),
                            GRoomId = new Guid("3bd8b0ed-d180-4147-aa8f-f65454dde75a"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("7df20f13-b88f-47b9-8810-4a2e29ef9baa"),
                            BuildingId = new Guid("241646c4-b25a-4ec1-867d-4e083f9b0431"),
                            FloorId = new Guid("57feeaa4-6fbf-4d77-bf28-09fbf3b50ab9"),
                            GRoomId = new Guid("b6a156f8-db34-48d7-a7f3-f5bc93398b9a"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("c1734ac7-f933-4cd8-ae58-c55dff2a1868"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorId = new Guid("1598f6a8-e5b3-47ee-9d8b-d505ccf106ae"),
                            GRoomId = new Guid("a62dc92c-490b-4646-a720-b84b415025fa"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("66eea6ac-ac1b-4b75-a00e-ccd5c56a6338"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorId = new Guid("1598f6a8-e5b3-47ee-9d8b-d505ccf106ae"),
                            GRoomId = new Guid("1f6612e9-3fb8-4133-973e-946ad66fe12b"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("aec05d5d-2ee6-45f3-8cc6-7b41573b5b49"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorId = new Guid("37548f51-3f0d-4534-a84a-7e21c03a61ae"),
                            GRoomId = new Guid("c86d04d8-d45e-4ea8-9749-b6bb4f061428"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("7e66bd65-8a25-4ec3-a992-16e6f42083d2"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorId = new Guid("309f6282-cb29-4032-a4bd-b8e2ba57f04d"),
                            GRoomId = new Guid("c23d6f5e-7a32-4156-8070-8a519f4313e9"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("3d86b7b5-4ed8-4da0-9812-4a6a132eb965"),
                            BuildingId = new Guid("c7f60f0e-524d-468f-8636-6b9519549eca"),
                            FloorId = new Guid("309f6282-cb29-4032-a4bd-b8e2ba57f04d"),
                            GRoomId = new Guid("5557f373-07c1-48c1-8570-914adc69ba99"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f10511d-78c7-40b2-9bbe-9b7d2fe4ba80"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("7aca4727-c2e0-4bbb-94ca-57ebdd8c79fc")
                        },
                        new
                        {
                            Id = new Guid("dee3d0f3-6b92-442c-9a9b-34ca36ae10d1"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("7aca4727-c2e0-4bbb-94ca-57ebdd8c79fc")
                        },
                        new
                        {
                            Id = new Guid("b4f92925-697e-4aa8-b62f-0fd9b836e4aa"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("7aca4727-c2e0-4bbb-94ca-57ebdd8c79fc")
                        },
                        new
                        {
                            Id = new Guid("99f366af-6a79-456d-be24-1fd6279ae24e"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("7aca4727-c2e0-4bbb-94ca-57ebdd8c79fc")
                        },
                        new
                        {
                            Id = new Guid("4636d8a9-ce84-49a9-a7d7-fb67eff53c4c"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a")
                        },
                        new
                        {
                            Id = new Guid("6a11b90b-07a5-497e-b55d-3e3cbeb3cf9b"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a")
                        },
                        new
                        {
                            Id = new Guid("a5def8a0-fa66-4061-b575-0f15b236c4be"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a")
                        },
                        new
                        {
                            Id = new Guid("40f272d5-90cf-4056-ba13-d026118e22a5"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a")
                        },
                        new
                        {
                            Id = new Guid("ee8a9a1a-3a44-4f38-9f03-753c1b1ad8ef"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfHospitalization")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f73d612f-fc93-4869-9a90-72af84220a30"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("64c1edea-9e5d-473d-a60c-67a40dfb8bd6"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("15d981a9-a284-4dd8-8ace-c71709dfcdf8"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IngredientPatient");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03880943-232f-429b-95b0-3c423c757c77"),
                            AddressId = new Guid("64c1edea-9e5d-473d-a60c-67a40dfb8bd6"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("6874063f-dbb3-4f19-8785-dca394c9f19a"),
                            SpecializationId = new Guid("f63cebce-7511-4b62-8f48-203cfd5b8859"),
                            WorkingScheduleId = new Guid("18c85e1e-eb6d-461a-9b0d-6a1f232c7ca4")
                        },
                        new
                        {
                            Id = new Guid("bddae6d8-ae39-46d6-91eb-51eaac51b028"),
                            AddressId = new Guid("f73d612f-fc93-4869-9a90-72af84220a30"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("7aca4727-c2e0-4bbb-94ca-57ebdd8c79fc"),
                            SpecializationId = new Guid("f63cebce-7511-4b62-8f48-203cfd5b8859"),
                            WorkingScheduleId = new Guid("18c85e1e-eb6d-461a-9b0d-6a1f232c7ca4")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8009e47f-67f0-462a-8877-3aa7548f27a7"),
                            AddressId = new Guid("15d981a9-a284-4dd8-8ace-c71709dfcdf8"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a893b63d-ac96-443d-b069-37716d9025ab"),
                            AddressId = new Guid("f73d612f-fc93-4869-9a90-72af84220a30"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale"
                        },
                        new
                        {
                            Id = new Guid("deb9bbeb-844e-4313-b038-2233cb551073"),
                            AddressId = new Guid("15d981a9-a284-4dd8-8ace-c71709dfcdf8"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("e84fa919-a569-41a3-8192-fbf8634e6df9"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("18c85e1e-eb6d-461a-9b0d-6a1f232c7ca4"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("1ddb775b-6aeb-446b-973d-6f4771677af6"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("18c85e1e-eb6d-461a-9b0d-6a1f232c7ca4"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("1ddb775b-6aeb-446b-973d-6f4771677af6"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("d6229b59-8958-4fb2-88d0-82e1f5a6a5a9"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany()
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany()
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("TreatmentReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("TreatmentReportId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TreatmentReportId");

                            b1.ToTable("TreatmentReport");

                            b1.WithOwner()
                                .HasForeignKey("TreatmentReportId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");

                    b.Navigation("TreatmentReports");
                });
#pragma warning restore 612, 618
        }
    }
}
