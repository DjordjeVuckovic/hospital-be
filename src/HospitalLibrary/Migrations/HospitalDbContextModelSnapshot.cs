// <auto-generated />
using System;
using HospitalLibrary.Settings;
using HospitalLibrary.SharedModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<Guid>("ConsiliumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Jmbg>("Jmbg")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd6fc5ff-b0db-4f33-b745-33245ba797fb"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Moja Banka Krvi",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Moja Banka Krvi",
                            UserRole = 4,
                            Username = "BloodBank"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9d1f366-802e-4501-bb32-da0f04368a88"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Emergent = false,
                            PatientId = new Guid("d7ff4010-3aed-4440-8d17-617b41feef33")
                        },
                        new
                        {
                            Id = new Guid("6a7249b0-60d5-4b48-86b2-341d75bab00b"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Emergent = false,
                            PatientId = new Guid("d7ff4010-3aed-4440-8d17-617b41feef33")
                        },
                        new
                        {
                            Id = new Guid("9d66c3ab-2214-4439-b5d9-11c10ebecd90"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Emergent = false,
                            PatientId = new Guid("d7ff4010-3aed-4440-8d17-617b41feef33")
                        },
                        new
                        {
                            Id = new Guid("23d70897-8066-454d-b113-3f88cf8afd76"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Emergent = false,
                            PatientId = new Guid("d7ff4010-3aed-4440-8d17-617b41feef33")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("004e06aa-78a3-4ca8-b4f9-497b6aa322eb"),
                            Amount = 2,
                            BloodUnitId = new Guid("d547ea05-0c7c-4210-a1ec-be586bf1eb8d"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("4f3f331f-3b2d-4db2-9604-44e65940e066"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("8e406c72-9b44-4563-89a4-905d38faa844"),
                            Amount = 4,
                            BloodUnitId = new Guid("d547ea05-0c7c-4210-a1ec-be586bf1eb8d"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("4f3f331f-3b2d-4db2-9604-44e65940e066"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d547ea05-0c7c-4210-a1ec-be586bf1eb8d"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("32038b9a-63d3-40e5-b344-aebcc6d47b4b"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("f4651a6e-2c1a-4f1c-af21-cf755c3118a2"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bd321d2-db10-4755-83ff-f1f8fa888cd1"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("f19f3d8a-292d-439c-a8f7-039ae02cfa13"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("5f34ceae-c893-4e37-9783-d0b2aba4df5e"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("343aa89b-51b0-425c-bfd0-ecd9c79ca0d1")
                        },
                        new
                        {
                            Id = new Guid("59989efe-25f3-41f4-b2cb-8ed4f5802e5f")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExaminationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c958fee1-ea73-4797-94a8-735e2d292047"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("78bad416-cba3-4524-9f0e-1f51e816034a"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("202c9392-e56b-45d3-a4f8-6a1c7fce34ee"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("941f3333-f4f5-40d1-8db9-8b4bf780e473"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("eaa66cb5-007e-4d8c-b430-1869a8d5c3d2"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("e1405075-4a38-49c5-bb28-41528617538d"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("67c6b24a-b1fe-4deb-b7f0-6bb40a24582e"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("1b1c9267-9fbb-4fb3-ad20-d5e025f597d1"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("bff5f3a9-4bfb-4b66-a9ef-157c4c067fde"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("38ea5da9-6495-4628-b474-3ca0bdfe38dd"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("e46be057-33ca-4a52-a444-66f58d51f4d8"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("fb38cee8-e5db-45e9-9b53-98b8cb41c4ba"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("746d968d-8767-48e4-a2e7-2b2c0cc45553"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("bcd056b1-b668-4df7-a191-75756fdd425b"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("88f54fbd-d4a7-4474-b590-d367ea0f32d1"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("0850e3bf-40b8-4cde-907a-9f089ae864d4"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("3e2ca070-5249-40ed-a781-0b4920b44d56"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("01cd073c-994c-4b9b-8e6b-547c18944260"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("4a4e97b6-c188-4a7d-a46f-6e11ac19e971"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("e51b85d3-5b8f-4897-a859-053bfcbb99e0"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("d8a73662-aa5f-42d2-b208-211aa03a5805"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44e511a4-cdbe-4427-95f7-9fa243119eb9"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1d69703-3c8c-47d0-a37a-c2a915e9262a"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("0f24b92f-c438-44d7-8580-bd7da7bdbde6"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("babe7885-081c-4510-9d05-f70a52b0d875"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("f1522d98-e440-4933-9474-bcd21d860d96"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("051ca318-647a-4bdb-a456-4410dc0cbb5b"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("f0899668-2aa1-4148-ba74-ebf108f1b5f4"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("7b21682e-81a8-4782-ab1c-f735ca1dcd32"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("044cba71-d1cf-4a00-85c5-21a7ecba728f"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Malicious")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfCancellations")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MaliciousPatients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bf894c8-9a01-4c2a-9531-2b39ed4e0375"),
                            BuildingId = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("4797e2ef-8e5d-4ebe-91fe-37f39ca30389"),
                            BuildingId = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("b8c48d05-6fdc-4f8c-af83-bdea85d09065"),
                            BuildingId = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("5e1ecb64-56fa-47fd-a1d6-12cc9f2093b4"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("93fc9018-7a61-4388-a49a-9ad4d1244aa0"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("02d1383a-64f7-4476-8e24-f8c4d17205e1"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfdcecc0-731e-4443-a99f-00fc59db0af6"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("4817e052-4349-4ff0-942c-8ad46fb1097e"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("54a3f1e7-2873-4d13-b23c-7cacb07ce3f2"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("269bb38a-bd6f-4291-8130-b40bc28f3727"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("0e7685ef-e655-43d6-a7c0-1daacd8d65ca"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("90ae5504-a1e6-40f0-8271-5cb35dcf80f5"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("0a9be967-27d9-4bf3-a126-dd20bf1540d4"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("70e0d2b2-313e-4512-a150-986c71fe9f7f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("270a5389-8ff4-4014-917d-410a61e47208"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("93051ab9-e490-4a53-b157-e9c404c042d3"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("4f9d27e6-5283-420a-ab9c-42c86b223f80"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("12fbf169-5149-4417-9b18-4b1dc095fb63"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("4daf6894-10c1-42b8-8d76-8b5c0654432b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("aa773739-990d-4419-9f67-7a3875ea7c4a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("34307662-d6ef-40ff-920a-05fc90845f00"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("7a35778c-4bcb-47a4-9586-90a78fd5b74e"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42"),
                            BuildingId = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            FloorId = new Guid("7bf894c8-9a01-4c2a-9531-2b39ed4e0375"),
                            GRoomId = new Guid("cfdcecc0-731e-4443-a99f-00fc59db0af6"),
                            Name = "A11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85"),
                            BuildingId = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            FloorId = new Guid("7bf894c8-9a01-4c2a-9531-2b39ed4e0375"),
                            GRoomId = new Guid("4817e052-4349-4ff0-942c-8ad46fb1097e"),
                            Name = "B11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("269bb38a-bd6f-4291-8130-b40bc28f3727"),
                            BuildingId = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            FloorId = new Guid("4797e2ef-8e5d-4ebe-91fe-37f39ca30389"),
                            GRoomId = new Guid("54a3f1e7-2873-4d13-b23c-7cacb07ce3f2"),
                            Name = "A12",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("90ae5504-a1e6-40f0-8271-5cb35dcf80f5"),
                            BuildingId = new Guid("395dc3c1-9f79-4e87-bbcc-387310b514c0"),
                            FloorId = new Guid("b8c48d05-6fdc-4f8c-af83-bdea85d09065"),
                            GRoomId = new Guid("0e7685ef-e655-43d6-a7c0-1daacd8d65ca"),
                            Name = "A13",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("70e0d2b2-313e-4512-a150-986c71fe9f7f"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorId = new Guid("5e1ecb64-56fa-47fd-a1d6-12cc9f2093b4"),
                            GRoomId = new Guid("0a9be967-27d9-4bf3-a126-dd20bf1540d4"),
                            Name = "A21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("93051ab9-e490-4a53-b157-e9c404c042d3"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorId = new Guid("5e1ecb64-56fa-47fd-a1d6-12cc9f2093b4"),
                            GRoomId = new Guid("270a5389-8ff4-4014-917d-410a61e47208"),
                            Name = "B21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("12fbf169-5149-4417-9b18-4b1dc095fb63"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorId = new Guid("93fc9018-7a61-4388-a49a-9ad4d1244aa0"),
                            GRoomId = new Guid("4f9d27e6-5283-420a-ab9c-42c86b223f80"),
                            Name = "A22",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("aa773739-990d-4419-9f67-7a3875ea7c4a"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorId = new Guid("02d1383a-64f7-4476-8e24-f8c4d17205e1"),
                            GRoomId = new Guid("4daf6894-10c1-42b8-8d76-8b5c0654432b"),
                            Name = "C23",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("7a35778c-4bcb-47a4-9586-90a78fd5b74e"),
                            BuildingId = new Guid("9ad1e1f4-7656-4541-8aa3-342cc2d83cc5"),
                            FloorId = new Guid("02d1383a-64f7-4476-8e24-f8c4d17205e1"),
                            GRoomId = new Guid("34307662-d6ef-40ff-920a-05fc90845f00"),
                            Name = "B23",
                            Type = 2
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("343de7f2-1d1e-4650-8364-115bda5610ce"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42")
                        },
                        new
                        {
                            Id = new Guid("8eeab343-3aa2-4d5c-a6f8-47f336c582a8"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42")
                        },
                        new
                        {
                            Id = new Guid("f15bc6ba-cd04-45a5-9469-deea6e11e90e"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42")
                        },
                        new
                        {
                            Id = new Guid("66b2f813-34fe-46b3-991d-d7c53c530600"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42")
                        },
                        new
                        {
                            Id = new Guid("b546696b-4414-4eb4-8779-c558d812add2"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85")
                        },
                        new
                        {
                            Id = new Guid("9c269412-bce0-4c4b-b9dc-64de191123f3"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85")
                        },
                        new
                        {
                            Id = new Guid("f55905c6-3252-43f2-b859-f889f4efddb4"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85")
                        },
                        new
                        {
                            Id = new Guid("65a760f0-c69f-4cdb-88e4-39ef77f48262"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85")
                        },
                        new
                        {
                            Id = new Guid("48d8a6e6-d854-49ff-9e9d-98350d0dc024"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("32f6c41a-56d4-487e-a30f-cb90ba5816ee"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("f92c2274-6ed5-4317-947c-95c279a7a035"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8638f09d-5646-49f2-9d70-3afdbcc04311"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("269bb38a-bd6f-4291-8130-b40bc28f3727")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("43177a9a-90a7-438c-b1f0-0cb427938151"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("90ae5504-a1e6-40f0-8271-5cb35dcf80f5")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8fd48b33-4715-42e8-a23f-fbb054557cb2"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("70e0d2b2-313e-4512-a150-986c71fe9f7f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("60e6cee4-34bf-4252-b751-cb41209c8ef4"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("93051ab9-e490-4a53-b157-e9c404c042d3")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("ad5cd3b5-957d-4308-af60-71f024eb964a"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("12fbf169-5149-4417-9b18-4b1dc095fb63")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("00848379-70c6-47e6-abcb-a068db77ade2"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("aa773739-990d-4419-9f67-7a3875ea7c4a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("1e8ce802-81ff-4758-8b10-14e265f31ca5"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("7a35778c-4bcb-47a4-9586-90a78fd5b74e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b71cbd56-f57a-4be6-aa24-a4108384e404"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("39584d99-ac25-4028-8689-3a140a8ec363"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("dc8fcbbf-02e4-47e0-8edc-ff37316553d2"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("70a8e7e0-883d-4e62-9730-fe8007939790"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("269bb38a-bd6f-4291-8130-b40bc28f3727")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("187b99fe-e37a-41c6-85cf-dc77422ff23b"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("90ae5504-a1e6-40f0-8271-5cb35dcf80f5")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("cc54c064-3fd4-419f-b00c-999cfecf6e75"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("70e0d2b2-313e-4512-a150-986c71fe9f7f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("bd6d12bf-2a39-405b-ac1c-6ba9b2e8b7dd"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("70e0d2b2-313e-4512-a150-986c71fe9f7f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("dd8fca59-8b5a-4d15-b0be-134cef88b035"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("93051ab9-e490-4a53-b157-e9c404c042d3")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("585d27dc-e03c-45a6-84eb-73dd0f4aba03"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("aa773739-990d-4419-9f67-7a3875ea7c4a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d5ffe6d5-c86c-4c43-a67f-d92130bb0451"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("7a35778c-4bcb-47a4-9586-90a78fd5b74e")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("Room1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Room2Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Room1Id");

                    b.HasIndex("Room2Id");

                    b.ToTable("RoomMerging");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("newRoomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSpliting");
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eab7c75f-e4f4-4729-99a7-5ad488abaca7"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("43d1bc5b-2a67-4ce7-9797-722d8b717054"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9813ce7d-84e3-49b8-8eba-133a3722e1c6"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("c7323bb7-6022-4570-9ba7-2f84f28c470a"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f3f331f-3b2d-4db2-9604-44e65940e066"),
                            AddressId = new Guid("43d1bc5b-2a67-4ce7-9797-722d8b717054"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("56516f6e-80e5-4920-8719-86a3b6252f85"),
                            SpecializationId = new Guid("5f34ceae-c893-4e37-9783-d0b2aba4df5e"),
                            WorkingScheduleId = new Guid("343aa89b-51b0-425c-bfd0-ecd9c79ca0d1")
                        },
                        new
                        {
                            Id = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            AddressId = new Guid("eab7c75f-e4f4-4729-99a7-5ad488abaca7"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("b9c542cd-e26d-4b95-9c4e-49b2c8141b42"),
                            SpecializationId = new Guid("f19f3d8a-292d-439c-a8f7-039ae02cfa13"),
                            WorkingScheduleId = new Guid("343aa89b-51b0-425c-bfd0-ecd9c79ca0d1")
                        },
                        new
                        {
                            Id = new Guid("f8848361-f850-448e-bcb2-b295eab95bea"),
                            AddressId = new Guid("eab7c75f-e4f4-4729-99a7-5ad488abaca7"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("12fbf169-5149-4417-9b18-4b1dc095fb63"),
                            SpecializationId = new Guid("f19f3d8a-292d-439c-a8f7-039ae02cfa13"),
                            WorkingScheduleId = new Guid("343aa89b-51b0-425c-bfd0-ecd9c79ca0d1")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("048f8d9b-23e5-4ce6-86ed-2a33c0ec6d64"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        },
                        new
                        {
                            Id = new Guid("c9841f58-0882-4107-9525-9ad2b585a941"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Blood Bank",
                            UserRole = 3,
                            Username = "ManagerBB"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7ff4010-3aed-4440-8d17-617b41feef33"),
                            AddressId = new Guid("eab7c75f-e4f4-4729-99a7-5ad488abaca7"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("38829e62-44b5-4cff-befb-9239201f968a"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("9fa1c738-8f61-4554-b5c7-64f175c58f6a"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("4bc9eafb-092f-4b19-a2e9-17ab29e306cf"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f8848361-f850-448e-bcb2-b295eab95bea"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("96566873-353e-49da-92ec-e65d119690ac"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("b29ca7de-3ed1-481e-bbb9-6e9021cda555"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("fb591cbb-fd62-4401-8f93-c64baf643ce3"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f8848361-f850-448e-bcb2-b295eab95bea"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("55bc4e7e-3aa5-40de-bfc4-a9f52db3d550"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f8848361-f850-448e-bcb2-b295eab95bea"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("aae568e9-1d7d-4c2b-81b3-2f2247e48603"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("4f3f331f-3b2d-4db2-9604-44e65940e066"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("0ba3c7c7-4bb7-43e2-b8e3-3c42e8816cad"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("4f3f331f-3b2d-4db2-9604-44e65940e066"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("18b37bd8-9e73-480a-a6dc-22466832e625"),
                            AddressId = new Guid("e685dc32-3c6e-4b58-99af-468d6186f208"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f8848361-f850-448e-bcb2-b295eab95bea"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("b9d1f366-802e-4501-bb32-da0f04368a88"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("6a7249b0-60d5-4b48-86b2-341d75bab00b"),
                                    From = new DateTime(2022, 12, 15, 19, 41, 22, 998, DateTimeKind.Local).AddTicks(1200),
                                    To = new DateTime(2022, 12, 15, 20, 11, 23, 5, DateTimeKind.Local).AddTicks(9613)
                                },
                                new
                                {
                                    AppointmentId = new Guid("9d66c3ab-2214-4439-b5d9-11c10ebecd90"),
                                    From = new DateTime(2022, 12, 15, 20, 26, 23, 5, DateTimeKind.Local).AddTicks(9664),
                                    To = new DateTime(2022, 12, 15, 20, 56, 23, 5, DateTimeKind.Local).AddTicks(9669)
                                },
                                new
                                {
                                    AppointmentId = new Guid("23d70897-8066-454d-b113-3f88cf8afd76"),
                                    From = new DateTime(2022, 12, 15, 21, 11, 23, 5, DateTimeKind.Local).AddTicks(9673),
                                    To = new DateTime(2022, 12, 15, 21, 41, 23, 5, DateTimeKind.Local).AddTicks(9676)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("HospitalLibrary.SharedModel.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("ConsiliumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Duration")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consiliums");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Room");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("343aa89b-51b0-425c-bfd0-ecd9c79ca0d1"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("59989efe-25f3-41f4-b2cb-8ed4f5802e5f"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.NullableDateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleFrom");

                            b1.Property<DateTime?>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("343aa89b-51b0-425c-bfd0-ecd9c79ca0d1"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("59989efe-25f3-41f4-b2cb-8ed4f5802e5f"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationId");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("44e511a4-cdbe-4427-95f7-9fa243119eb9"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room1")
                        .WithMany()
                        .HasForeignKey("Room1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room2")
                        .WithMany()
                        .HasForeignKey("Room2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRangeOfMerging", b1 =>
                        {
                            b1.Property<Guid>("RoomMergingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomMergingId");

                            b1.ToTable("RoomMerging");

                            b1.WithOwner()
                                .HasForeignKey("RoomMergingId");
                        });

                    b.Navigation("DateRangeOfMerging");

                    b.Navigation("Room1");

                    b.Navigation("Room2");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DatesForSearch", b1 =>
                        {
                            b1.Property<Guid>("RoomSplitingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomSplitingId");

                            b1.ToTable("RoomSpliting");

                            b1.WithOwner()
                                .HasForeignKey("RoomSplitingId");
                        });

                    b.Navigation("DatesForSearch");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
