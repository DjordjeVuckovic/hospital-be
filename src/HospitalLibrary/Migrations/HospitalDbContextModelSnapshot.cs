// <auto-generated />
using System;
using HospitalLibrary.Settings;
using HospitalLibrary.SharedModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<Guid>("ConsiliumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Jmbg>("Jmbg")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Phone>("Phone")
                        .HasColumnType("jsonb");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("437857ae-765b-4e45-95aa-4042a4acee83"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Moja Banka Krvi",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Moja Banka Krvi",
                            UserRole = 4,
                            Username = "BloodBank"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0576733-b7fa-4974-b60c-d3d7e8c9f216"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Emergent = false,
                            PatientId = new Guid("42570b2f-3ff8-45d6-916c-90e2164c102a")
                        },
                        new
                        {
                            Id = new Guid("10de18aa-eb8e-440a-80f0-6eac51132c2b"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Emergent = false,
                            PatientId = new Guid("42570b2f-3ff8-45d6-916c-90e2164c102a")
                        },
                        new
                        {
                            Id = new Guid("b0625797-9cbe-46af-8adb-1055e9a54767"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Emergent = false,
                            PatientId = new Guid("42570b2f-3ff8-45d6-916c-90e2164c102a")
                        },
                        new
                        {
                            Id = new Guid("4676b39e-242a-4f3e-91cf-b9b50550e3fa"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Emergent = false,
                            PatientId = new Guid("42570b2f-3ff8-45d6-916c-90e2164c102a")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a802ee6c-93bd-4e1b-b4fd-a58245145e31"),
                            Amount = 2,
                            BloodUnitId = new Guid("2dda1bd4-ea0a-4faa-9f3e-4fa50ab40796"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("764d4f12-daad-4d19-949d-30bd95d02bdb"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("3c8a1fe0-7638-484d-9b30-e2f9318381cd"),
                            Amount = 4,
                            BloodUnitId = new Guid("2dda1bd4-ea0a-4faa-9f3e-4fa50ab40796"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("764d4f12-daad-4d19-949d-30bd95d02bdb"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dda1bd4-ea0a-4faa-9f3e-4fa50ab40796"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("353a65b9-7c93-48af-ad00-b0379cc6aff3"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("c4487064-5b98-4a5b-9d36-d904cc3d4818"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c3f6053-e8b2-4fa7-95eb-003279fdd81b"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("da649b20-dfbc-45fd-b0fd-f73fe2dd3ba8"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("0d6730f3-7fa4-4d0d-ab59-94b26f5d921e"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c50ab12f-df03-4307-8816-6c5d4ba3b79a")
                        },
                        new
                        {
                            Id = new Guid("a7369dd5-4afb-4d4b-ae9f-348ac284a7b5")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e647489-b9ff-48b4-9545-f8d6d5ee1dc6"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("dc05add6-2585-44f7-9ed4-90d56060fed8"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("cc9a4f21-3502-47d5-be63-906d0c6fb3a5"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("d20af14d-086e-4e4c-bd49-26e23d6ddc00"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("de982e88-4f6b-49cb-b740-9df190c3c559"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("aed63845-b147-40d7-aeb3-90588a44de1e"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("b73a350e-6726-4ed0-a4a9-11742f68fec6"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("291ac8dc-e53b-4717-9e08-dd36ec786353"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("a7b702f7-9aaf-4194-b046-a897d2c4df98"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("52d9a748-bd77-461e-bbd6-e3fd50bd08a6"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("d458f260-e6b7-4242-a85f-d39a66800285"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("ff17aee3-b17c-4f39-aef5-ee70813d269b"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("cf5e47a1-353f-40e7-98f1-0783fadd7c68"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("de5f3629-d63a-4125-b679-59f6f8850fd6"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("90ff0647-e316-4b1c-84f0-025bbdc2fc54"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("36593902-19ec-47c5-9fdb-88d61b8280a6"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("85d6e7b0-8444-4df2-9dd6-17c4bd40b5bc"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("371b3452-989f-4b32-8947-53249c00db96"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("5be37eaa-4b77-4c50-82cd-6a9b64fa5fb6"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("214f5300-78b9-44ed-baee-11a7019c21fc"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("5b2207bf-c61d-46da-9957-62b30a0c5e10"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abc96a87-024e-41ae-ae68-148a3501a2db"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56bd53fe-6a7c-4814-8617-d1dfe22fa9f2"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("fa997522-86d2-45ea-987f-cfecca0093f4"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("1027b970-b06a-46b2-ae0a-e4acf35834e1"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("dbe61898-ad3c-4486-a1a4-bef2b690548b"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("977c0cfa-e573-4c4c-b38e-4ca5e151ab18"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("089fe91b-fc7b-47ca-b0f8-6eb9277c56cb"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("df74d4fa-5523-4928-9ebc-15ad1b40f9c6"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("0d3021a7-304f-4cf9-ada4-76c03c85fe7a"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Malicious")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfCancellations")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MaliciousPatients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d61b6156-8f5a-4211-afdd-c1594b44f803"),
                            BuildingId = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("5696d3af-31f4-42dc-b48f-52c7b3b8f5c5"),
                            BuildingId = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("8f95f323-8366-4020-bf8d-df30e3e1d986"),
                            BuildingId = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("4e07d865-6bf3-4338-967e-ba90124c45dd"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("bce8513b-2804-4a12-8595-67e0bfe0685e"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("bcaebe30-79fa-4060-afa9-b1e3e3ee6231"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49dc6c2e-8ff4-46ed-9bf2-22277f2130bf"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("354e44e6-b472-467a-8ccd-8a6bbaea12f9"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c280bb76-656a-4e7f-94f8-f432181cef87"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("d5e58da7-a9dd-4264-ad24-300f4e02c2bc"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("1139f915-a881-4bdb-be67-4fd5d4122d3f"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("efe1f2d3-2315-4388-a119-b166e4046e8e"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("0fbcbd36-fc56-4a25-96a8-dd68ab78290e"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("f271f4a2-868f-4101-9d21-c78443cb39aa"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("312f1f18-67ca-40a4-90b0-4106d93b298b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("8ec13098-dd6d-4d75-b10a-c45978fc4dd3"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7f745653-d0f6-436d-b610-1f2b0711d89b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("2b04faed-c3c0-416a-9bc5-0cfffd9dd796"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("03fccaa6-b246-462d-af82-baa4eb409f1a"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("564e7950-c830-421f-b04d-d25c3eb5f0bf"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("3d7652bb-f7e1-4bf5-a69e-e24b1069ce6f"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("99601e67-9c44-48bc-a404-ea3042c8a5fe"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf"),
                            BuildingId = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            FloorId = new Guid("d61b6156-8f5a-4211-afdd-c1594b44f803"),
                            GRoomId = new Guid("49dc6c2e-8ff4-46ed-9bf2-22277f2130bf"),
                            Name = "A11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e"),
                            BuildingId = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            FloorId = new Guid("d61b6156-8f5a-4211-afdd-c1594b44f803"),
                            GRoomId = new Guid("354e44e6-b472-467a-8ccd-8a6bbaea12f9"),
                            Name = "B11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d5e58da7-a9dd-4264-ad24-300f4e02c2bc"),
                            BuildingId = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            FloorId = new Guid("5696d3af-31f4-42dc-b48f-52c7b3b8f5c5"),
                            GRoomId = new Guid("c280bb76-656a-4e7f-94f8-f432181cef87"),
                            Name = "A12",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("efe1f2d3-2315-4388-a119-b166e4046e8e"),
                            BuildingId = new Guid("048cda77-ff36-4434-bf8e-20e1a6ab0fbb"),
                            FloorId = new Guid("8f95f323-8366-4020-bf8d-df30e3e1d986"),
                            GRoomId = new Guid("1139f915-a881-4bdb-be67-4fd5d4122d3f"),
                            Name = "A13",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("f271f4a2-868f-4101-9d21-c78443cb39aa"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorId = new Guid("4e07d865-6bf3-4338-967e-ba90124c45dd"),
                            GRoomId = new Guid("0fbcbd36-fc56-4a25-96a8-dd68ab78290e"),
                            Name = "A21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("8ec13098-dd6d-4d75-b10a-c45978fc4dd3"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorId = new Guid("4e07d865-6bf3-4338-967e-ba90124c45dd"),
                            GRoomId = new Guid("312f1f18-67ca-40a4-90b0-4106d93b298b"),
                            Name = "B21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("2b04faed-c3c0-416a-9bc5-0cfffd9dd796"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorId = new Guid("bce8513b-2804-4a12-8595-67e0bfe0685e"),
                            GRoomId = new Guid("7f745653-d0f6-436d-b610-1f2b0711d89b"),
                            Name = "A22",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("564e7950-c830-421f-b04d-d25c3eb5f0bf"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorId = new Guid("bcaebe30-79fa-4060-afa9-b1e3e3ee6231"),
                            GRoomId = new Guid("03fccaa6-b246-462d-af82-baa4eb409f1a"),
                            Name = "C23",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("99601e67-9c44-48bc-a404-ea3042c8a5fe"),
                            BuildingId = new Guid("0af74332-3975-41fb-9b09-7d5cf1b542a5"),
                            FloorId = new Guid("bcaebe30-79fa-4060-afa9-b1e3e3ee6231"),
                            GRoomId = new Guid("3d7652bb-f7e1-4bf5-a69e-e24b1069ce6f"),
                            Name = "B23",
                            Type = 2
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbce2f5c-5ee8-4740-9845-dea35a2ba4d8"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf")
                        },
                        new
                        {
                            Id = new Guid("d21a95fa-87a0-492a-97bd-aee7fa0e9ac9"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf")
                        },
                        new
                        {
                            Id = new Guid("f3781455-4d87-4116-a36b-91bb566c3b47"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf")
                        },
                        new
                        {
                            Id = new Guid("1b43b987-b633-47e1-ae26-5ce697322632"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf")
                        },
                        new
                        {
                            Id = new Guid("d9005502-7013-49aa-926a-7a8200f93da9"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e")
                        },
                        new
                        {
                            Id = new Guid("dee0dcf3-ae30-444a-b63b-ceb91079a90c"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e")
                        },
                        new
                        {
                            Id = new Guid("707fd4b6-616f-45a6-9698-0cbc9bd9f821"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e")
                        },
                        new
                        {
                            Id = new Guid("868d9429-2822-404d-aec7-d8f67bc7c828"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e")
                        },
                        new
                        {
                            Id = new Guid("dcdbb216-c5ce-4c42-9e46-d61924fddd4d"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("51ccfba6-c5f0-4837-8e9c-c2043ada7f62"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8a54eb4c-1daa-4ff3-bad3-a1ab8cf4d275"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b8deadc7-2a21-45a2-940e-2d4aff1f2a65"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("d5e58da7-a9dd-4264-ad24-300f4e02c2bc")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("89ce3546-5f50-409e-87eb-d0ce2cf43f21"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("efe1f2d3-2315-4388-a119-b166e4046e8e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("80c563d0-0cb8-45aa-be18-d08ddc1aede9"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("f271f4a2-868f-4101-9d21-c78443cb39aa")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("49714fa9-3d68-425d-bb0f-681fc19ba917"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("8ec13098-dd6d-4d75-b10a-c45978fc4dd3")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0355e1b6-3569-4707-b577-67caf32163e4"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("2b04faed-c3c0-416a-9bc5-0cfffd9dd796")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("374cee5b-66ad-49b0-8864-d5d0fa8771dd"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("564e7950-c830-421f-b04d-d25c3eb5f0bf")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("91e54bdb-3c93-414f-a1dc-29291f5d351f"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("99601e67-9c44-48bc-a404-ea3042c8a5fe")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d4a68ce8-dcd3-444d-8cf9-ad31ef3b2072"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("61773805-c80d-4b0d-93ff-02495a452557"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3ea10778-7350-4459-ac6c-b470c584b7ca"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0b46eb3a-79d5-415d-9122-b815d9c8762e"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("d5e58da7-a9dd-4264-ad24-300f4e02c2bc")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("936241aa-79ae-40f8-ade5-c3f32b8421ad"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("efe1f2d3-2315-4388-a119-b166e4046e8e")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b0ef34ac-529e-498d-bfec-66e95f3e6039"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("f271f4a2-868f-4101-9d21-c78443cb39aa")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("958583dc-17de-425b-890e-082c6f0c8d0b"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("f271f4a2-868f-4101-9d21-c78443cb39aa")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("71e2b6c7-4db4-40df-881d-c01dcf576b9e"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("8ec13098-dd6d-4d75-b10a-c45978fc4dd3")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("428d2647-b488-466e-8b52-d6a8c50960ec"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("564e7950-c830-421f-b04d-d25c3eb5f0bf")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("17711d31-1bc2-4565-9bde-cd4c10d13cfb"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("99601e67-9c44-48bc-a404-ea3042c8a5fe")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("Room1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Room2Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Room1Id");

                    b.HasIndex("Room2Id");

                    b.ToTable("RoomMerging");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("newRoomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSpliting");
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a43ac5fd-1aac-498f-8bbe-2af4469ff000"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("a601036e-7d2c-4cc8-95e1-7cd536c51446"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04f359ea-d724-420d-a72c-e58559c657fb"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("18797ead-3837-4444-96cf-0b747c5e7eb3"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("764d4f12-daad-4d19-949d-30bd95d02bdb"),
                            AddressId = new Guid("a601036e-7d2c-4cc8-95e1-7cd536c51446"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("c9b9a411-3ed6-450b-aef8-754b7611d92e"),
                            SpecializationId = new Guid("0d6730f3-7fa4-4d0d-ab59-94b26f5d921e"),
                            WorkingScheduleId = new Guid("c50ab12f-df03-4307-8816-6c5d4ba3b79a")
                        },
                        new
                        {
                            Id = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            AddressId = new Guid("a43ac5fd-1aac-498f-8bbe-2af4469ff000"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("fb79742d-7786-4d2f-97db-cf2e84b5fecf"),
                            SpecializationId = new Guid("da649b20-dfbc-45fd-b0fd-f73fe2dd3ba8"),
                            WorkingScheduleId = new Guid("c50ab12f-df03-4307-8816-6c5d4ba3b79a")
                        },
                        new
                        {
                            Id = new Guid("72e5eb4c-3906-4e64-befc-39030ee67bc9"),
                            AddressId = new Guid("a43ac5fd-1aac-498f-8bbe-2af4469ff000"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("2b04faed-c3c0-416a-9bc5-0cfffd9dd796"),
                            SpecializationId = new Guid("da649b20-dfbc-45fd-b0fd-f73fe2dd3ba8"),
                            WorkingScheduleId = new Guid("c50ab12f-df03-4307-8816-6c5d4ba3b79a")
                        },
                        new
                        {
                            Id = new Guid("b79eef6b-dd2b-4c32-ad5e-fa114a77d6b6"),
                            AddressId = new Guid("a43ac5fd-1aac-498f-8bbe-2af4469ff000"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Jakov",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Jakov",
                            RoomId = new Guid("efe1f2d3-2315-4388-a119-b166e4046e8e"),
                            SpecializationId = new Guid("6c3f6053-e8b2-4fa7-95eb-003279fdd81b"),
                            WorkingScheduleId = new Guid("a7369dd5-4afb-4d4b-ae9f-348ac284a7b5")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91ef8765-0e7c-4ab6-932b-c4c737f8715b"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        },
                        new
                        {
                            Id = new Guid("9d07d3d9-c3a1-423f-8812-eb6e53af19ee"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Blood Bank",
                            UserRole = 3,
                            Username = "ManagerBB"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42570b2f-3ff8-45d6-916c-90e2164c102a"),
                            AddressId = new Guid("a43ac5fd-1aac-498f-8bbe-2af4469ff000"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("5b1f9ac1-a5bf-48a4-af4f-6f783c3aa2c1"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("858973ab-09b1-4845-9843-29068ae68af7"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("ef3bb9d0-7b61-4e1b-9ab4-c37ac18a9797"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("72e5eb4c-3906-4e64-befc-39030ee67bc9"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("2a527265-2814-4249-8fb1-f40238c07e08"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("60236870-1be8-4311-95fb-7bc9e680501d"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("3e4cb639-4015-469f-ab0d-5a1205299299"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("72e5eb4c-3906-4e64-befc-39030ee67bc9"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("a648f81e-32a5-4ce3-8525-8eaf4b5debb7"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("72e5eb4c-3906-4e64-befc-39030ee67bc9"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("b27f07ad-30b5-464b-abef-7b769b1e4ad7"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("764d4f12-daad-4d19-949d-30bd95d02bdb"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("1be9d106-7f43-4d53-8b96-a65d6e4cfdab"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("764d4f12-daad-4d19-949d-30bd95d02bdb"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("6d820e9a-661e-4492-af01-c5a131fabef7"),
                            AddressId = new Guid("f255c50e-591d-40ec-8cf7-a6d29021757f"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("72e5eb4c-3906-4e64-befc-39030ee67bc9"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("c0576733-b7fa-4974-b60c-d3d7e8c9f216"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("10de18aa-eb8e-440a-80f0-6eac51132c2b"),
                                    From = new DateTime(2023, 1, 9, 16, 20, 46, 108, DateTimeKind.Local).AddTicks(3347),
                                    To = new DateTime(2023, 1, 9, 16, 50, 46, 109, DateTimeKind.Local).AddTicks(7078)
                                },
                                new
                                {
                                    AppointmentId = new Guid("b0625797-9cbe-46af-8adb-1055e9a54767"),
                                    From = new DateTime(2023, 1, 9, 15, 20, 46, 109, DateTimeKind.Local).AddTicks(7112),
                                    To = new DateTime(2023, 1, 9, 15, 50, 46, 109, DateTimeKind.Local).AddTicks(7119)
                                },
                                new
                                {
                                    AppointmentId = new Guid("4676b39e-242a-4f3e-91cf-b9b50550e3fa"),
                                    From = new DateTime(2023, 1, 9, 14, 0, 46, 109, DateTimeKind.Local).AddTicks(7125),
                                    To = new DateTime(2023, 1, 9, 14, 30, 46, 109, DateTimeKind.Local).AddTicks(7129)
                                },
                                new
                                {
                                    AppointmentId = new Guid("799686a5-4251-4bd9-98e3-7782e9b5bddd"),
                                    From = new DateTime(2023, 1, 9, 12, 50, 46, 109, DateTimeKind.Local).AddTicks(7133),
                                    To = new DateTime(2023, 1, 9, 14, 0, 46, 109, DateTimeKind.Local).AddTicks(7137)
                                },
                                new
                                {
                                    AppointmentId = new Guid("c7cddafc-9bd4-4aba-812f-6e052d33b742"),
                                    From = new DateTime(2023, 1, 9, 11, 30, 46, 109, DateTimeKind.Local).AddTicks(7143),
                                    To = new DateTime(2023, 1, 9, 13, 10, 46, 109, DateTimeKind.Local).AddTicks(7146)
                                },
                                new
                                {
                                    AppointmentId = new Guid("f290a5bc-4642-420f-96d1-dc1fb854c612"),
                                    From = new DateTime(2023, 1, 9, 10, 15, 46, 109, DateTimeKind.Local).AddTicks(7150),
                                    To = new DateTime(2023, 1, 9, 11, 15, 46, 109, DateTimeKind.Local).AddTicks(7154)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("HospitalLibrary.SharedModel.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("ConsiliumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Duration")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consiliums");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Room");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("c50ab12f-df03-4307-8816-6c5d4ba3b79a"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("a7369dd5-4afb-4d4b-ae9f-348ac284a7b5"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.NullableDateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleFrom");

                            b1.Property<DateTime?>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("c50ab12f-df03-4307-8816-6c5d4ba3b79a"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("a7369dd5-4afb-4d4b-ae9f-348ac284a7b5"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("abc96a87-024e-41ae-ae68-148a3501a2db"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room1")
                        .WithMany()
                        .HasForeignKey("Room1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room2")
                        .WithMany()
                        .HasForeignKey("Room2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRangeOfMerging", b1 =>
                        {
                            b1.Property<Guid>("RoomMergingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomMergingId");

                            b1.ToTable("RoomMerging");

                            b1.WithOwner()
                                .HasForeignKey("RoomMergingId");
                        });

                    b.Navigation("DateRangeOfMerging");

                    b.Navigation("Room1");

                    b.Navigation("Room2");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DatesForSearch", b1 =>
                        {
                            b1.Property<Guid>("RoomSplitingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomSplitingId");

                            b1.ToTable("RoomSpliting");

                            b1.WithOwner()
                                .HasForeignKey("RoomSplitingId");
                        });

                    b.Navigation("DatesForSearch");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
