// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c404710e-3c1c-482e-9ae0-a4ca1d3b68d2"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("d1b4a60e-409a-4483-94a4-a498b29c646e"),
                            Emergent = false,
                            PatientId = new Guid("6bba1c71-f3e5-4275-933b-cabd77266c32")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2622abf4-3377-41dc-b0bf-e5aa1f7319ae"),
                            Amount = 2,
                            BloodUnitId = new Guid("bb44886b-4344-488e-9b25-94a94106e2c0"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("a6d61b0d-8550-4eee-b1ce-2b187c0ea43a"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("a3746be4-a0e0-43cd-aaec-7679c4b579ee"),
                            Amount = 4,
                            BloodUnitId = new Guid("bb44886b-4344-488e-9b25-94a94106e2c0"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("a6d61b0d-8550-4eee-b1ce-2b187c0ea43a"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb44886b-4344-488e-9b25-94a94106e2c0"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("ba837f1e-7ac4-4877-a6b6-dc9d6d5e8157"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("bd89e1c1-755f-4db8-8e60-87239cc2f702"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db396a13-45b2-4452-b8c7-9c2d24e1cbd1"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("f882b8e0-d56c-4d30-b806-e2bd70c956bd"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("cc7b3be9-8f0c-42e8-9e8e-77dde3491416"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5dae2f78-2732-48cb-9550-c6f98d89ec64")
                        },
                        new
                        {
                            Id = new Guid("bb0368a2-4fef-448c-93ca-b8c83d03946e")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5310de92-a2f5-4a0f-b74d-4e2c18333ea4"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("d1b4a60e-409a-4483-94a4-a498b29c646e"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AllergenId")
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AllergenId");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35f32109-6592-4631-b4ae-b2192659e5c4"),
                            BuildingId = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("a0dd6773-6c2c-4277-b3b1-dbc82fde288f"),
                            BuildingId = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("07a3e6a2-58c5-439f-83bb-6495be1b4906"),
                            BuildingId = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("4a7359f9-d3f6-4d45-ae4f-88ee3a6277d7"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("d8e30704-5a9d-49bc-8d1b-56e80d448467"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("a1c4c84b-566a-49d0-a973-fa7ce69702df"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b91f3fc-2d1a-4b7d-b844-1e17fbcd13d5"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("690e91b8-5cf9-4f72-85ca-90efcdde7d82"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c9f6b860-1486-4f64-aa01-382338fb91cd"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e2eae660-9637-4fe1-ad3a-f5681e21f536"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("382941f5-05d6-4e92-bf11-8628eae3bb04"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("f641fb64-378d-4f36-9a35-29752bd6be71"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("5928fb50-3c79-44d4-9f0c-3511bf6ff8d8"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("3c32dfa2-e26e-44aa-8522-9a8c5a19bc98"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("ac56786b-0de1-4236-94f3-bf0159ad2fef"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("9fe82cd8-40f4-4029-ad34-8a30e7fd8673"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("ed0c1c2c-9fd7-49e1-a47b-94a52a82dceb"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("a9d20748-ec5e-4895-83f2-47e0a95e6716"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("0b6f40cf-d6ac-4c82-9af1-8c6617f63140"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("deed9cd4-57d5-4e52-a563-11156926bbfd"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("764aefab-a1ac-4dea-83b5-22b9423563ad"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("8edf309f-3969-4b33-95b7-3d73fa38e135"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f7378f3-70bb-405a-beed-c364c2163682"),
                            BuildingId = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            FloorId = new Guid("35f32109-6592-4631-b4ae-b2192659e5c4"),
                            GRoomId = new Guid("8b91f3fc-2d1a-4b7d-b844-1e17fbcd13d5"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec"),
                            BuildingId = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            FloorId = new Guid("35f32109-6592-4631-b4ae-b2192659e5c4"),
                            GRoomId = new Guid("690e91b8-5cf9-4f72-85ca-90efcdde7d82"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("e2eae660-9637-4fe1-ad3a-f5681e21f536"),
                            BuildingId = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            FloorId = new Guid("a0dd6773-6c2c-4277-b3b1-dbc82fde288f"),
                            GRoomId = new Guid("c9f6b860-1486-4f64-aa01-382338fb91cd"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("f641fb64-378d-4f36-9a35-29752bd6be71"),
                            BuildingId = new Guid("5c413bce-61ee-423f-a333-4b151dfab799"),
                            FloorId = new Guid("07a3e6a2-58c5-439f-83bb-6495be1b4906"),
                            GRoomId = new Guid("382941f5-05d6-4e92-bf11-8628eae3bb04"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("3c32dfa2-e26e-44aa-8522-9a8c5a19bc98"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorId = new Guid("4a7359f9-d3f6-4d45-ae4f-88ee3a6277d7"),
                            GRoomId = new Guid("5928fb50-3c79-44d4-9f0c-3511bf6ff8d8"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("9fe82cd8-40f4-4029-ad34-8a30e7fd8673"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorId = new Guid("4a7359f9-d3f6-4d45-ae4f-88ee3a6277d7"),
                            GRoomId = new Guid("ac56786b-0de1-4236-94f3-bf0159ad2fef"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("a9d20748-ec5e-4895-83f2-47e0a95e6716"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorId = new Guid("d8e30704-5a9d-49bc-8d1b-56e80d448467"),
                            GRoomId = new Guid("ed0c1c2c-9fd7-49e1-a47b-94a52a82dceb"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("deed9cd4-57d5-4e52-a563-11156926bbfd"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorId = new Guid("a1c4c84b-566a-49d0-a973-fa7ce69702df"),
                            GRoomId = new Guid("0b6f40cf-d6ac-4c82-9af1-8c6617f63140"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("8edf309f-3969-4b33-95b7-3d73fa38e135"),
                            BuildingId = new Guid("ee88057c-f8fe-4f5e-a302-5a276313f5fd"),
                            FloorId = new Guid("a1c4c84b-566a-49d0-a973-fa7ce69702df"),
                            GRoomId = new Guid("764aefab-a1ac-4dea-83b5-22b9423563ad"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d605310-7f86-45ed-ab2c-ee7d25a2cc8c"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682")
                        },
                        new
                        {
                            Id = new Guid("5c9ac0ad-0c16-4a54-8a79-3136f55db050"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682")
                        },
                        new
                        {
                            Id = new Guid("56cd1e18-08ca-44cf-a6b3-f49379f91da1"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682")
                        },
                        new
                        {
                            Id = new Guid("176b80c5-f362-423d-b8f0-4ffe854d7004"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682")
                        },
                        new
                        {
                            Id = new Guid("166f0a17-93f9-439b-a8b9-c8a850af7f2e"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec")
                        },
                        new
                        {
                            Id = new Guid("fff6b841-01ff-4548-ba54-5962640505a8"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec")
                        },
                        new
                        {
                            Id = new Guid("9e6f9dae-5d67-485b-9249-af89359e379b"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec")
                        },
                        new
                        {
                            Id = new Guid("2aee61f9-d2d7-4c5e-b598-5362d756bc2e"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec")
                        },
                        new
                        {
                            Id = new Guid("2f0631dd-5f41-4396-9a48-3fe1f4b2cd86"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("cf622710-e235-4bdd-8044-c74914f84972"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("406e4b20-32c9-4096-9500-80c9af04647e"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("60c60394-5308-4101-b9d0-b6ab99cb6e50"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("e2eae660-9637-4fe1-ad3a-f5681e21f536")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("62034cc2-cf06-405e-8bd0-63c96c1bb99b"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("f641fb64-378d-4f36-9a35-29752bd6be71")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2b8178fa-31a5-49fd-b5f6-09c9e20b9ff0"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("3c32dfa2-e26e-44aa-8522-9a8c5a19bc98")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("45012a3a-c7e1-46e7-ace4-7c09a1ce49c8"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("9fe82cd8-40f4-4029-ad34-8a30e7fd8673")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("914d55e1-9b89-467a-adf6-d44bc8fa0f0a"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("a9d20748-ec5e-4895-83f2-47e0a95e6716")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8638d2fe-e62b-40c3-9b81-7e408f1213a2"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("deed9cd4-57d5-4e52-a563-11156926bbfd")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c9057b0c-3afe-447a-9d6c-0572461cc5fd"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("8edf309f-3969-4b33-95b7-3d73fa38e135")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("7048d462-02cb-4d49-afc2-f61b75a3ef9f"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0a20e0a8-3528-4037-b342-42f025f46d8e"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("f4c2cd7a-39be-4bea-b0d6-4d7df1049782"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("67f26f7c-9145-4dd1-8e06-d4a9a03cf42c"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("e2eae660-9637-4fe1-ad3a-f5681e21f536")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("a8dd4f72-a6d1-4004-8565-fc1cfac6e48d"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("f641fb64-378d-4f36-9a35-29752bd6be71")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("7bd8ec0a-3442-4f23-8caf-d8770029cd4a"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("3c32dfa2-e26e-44aa-8522-9a8c5a19bc98")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("79b037a4-cea0-4dae-ab2f-8e50b2a70dc2"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("3c32dfa2-e26e-44aa-8522-9a8c5a19bc98")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8c189f94-bf27-41b4-93b1-ffd625f48f5c"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("9fe82cd8-40f4-4029-ad34-8a30e7fd8673")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("def1ff6e-1b84-4fb3-a571-82fd192f2b72"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("deed9cd4-57d5-4e52-a563-11156926bbfd")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("448c6d2b-afca-4dec-9e12-9d900eb2c019"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("8edf309f-3969-4b33-95b7-3d73fa38e135")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27685789-0c0e-482b-82aa-9046726b16cc"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("b11ffc4e-f573-4927-8ac2-4f6b1c4a5e0a"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82778e01-d457-4a6c-9fec-58a354314caf"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("bfe0243b-7a09-4708-8fe2-5bf5c438fc31"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6d61b0d-8550-4eee-b1ce-2b187c0ea43a"),
                            AddressId = new Guid("b11ffc4e-f573-4927-8ac2-4f6b1c4a5e0a"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("c8ffbc8b-2da5-41de-b40a-9c313bacd1ec"),
                            SpecializationId = new Guid("cc7b3be9-8f0c-42e8-9e8e-77dde3491416"),
                            WorkingScheduleId = new Guid("5dae2f78-2732-48cb-9550-c6f98d89ec64")
                        },
                        new
                        {
                            Id = new Guid("d1b4a60e-409a-4483-94a4-a498b29c646e"),
                            AddressId = new Guid("27685789-0c0e-482b-82aa-9046726b16cc"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("8f7378f3-70bb-405a-beed-c364c2163682"),
                            SpecializationId = new Guid("f882b8e0-d56c-4d30-b806-e2bd70c956bd"),
                            WorkingScheduleId = new Guid("5dae2f78-2732-48cb-9550-c6f98d89ec64")
                        },
                        new
                        {
                            Id = new Guid("17352556-e871-471a-98b7-176e0c5759c7"),
                            AddressId = new Guid("27685789-0c0e-482b-82aa-9046726b16cc"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("a9d20748-ec5e-4895-83f2-47e0a95e6716"),
                            SpecializationId = new Guid("f882b8e0-d56c-4d30-b806-e2bd70c956bd"),
                            WorkingScheduleId = new Guid("5dae2f78-2732-48cb-9550-c6f98d89ec64")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72b13275-0e25-4b58-a911-407b8b5f0ec9"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("uuid");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bba1c71-f3e5-4275-933b-cabd77266c32"),
                            AddressId = new Guid("27685789-0c0e-482b-82aa-9046726b16cc"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("d1b4a60e-409a-4483-94a4-a498b29c646e"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("e9c6cd82-1f4c-4c55-99d9-f2c45ba84f4f"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("d1b4a60e-409a-4483-94a4-a498b29c646e"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("a0fc7b30-ba73-409f-8ec5-0ceec4b616a0"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("d1b4a60e-409a-4483-94a4-a498b29c646e"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("0d9ab049-c109-4ce0-9f1a-65d13241fc96"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("17352556-e871-471a-98b7-176e0c5759c7"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("963b2156-d558-4482-bb10-2c5924b87746"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("d1b4a60e-409a-4483-94a4-a498b29c646e"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("9c58dba5-c032-49bb-b2b0-087f531bdae6"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("17352556-e871-471a-98b7-176e0c5759c7"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("f6d9b2b3-e647-4188-b2dc-2fa4da9254be"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("17352556-e871-471a-98b7-176e0c5759c7"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("8f991c07-e7c9-4cb1-9764-f93cb39bce12"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("a6d61b0d-8550-4eee-b1ce-2b187c0ea43a"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("e52b63b8-b79c-48a1-a4e9-e330472cf89f"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("a6d61b0d-8550-4eee-b1ce-2b187c0ea43a"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("25d499a9-cc0b-4403-a482-7429b4ba4775"),
                            AddressId = new Guid("b5d744ba-17b5-4d46-927e-7d24bf649083"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("17352556-e871-471a-98b7-176e0c5759c7"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("c404710e-3c1c-482e-9ae0-a4ca1d3b68d2"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("5dae2f78-2732-48cb-9550-c6f98d89ec64"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("bb0368a2-4fef-448c-93ca-b8c83d03946e"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("5dae2f78-2732-48cb-9550-c6f98d89ec64"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("bb0368a2-4fef-448c-93ca-b8c83d03946e"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("5310de92-a2f5-4a0f-b74d-4e2c18333ea4"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Allergen", null)
                        .WithMany("Medicines")
                        .HasForeignKey("AllergenId");

                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany("Patients")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Allergen", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
