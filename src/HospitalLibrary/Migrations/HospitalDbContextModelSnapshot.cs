// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fc188e4-264a-4e31-b3e8-70085e37319b"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("167e808c-9553-4894-8c3e-19d19110c358"),
                            Emergent = false,
                            PatientId = new Guid("2131d17d-81e9-4a79-8710-fb5f78f83560")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a160310b-7c0c-4391-bbe4-4a7ccde183d2"),
                            Amount = 2,
                            BloodUnitId = new Guid("212f50fb-2e70-4e53-b512-72bf6d951191"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("260d97f4-eeef-4977-9763-6ec1cc0d55a9"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("980e4383-d582-4cdc-a49e-511dab50ce2f"),
                            Amount = 4,
                            BloodUnitId = new Guid("212f50fb-2e70-4e53-b512-72bf6d951191"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("260d97f4-eeef-4977-9763-6ec1cc0d55a9"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("212f50fb-2e70-4e53-b512-72bf6d951191"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("32a0ba88-cfd8-40c0-beea-967f8261587a"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("a2916cbe-30ed-4bc3-9530-923f6b7aea5d"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86be26d6-6685-4142-ba70-39dc22b79fcb"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("e88b7306-725f-440d-b503-c20df0eba304"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("89480960-5680-48c7-83bd-db95fd782f0a"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f14049c-50f9-465f-a1c1-5450abbafc2c")
                        },
                        new
                        {
                            Id = new Guid("f52c4d50-dca7-4381-a7d9-4c00ad715dad")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8768daa8-6236-40b0-a966-021554b8cd9f"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("167e808c-9553-4894-8c3e-19d19110c358"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AllergenId")
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MedicinePrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AllergenId");

                    b.HasIndex("MedicinePrescriptionId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ea58296-d64a-485a-9873-e40e1e089775"),
                            BuildingId = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("493bfc03-0e05-49b1-84d6-cef05a71a41f"),
                            BuildingId = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("91e3c880-0ba6-4953-bedb-0745b2340343"),
                            BuildingId = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("c51cb3c2-2a6c-4923-9031-8d40d90ddb29"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("c8d76283-1aec-4237-af6c-4888dea41dc5"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("c0c774a0-f14f-4948-965a-75447942919e"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d507353-8a31-4ab9-a9f8-987d9b7d1c0b"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e8460c88-2616-4c64-b74a-52f2dde0bd0c"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("d65a4123-830a-4714-ad95-c1dc7d95dc32"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("0a199dd7-0574-43a0-a620-d87c9ac052fc"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("1e3d5009-2ea6-4018-83c4-4b18a9f4f513"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("1e1cefc2-62ae-46da-9b69-57718f82f9ab"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2caa913a-90d4-420f-86ed-d804f7b79bb5"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("4a41afb6-fe7a-489b-b79a-ce11dc6f885a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2a58edd0-bf57-463a-a44d-1a4b7ecefc64"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c20cc1cf-8790-431f-91c4-2c68cbefd095"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("3b70d60e-550b-43d2-b671-20eb085a819a"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("4482fd06-0204-4fdd-b116-d407fecd39fe"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("352596d0-cfe2-41c9-a3e3-bacc8857de72"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("c81b71e6-3e18-4ef8-b829-c710e5e063af"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c3a5a503-e29d-49e3-9d55-70b455d34342"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("2209cd39-5735-4a2c-9e93-9697e8e55dc7"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872"),
                            BuildingId = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            FloorId = new Guid("8ea58296-d64a-485a-9873-e40e1e089775"),
                            GRoomId = new Guid("3d507353-8a31-4ab9-a9f8-987d9b7d1c0b"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754"),
                            BuildingId = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            FloorId = new Guid("8ea58296-d64a-485a-9873-e40e1e089775"),
                            GRoomId = new Guid("e8460c88-2616-4c64-b74a-52f2dde0bd0c"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("0a199dd7-0574-43a0-a620-d87c9ac052fc"),
                            BuildingId = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            FloorId = new Guid("493bfc03-0e05-49b1-84d6-cef05a71a41f"),
                            GRoomId = new Guid("d65a4123-830a-4714-ad95-c1dc7d95dc32"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("1e1cefc2-62ae-46da-9b69-57718f82f9ab"),
                            BuildingId = new Guid("d5d793ef-fd5b-4488-89c2-c8e8b1900efa"),
                            FloorId = new Guid("91e3c880-0ba6-4953-bedb-0745b2340343"),
                            GRoomId = new Guid("1e3d5009-2ea6-4018-83c4-4b18a9f4f513"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("4a41afb6-fe7a-489b-b79a-ce11dc6f885a"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorId = new Guid("c51cb3c2-2a6c-4923-9031-8d40d90ddb29"),
                            GRoomId = new Guid("2caa913a-90d4-420f-86ed-d804f7b79bb5"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("c20cc1cf-8790-431f-91c4-2c68cbefd095"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorId = new Guid("c51cb3c2-2a6c-4923-9031-8d40d90ddb29"),
                            GRoomId = new Guid("2a58edd0-bf57-463a-a44d-1a4b7ecefc64"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("4482fd06-0204-4fdd-b116-d407fecd39fe"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorId = new Guid("c8d76283-1aec-4237-af6c-4888dea41dc5"),
                            GRoomId = new Guid("3b70d60e-550b-43d2-b671-20eb085a819a"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("c81b71e6-3e18-4ef8-b829-c710e5e063af"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorId = new Guid("c0c774a0-f14f-4948-965a-75447942919e"),
                            GRoomId = new Guid("352596d0-cfe2-41c9-a3e3-bacc8857de72"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("2209cd39-5735-4a2c-9e93-9697e8e55dc7"),
                            BuildingId = new Guid("4e54884e-2ced-4c98-95d4-f3f704c6968a"),
                            FloorId = new Guid("c0c774a0-f14f-4948-965a-75447942919e"),
                            GRoomId = new Guid("c3a5a503-e29d-49e3-9d55-70b455d34342"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0fae692-6fcc-4a75-b33b-07f3d7b30d6b"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872")
                        },
                        new
                        {
                            Id = new Guid("93238253-a998-4c4b-8a19-262be52bde04"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872")
                        },
                        new
                        {
                            Id = new Guid("7ebd7c9d-f38c-499a-99fd-fed71f206129"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872")
                        },
                        new
                        {
                            Id = new Guid("4f1b45c9-c030-4091-89e0-5f80b74b3bc4"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872")
                        },
                        new
                        {
                            Id = new Guid("caaae289-c761-497d-b424-5407caa6d575"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754")
                        },
                        new
                        {
                            Id = new Guid("c72db0b3-7334-4cb4-b575-ce69591e2b42"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754")
                        },
                        new
                        {
                            Id = new Guid("0b9bde36-88d2-42c9-b851-02f60705a107"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754")
                        },
                        new
                        {
                            Id = new Guid("afa3f2f8-2e5c-4904-ad24-e1a18df4ec2d"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754")
                        },
                        new
                        {
                            Id = new Guid("7d6f2188-5ec9-4d8d-826a-85a68bf91816"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("d5a51d23-c760-4127-97d6-f7933cf2e935"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("ce23a7cd-040b-4d04-a3b7-04694aa8e6fe"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6795d990-8810-441a-8786-0d3dab6ad099"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("0a199dd7-0574-43a0-a620-d87c9ac052fc")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b9764dee-b63e-4faf-a5f7-014cbbebe939"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("1e1cefc2-62ae-46da-9b69-57718f82f9ab")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("f04a2fed-86fe-4c5e-b1c0-ca164db35dfa"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("4a41afb6-fe7a-489b-b79a-ce11dc6f885a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("bad33529-73d6-46fd-90c1-d5b26515b47e"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("c20cc1cf-8790-431f-91c4-2c68cbefd095")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("7705b14f-3e55-42cf-882e-ff5d7e8a1c92"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("4482fd06-0204-4fdd-b116-d407fecd39fe")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("539e4aac-0fc3-4da6-b376-c263fb31cfab"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("c81b71e6-3e18-4ef8-b829-c710e5e063af")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8c7d99f9-5c0b-40cb-bfff-b0245321e0bd"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("2209cd39-5735-4a2c-9e93-9697e8e55dc7")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0c7ef9b3-3c30-4ccd-b22a-3d8e56cd8557"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("27616278-5e1d-4865-b161-53b720a34972"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("76f7edc3-930f-4afc-bc43-e5a00e701538"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4e6f6af0-1295-4556-982d-bc7eb6473d02"),
                            Amount = 13,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("0a199dd7-0574-43a0-a620-d87c9ac052fc")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d993bd02-8de0-4f10-816a-781b83769125"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("0a199dd7-0574-43a0-a620-d87c9ac052fc")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("52faedbf-88a3-4d78-9fa2-fcecf696bf41"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("1e1cefc2-62ae-46da-9b69-57718f82f9ab")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("1413f946-6f28-4659-8ee9-6a5c4d210121"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("4a41afb6-fe7a-489b-b79a-ce11dc6f885a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("5d5e8930-ab77-4573-9e32-67081f251969"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("4a41afb6-fe7a-489b-b79a-ce11dc6f885a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("ca6c076c-33a6-44b9-bf7f-026fb5b7ed4e"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("c20cc1cf-8790-431f-91c4-2c68cbefd095")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2fa5fdb9-6e35-4a08-bc08-9944eac5d4ec"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("c81b71e6-3e18-4ef8-b829-c710e5e063af")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("cd4152e9-52bf-4c13-be1f-cfcba84ecfa7"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("2209cd39-5735-4a2c-9e93-9697e8e55dc7")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d021609-c4af-493b-ab4f-12a8bfd5fae9"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("2420729b-24de-46b3-a68f-4d565e7afe5a"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("8c06f650-b20e-4db8-8dc2-e57f00c62db5"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec517906-90a2-4bf5-93df-e4f545d068e6"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("21792b80-e33a-48dd-bcc7-51e07c59a02c"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("260d97f4-eeef-4977-9763-6ec1cc0d55a9"),
                            AddressId = new Guid("2420729b-24de-46b3-a68f-4d565e7afe5a"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("00486d2e-d14a-4a51-b34a-0a431aa16754"),
                            SpecializationId = new Guid("89480960-5680-48c7-83bd-db95fd782f0a"),
                            WorkingScheduleId = new Guid("8f14049c-50f9-465f-a1c1-5450abbafc2c")
                        },
                        new
                        {
                            Id = new Guid("167e808c-9553-4894-8c3e-19d19110c358"),
                            AddressId = new Guid("1d021609-c4af-493b-ab4f-12a8bfd5fae9"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("3e35b70c-59b3-4a93-b3d8-25beb25d9872"),
                            SpecializationId = new Guid("e88b7306-725f-440d-b503-c20df0eba304"),
                            WorkingScheduleId = new Guid("8f14049c-50f9-465f-a1c1-5450abbafc2c")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdf3427a-f028-4f67-a44e-ab68c0601f93"),
                            AddressId = new Guid("8c06f650-b20e-4db8-8dc2-e57f00c62db5"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("uuid");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2131d17d-81e9-4a79-8710-fb5f78f83560"),
                            AddressId = new Guid("1d021609-c4af-493b-ab4f-12a8bfd5fae9"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DoctorId = new Guid("167e808c-9553-4894-8c3e-19d19110c358"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("4ce512f2-22e1-44c8-a9fa-9cbdbfcc7db4"),
                            AddressId = new Guid("8c06f650-b20e-4db8-8dc2-e57f00c62db5"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DoctorId = new Guid("167e808c-9553-4894-8c3e-19d19110c358"),
                            Gender = 0
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("2fc188e4-264a-4e31-b3e8-70085e37319b"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("8f14049c-50f9-465f-a1c1-5450abbafc2c"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("f52c4d50-dca7-4381-a7d9-4c00ad715dad"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("8f14049c-50f9-465f-a1c1-5450abbafc2c"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("f52c4d50-dca7-4381-a7d9-4c00ad715dad"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("8768daa8-6236-40b0-a966-021554b8cd9f"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Allergen", null)
                        .WithMany("Medicines")
                        .HasForeignKey("AllergenId");

                    b.HasOne("HospitalLibrary.Prescriptions.Model.MedicinePrescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicinePrescriptionId");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.sharedModel.Ingredient", null)
                        .WithMany("Patients")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Allergen", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Ingredient", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
