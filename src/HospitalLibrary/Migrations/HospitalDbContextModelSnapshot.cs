// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eee3ef6c-c4b3-4d42-b0e3-3ebe5de68f21"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("f67e9046-2c6d-49ec-b85b-deed1ec71018"),
                            Emergent = false,
                            PatientId = new Guid("f5d76e1b-86c7-441f-99f0-3d9e00340167")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44c7f7f3-a50a-451c-8bac-8e8846f78b22"),
                            Amount = 2,
                            BloodUnitId = new Guid("42c4376a-a04d-4dc3-a3f4-43d6c9eb5489"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("ddedb9ec-d8ca-47de-8888-e5bf974ba27c"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("ed7b1d7c-03c7-4bd9-bbfa-36d589cd5c81"),
                            Amount = 4,
                            BloodUnitId = new Guid("42c4376a-a04d-4dc3-a3f4-43d6c9eb5489"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("ddedb9ec-d8ca-47de-8888-e5bf974ba27c"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42c4376a-a04d-4dc3-a3f4-43d6c9eb5489"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("69695cf8-6ff3-4b52-8935-dddf4831321d"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("1e9e229b-0099-4f1d-bd8d-2fef5b596922"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e50fc52c-406d-45f8-8446-31fa1e5e7885"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("f2041a62-f207-4011-a88c-0444db4313f0"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("91197d78-962c-4ce5-8162-cc1f89198e62"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44b3ae2f-7bed-434d-9151-d59045fdbaa4")
                        },
                        new
                        {
                            Id = new Guid("0aa2fc48-0fc1-4269-bf2d-076a6fd4957a")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58764845-3350-4172-96fe-28cea27ee627"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("5a032ed6-5426-4e2a-aa9b-23123916a061"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("0f5bd449-ae50-4717-89a7-c48c6bd30d40"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("e2e3f03f-57f8-4091-9680-86e1a309befc"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("5f5a90e4-3c72-4e08-922a-fd6d009b1dd8"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("0b0008d7-f780-43c9-86c4-a43ac83bb927"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("9fa38511-b5d1-4539-8ac6-afdd403c0934"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("9f6f1468-e212-40b3-95d1-0799ca87d13d"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("f4e63bee-441c-49c3-8bb7-6bf74e9885df"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("1ae88643-d685-445e-8b5d-f8d28e813d3d"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("987c2226-1076-4062-bee3-054ef47de7c4"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("d4c8dda1-7184-4af6-93e1-e572e412f9b2"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("e692f5f0-a4ef-4441-81a5-e0d8e951cb23"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("ae89ea76-b54a-495b-b4be-2b3edfc99e17"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("29f2e1ce-c56f-492d-9c28-1f687575e7fb"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("c5c1ff91-0ec1-4f8e-adb2-4ded14e89e81"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("63d67c06-dd56-4fe9-859a-6ad9c18de391"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("a15da672-a12e-407f-b6b2-51581379b066"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("32415b16-74de-4881-aca5-fa607f7cbe09"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("442b01c3-ac23-4e87-8f9d-6e557818524d"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("913bd815-424c-4e40-a59e-6e16760ff265"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f685b335-0e1a-4b41-b6e1-b72f3ed33388"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("f67e9046-2c6d-49ec-b85b-deed1ec71018"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e8543b0-f350-4f3e-885e-28e53b42c9dd"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("b8a5a098-e2a9-4337-a16b-3fa255e46a80"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("c86b588c-d498-4136-9a0b-bf1f652887fb"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("ae1ba087-b238-478d-9726-e9434a8c0fb1"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("4200d440-821d-4aff-9af5-94f4b031b7d4"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("c35444a1-0454-4abd-b976-8c37965637d8"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("fd3c2ee0-b15a-4eef-9dd0-15c26e99dc71"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("c88cfa7b-eb10-492e-9f6f-c6e366aa991e"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b692050e-cdbd-4485-a9d7-b0ae3da70c41"),
                            BuildingId = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("fe01c60e-41ef-4e50-8666-a708ecedd030"),
                            BuildingId = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("ce598158-d365-4125-abc0-8f63003b0ea2"),
                            BuildingId = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("a903ad19-ff23-48fd-855e-dc2e1cd57dcc"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("940c2cf4-c760-4bab-ae05-4d5864353da3"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("3c779b2c-19cc-47f2-bf09-cfc125fba07c"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d643916-6720-46a1-bb92-937fe07cdf34"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("82fa10d4-f780-44f3-b6ad-ca1459421d30"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("6d6b9eac-75e7-4679-8837-19c999d6fb54"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("a0541e4e-f66f-4cc7-ab53-d8b925cb9c6f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("fed76441-4be7-4fbc-810a-4ed33065c91d"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("f676e1d5-6cae-455d-ae3a-0f980a591993"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("cff8d720-3c95-4c13-9458-23760aebd14b"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e65c57d1-5a6e-4e36-bfa2-8377fd9b94ca"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7e1a0f35-4573-44e7-93c1-4718ab309d2f"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("982ff669-899a-40a0-ab52-329f33a67144"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2de17ebe-5279-4542-84fa-58b73a9a895f"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e35adbfc-0e2e-44dd-914f-26e4f48e4627"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b8635b03-cb24-4522-8393-5a3ed5af387a"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("de96badc-d131-4dc8-8634-fa34ac162f3c"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("857efb03-bbc6-4037-9b2d-46319c4eeded"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("1acf32b4-2e32-4477-876d-858ffaa57985"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796"),
                            BuildingId = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            FloorId = new Guid("b692050e-cdbd-4485-a9d7-b0ae3da70c41"),
                            GRoomId = new Guid("9d643916-6720-46a1-bb92-937fe07cdf34"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b"),
                            BuildingId = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            FloorId = new Guid("b692050e-cdbd-4485-a9d7-b0ae3da70c41"),
                            GRoomId = new Guid("82fa10d4-f780-44f3-b6ad-ca1459421d30"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("a0541e4e-f66f-4cc7-ab53-d8b925cb9c6f"),
                            BuildingId = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            FloorId = new Guid("fe01c60e-41ef-4e50-8666-a708ecedd030"),
                            GRoomId = new Guid("6d6b9eac-75e7-4679-8837-19c999d6fb54"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("f676e1d5-6cae-455d-ae3a-0f980a591993"),
                            BuildingId = new Guid("316c8a5f-574f-4c82-8d13-ee43adf05df0"),
                            FloorId = new Guid("ce598158-d365-4125-abc0-8f63003b0ea2"),
                            GRoomId = new Guid("fed76441-4be7-4fbc-810a-4ed33065c91d"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("e65c57d1-5a6e-4e36-bfa2-8377fd9b94ca"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorId = new Guid("a903ad19-ff23-48fd-855e-dc2e1cd57dcc"),
                            GRoomId = new Guid("cff8d720-3c95-4c13-9458-23760aebd14b"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("982ff669-899a-40a0-ab52-329f33a67144"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorId = new Guid("a903ad19-ff23-48fd-855e-dc2e1cd57dcc"),
                            GRoomId = new Guid("7e1a0f35-4573-44e7-93c1-4718ab309d2f"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("e35adbfc-0e2e-44dd-914f-26e4f48e4627"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorId = new Guid("940c2cf4-c760-4bab-ae05-4d5864353da3"),
                            GRoomId = new Guid("2de17ebe-5279-4542-84fa-58b73a9a895f"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("de96badc-d131-4dc8-8634-fa34ac162f3c"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorId = new Guid("3c779b2c-19cc-47f2-bf09-cfc125fba07c"),
                            GRoomId = new Guid("b8635b03-cb24-4522-8393-5a3ed5af387a"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("1acf32b4-2e32-4477-876d-858ffaa57985"),
                            BuildingId = new Guid("2c9826f3-b7ab-406c-9d2f-5194750af822"),
                            FloorId = new Guid("3c779b2c-19cc-47f2-bf09-cfc125fba07c"),
                            GRoomId = new Guid("857efb03-bbc6-4037-9b2d-46319c4eeded"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b7a45e3-7e95-4806-b23e-b3838d1efdba"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796")
                        },
                        new
                        {
                            Id = new Guid("72e0f33a-161c-48ea-b515-4ebefd25173a"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796")
                        },
                        new
                        {
                            Id = new Guid("29079aa6-a1ca-4d3e-9df7-8e59ab52441e"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796")
                        },
                        new
                        {
                            Id = new Guid("a8c2afc1-fabd-45b8-bba1-d56ad58357bf"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796")
                        },
                        new
                        {
                            Id = new Guid("7662422a-5222-4a22-ba40-30a466882218"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b")
                        },
                        new
                        {
                            Id = new Guid("b099867d-d3f3-4626-b029-d6eea4fda412"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b")
                        },
                        new
                        {
                            Id = new Guid("63390cf4-46de-407c-823b-2184ce2bd646"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b")
                        },
                        new
                        {
                            Id = new Guid("5a89443c-aadc-44a8-9b39-4a815da77d3c"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b")
                        },
                        new
                        {
                            Id = new Guid("26b1ca6d-9903-4322-adac-3d965b1eb269"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("6619a15c-e0b3-4403-ade4-c2c6cd326330"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("86730800-6e9e-4c09-99ad-155b73139882"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("eed2d824-bf34-4bd6-9911-c79ba2b9dce3"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("a0541e4e-f66f-4cc7-ab53-d8b925cb9c6f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("727f2b1c-e158-41e7-b51d-dcdaea2b60e6"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("f676e1d5-6cae-455d-ae3a-0f980a591993")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b3ddb903-e73b-4885-a308-0c90eed7b613"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("e65c57d1-5a6e-4e36-bfa2-8377fd9b94ca")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("84ad2ac2-b371-4bca-8b1b-d82a62d26714"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("982ff669-899a-40a0-ab52-329f33a67144")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3464c2c5-4fcc-4d18-a268-6e088618dd05"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("e35adbfc-0e2e-44dd-914f-26e4f48e4627")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2038fe8b-82cf-45d9-8c7f-f1228afa1c15"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("de96badc-d131-4dc8-8634-fa34ac162f3c")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6baa1caa-b808-4016-813e-efdbc297b2c1"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("1acf32b4-2e32-4477-876d-858ffaa57985")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("f60b5699-a07c-42f1-afa1-4e105aa8abd1"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8fcd9244-6363-4fed-8c27-db29f8a7e862"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4d41fe40-82ee-4e9d-96fa-bfd7a1104773"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("f6e85fc9-52f0-42b7-a3bf-066bec361388"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("a0541e4e-f66f-4cc7-ab53-d8b925cb9c6f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c5ef8617-826e-4acc-864d-3ebae03abab3"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("f676e1d5-6cae-455d-ae3a-0f980a591993")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("637840b4-7df0-440c-ab84-5d940089e95f"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("e65c57d1-5a6e-4e36-bfa2-8377fd9b94ca")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("47e7f8d1-94fa-4f1f-8cee-a97f003e0e43"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("e65c57d1-5a6e-4e36-bfa2-8377fd9b94ca")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("212a1c34-a4cb-47bb-bba5-1f6b30170717"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("982ff669-899a-40a0-ab52-329f33a67144")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3fa17e21-35fd-48a1-86ce-c26f88820eef"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("de96badc-d131-4dc8-8634-fa34ac162f3c")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("43513a83-d9b4-40d7-8fa3-7d5d9db95a95"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("1acf32b4-2e32-4477-876d-858ffaa57985")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb242af9-6adc-4e45-82ba-68d880cf604c"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("0b131acf-6d8c-482d-886e-1735ca24ef97"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8882f0e0-4d29-47d1-9507-ef1007cb93e5"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("9b66b762-7e23-4a08-aaa7-dc39b1fd69fa"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddedb9ec-d8ca-47de-8888-e5bf974ba27c"),
                            AddressId = new Guid("0b131acf-6d8c-482d-886e-1735ca24ef97"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("1fbf573f-2a35-45cb-8d51-31d741aa020b"),
                            SpecializationId = new Guid("91197d78-962c-4ce5-8162-cc1f89198e62"),
                            WorkingScheduleId = new Guid("44b3ae2f-7bed-434d-9151-d59045fdbaa4")
                        },
                        new
                        {
                            Id = new Guid("f67e9046-2c6d-49ec-b85b-deed1ec71018"),
                            AddressId = new Guid("fb242af9-6adc-4e45-82ba-68d880cf604c"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("5822ac5e-ee1b-49a1-ba39-edfb59ac1796"),
                            SpecializationId = new Guid("f2041a62-f207-4011-a88c-0444db4313f0"),
                            WorkingScheduleId = new Guid("44b3ae2f-7bed-434d-9151-d59045fdbaa4")
                        },
                        new
                        {
                            Id = new Guid("260fefbd-cf30-49c5-bc01-a38208e0c8e7"),
                            AddressId = new Guid("fb242af9-6adc-4e45-82ba-68d880cf604c"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("e35adbfc-0e2e-44dd-914f-26e4f48e4627"),
                            SpecializationId = new Guid("f2041a62-f207-4011-a88c-0444db4313f0"),
                            WorkingScheduleId = new Guid("44b3ae2f-7bed-434d-9151-d59045fdbaa4")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ceffbb5-ac1f-4648-8e31-28edd59bcf4a"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5d76e1b-86c7-441f-99f0-3d9e00340167"),
                            AddressId = new Guid("fb242af9-6adc-4e45-82ba-68d880cf604c"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f67e9046-2c6d-49ec-b85b-deed1ec71018"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("b5769636-3262-4bf3-866a-fbbb3e132047"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f67e9046-2c6d-49ec-b85b-deed1ec71018"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("d2c9fe07-ae96-4adf-bfca-4ac11bb2041d"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f67e9046-2c6d-49ec-b85b-deed1ec71018"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("5dc557aa-56fb-4147-9620-dedaf292af07"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("260fefbd-cf30-49c5-bc01-a38208e0c8e7"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("732a2989-5de0-4010-87ca-05e01950d1b7"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("f67e9046-2c6d-49ec-b85b-deed1ec71018"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("c77663eb-0220-453d-a03e-50b32d04b4ef"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("260fefbd-cf30-49c5-bc01-a38208e0c8e7"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("3218b827-4252-43f5-9d38-c48f36a006b9"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("260fefbd-cf30-49c5-bc01-a38208e0c8e7"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("805a0a8d-4a0c-4bb2-9eda-819790234be3"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("ddedb9ec-d8ca-47de-8888-e5bf974ba27c"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("e05adc55-a568-4070-ba67-add9ec9fc455"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("ddedb9ec-d8ca-47de-8888-e5bf974ba27c"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("9db9673a-23bb-4f7e-9da8-1df8d7fdc0e9"),
                            AddressId = new Guid("c34e9b64-77d5-43ff-b830-7c7f6fac4ee3"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("260fefbd-cf30-49c5-bc01-a38208e0c8e7"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("eee3ef6c-c4b3-4d42-b0e3-3ebe5de68f21"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("44b3ae2f-7bed-434d-9151-d59045fdbaa4"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("0aa2fc48-0fc1-4269-bf2d-076a6fd4957a"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("44b3ae2f-7bed-434d-9151-d59045fdbaa4"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("0aa2fc48-0fc1-4269-bf2d-076a6fd4957a"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", "Examination")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("f685b335-0e1a-4b41-b6e1-b72f3ed33388"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
