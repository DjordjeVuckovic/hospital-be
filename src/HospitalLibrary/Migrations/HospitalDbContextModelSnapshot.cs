// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5e6c192-0072-41d3-9af0-484b8beeb141"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("c4f1529c-3e9b-48fe-94ae-a828f31e632e"),
                            Emergent = false,
                            PatientId = new Guid("72870c6c-bb9e-41e9-8fa9-97682d330bbb")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a98fe57d-5efa-4a6f-87aa-9508764bb64e"),
                            BuildingId = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("2ef8e7ad-d6d5-4330-8047-e5f254ae56ec"),
                            BuildingId = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("1436d557-77e5-40da-87a6-b52b0d71fe5a"),
                            BuildingId = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("e1d0d410-37a4-4df9-bb84-3acdb5b7417b"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("9ecbc275-6ec1-48b7-bfa4-664e8e41a272"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("239a7928-6162-4f40-8a4c-f53200c7cf24"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.FloorPlanView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PosX")
                        .HasColumnType("integer");

                    b.Property<int>("PosY")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FloorPlanViews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ec16f32-6f18-4e07-aa16-ddda03f3dd3d"),
                            Lenght = 5,
                            PosX = 0,
                            PosY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("af743ae6-9b3b-4b8f-9ffd-309a33e4a7ed"),
                            Lenght = 5,
                            PosX = 5,
                            PosY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("bde53023-fcae-4a65-b62e-0f25277aa6a2"),
                            Lenght = 5,
                            PosX = 0,
                            PosY = 5,
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingName")
                        .HasColumnType("text");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FloorName")
                        .HasColumnType("text");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fc5d6e4-060a-4cf6-a58e-18b2a8c76b14"),
                            BuildingId = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("a98fe57d-5efa-4a6f-87aa-9508764bb64e"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "11A",
                            PositionX = 0,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2597f2f6-1af9-4136-9902-de6eb6acfbf2"),
                            BuildingId = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("a98fe57d-5efa-4a6f-87aa-9508764bb64e"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "12A",
                            PositionX = 5,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("c6f0410a-36e1-4611-be27-686bc8a4b16e"),
                            BuildingId = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("2ef8e7ad-d6d5-4330-8047-e5f254ae56ec"),
                            FloorName = "Drugi",
                            Lenght = 5,
                            Number = "13A",
                            PositionX = 10,
                            PositionY = 0,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("6d6533ec-990d-491d-aa27-93c4300fdcd0"),
                            BuildingId = new Guid("87f26d57-759c-4ddd-a885-0ffd06690ce7"),
                            BuildingName = "Stara zgrada",
                            FloorId = new Guid("1436d557-77e5-40da-87a6-b52b0d71fe5a"),
                            FloorName = "Treci",
                            Lenght = 5,
                            Number = "14A",
                            PositionX = 0,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("63b29c78-32a9-4731-8f39-b450ec7fdd01"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("e1d0d410-37a4-4df9-bb84-3acdb5b7417b"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "11B",
                            PositionX = 0,
                            PositionY = 10,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("fc5c85e6-8ddd-4dda-a1b1-3dd7461e81b7"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("e1d0d410-37a4-4df9-bb84-3acdb5b7417b"),
                            FloorName = "Prvi",
                            Lenght = 5,
                            Number = "12B",
                            PositionX = 5,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("8a44e626-0a97-4ed5-8803-71c1e1d1727b"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("9ecbc275-6ec1-48b7-bfa4-664e8e41a272"),
                            FloorName = "Drugi",
                            Lenght = 5,
                            Number = "13B",
                            PositionX = 10,
                            PositionY = 5,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("dab84eb6-9d87-423a-bca8-7c5f70c75a83"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("239a7928-6162-4f40-8a4c-f53200c7cf24"),
                            FloorName = "Treci",
                            Lenght = 10,
                            Number = "14B",
                            PositionX = 0,
                            PositionY = 0,
                            Width = 20
                        },
                        new
                        {
                            Id = new Guid("5eb85de2-dc58-4414-a0c9-ca30695983d0"),
                            BuildingId = new Guid("e5fa172e-eb14-4c11-a266-aa5df850fd56"),
                            BuildingName = "Nova zgrada",
                            FloorId = new Guid("239a7928-6162-4f40-8a4c-f53200c7cf24"),
                            FloorName = "Treci",
                            Lenght = 5,
                            Number = "15B",
                            PositionX = 0,
                            PositionY = 10,
                            Width = 20
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27bcf821-69f4-4239-a1f3-d44b8c24fced"),
                            AddressId = new Guid("3612b672-2244-4759-a876-cf433d108348"),
                            Email = "DjordjeLopov@gmail.com",
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "miki123",
                            Phone = "+612222222",
                            RoomId = new Guid("2597f2f6-1af9-4136-9902-de6eb6acfbf2"),
                            SpecializationId = new Guid("db264b7d-0444-48fe-819b-1ddf8e0e88d1"),
                            Surname = "Vuckovic",
                            Username = "Tadjo",
                            WorkingScheduleId = new Guid("7f077ba3-35f4-4dba-b6f9-68834e9f85b2")
                        },
                        new
                        {
                            Id = new Guid("c4f1529c-3e9b-48fe-94ae-a828f31e632e"),
                            AddressId = new Guid("b6d52d91-c32c-4170-b857-92975c443dbc"),
                            Email = "Cajons@gmail.com",
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "miki123",
                            Phone = "+612222222",
                            RoomId = new Guid("8fc5d6e4-060a-4cf6-a58e-18b2a8c76b14"),
                            SpecializationId = new Guid("db264b7d-0444-48fe-819b-1ddf8e0e88d1"),
                            Surname = "Maric",
                            Username = "Ilija",
                            WorkingScheduleId = new Guid("14328999-79f0-468a-8f71-6da9a4d6cb30")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("296e1ab9-ef2a-46b7-9c14-1b838d1afcb7"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("359eee5d-9b85-47f7-910f-f30d2e6a1179"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("db264b7d-0444-48fe-819b-1ddf8e0e88d1"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f077ba3-35f4-4dba-b6f9-68834e9f85b2")
                        },
                        new
                        {
                            Id = new Guid("14328999-79f0-468a-8f71-6da9a4d6cb30")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72870c6c-bb9e-41e9-8fa9-97682d330bbb"),
                            AddressId = new Guid("b6d52d91-c32c-4170-b857-92975c443dbc"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "sale1312",
                            Phone = "+612222222",
                            Surname = "Lave",
                            Username = "Sale"
                        },
                        new
                        {
                            Id = new Guid("86e2187b-5132-499d-ad0c-746e397560f1"),
                            AddressId = new Guid("775d55a9-b05f-40e1-bb08-f0a30e14ef1c"),
                            Email = "psw.isa.mail@gmail.com",
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "sale1312",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            Username = "Miki"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.sharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6d52d91-c32c-4170-b857-92975c443dbc"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("3612b672-2244-4759-a876-cf433d108348"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("775d55a9-b05f-40e1-bb08-f0a30e14ef1c"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("e5e6c192-0072-41d3-9af0-484b8beeb141"),
                                    From = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 15, 15, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holiday");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("7f077ba3-35f4-4dba-b6f9-68834e9f85b2"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("14328999-79f0-468a-8f71-6da9a4d6cb30"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.sharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("7f077ba3-35f4-4dba-b6f9-68834e9f85b2"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("14328999-79f0-468a-8f71-6da9a4d6cb30"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.sharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
