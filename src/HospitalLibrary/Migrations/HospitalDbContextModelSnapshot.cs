// <auto-generated />
using System;
using System.Collections.Generic;
using HospitalLibrary.Settings;
using HospitalLibrary.SharedModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<Guid>("ConsiliumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Jmbg>("Jmbg")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Phone>("Phone")
                        .HasColumnType("jsonb");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99576e75-ea2b-484f-bd62-512538f7f15b"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Moja Banka Krvi",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Moja Banka Krvi",
                            UserRole = 4,
                            Username = "BloodBank"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0576733-b7fa-4974-b60c-d3d7e8c9f216"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("8fcd8446-f2a7-4001-958c-284441f32e94"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("b5f5f513-a677-43ff-9bb1-98aeccb67c27"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("37be3d09-213a-4153-9c6f-b301823162c9"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("a72016bb-896b-481d-a819-cab0547a0a81"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("0f77c0ab-9102-4bdd-8e9f-6d1f3bb447d2"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("053e8a74-2c83-4d58-a868-2b098ed88bb3"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("607be4f2-9947-415c-a0ea-cc0f937c274a"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("bb0b39f7-8792-4c13-a15e-f2e54ee8c273"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("5fc058c8-c144-4b6e-bf2d-4771b77ebb5c"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("d6951e1c-b3ad-488a-bfac-10f6c93ae186"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("3cfd203b-ebb2-458b-bb37-a8da5478bd22"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        },
                        new
                        {
                            Id = new Guid("6de01b45-dceb-40a5-9abb-5726fb91f934"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Emergent = false,
                            PatientId = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca336bea-aec4-4a97-a08e-9d6fbd66afe4"),
                            Amount = 2,
                            BloodUnitId = new Guid("a2042622-1e03-4030-98df-5b09b26c9ef7"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("64feda82-d74a-42a4-9476-0d325f39df8b"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("62354ab8-de77-4b51-89e2-e510c406b673"),
                            Amount = 4,
                            BloodUnitId = new Guid("a2042622-1e03-4030-98df-5b09b26c9ef7"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("64feda82-d74a-42a4-9476-0d325f39df8b"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2042622-1e03-4030-98df-5b09b26c9ef7"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c700381-8ff6-4e1e-9a5b-d38dcc65d487"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e47de2a2-6c95-4ac3-80f4-17eb4a337439"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5166b85e-8984-4d7f-a5c0-aa2842d48cc6"),
                            Amount = 5,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Source = "URGENT"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Common.EventSourcing.DomainEvent<HospitalLibrary.Appointments.DomainEvents.EventStoreSchedulingAppointmentType>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("DomainEvent<EventStoreSchedulingAppointmentType>");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40d935bb-90f1-4ad3-984a-aa8b87285921"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("5900fe4e-253b-4ec3-94e8-ac33226f53ac"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("90bcbd53-4cf7-4ea2-9eaf-d7015ab50762"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02efbb74-7c22-4bd7-a66b-15b8561ceecc")
                        },
                        new
                        {
                            Id = new Guid("3a3035c9-c574-4699-98b6-bac80701578b")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.EventStores.EventStoreExamination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Data")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId");

                    b.ToTable("EventStoreExaminations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80adb1ba-f9c4-40b5-a1a6-075630b6c162"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("029320d1-693d-44f9-b518-612afda2e7ac"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("12aeff17-1744-4722-a9cd-baa9f81f2b96"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("b9c61141-98e5-4e0a-a039-6dccbe45984d"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("18cda185-e8de-4fb8-b81e-8a195df842b7"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("a336538b-7990-4fee-bcf1-8b5cafdf2589"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("eda1554b-436b-46ac-9335-87628aad13c3"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("d3756a4d-5fc2-47e8-b77e-5e1baef24d29"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("cb775309-3450-4da7-89ab-21de2d79f972"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("ab39f418-9c8a-4eba-ba28-697ac03e7b2c"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("b986129e-c6ba-47ec-9b7b-ea6aea4de066"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("d75699a8-358e-480f-bf7b-2221b081bfd1"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("f7066d48-07ea-4683-81e8-ea2034d56e38"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("d67d6900-454a-4511-aabf-23dd076c1e8f"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("91802ffc-77f7-4aca-be23-02ad8d28ae2a"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("7b7f8f8e-87e8-4ece-9463-d0a920d360ee"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("0862b4d2-d36f-45ee-8a89-f5fa44b2148c"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("9f703acd-ba44-420b-a58d-88d0f37aeb52"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("1a8ceade-c1ed-4e0e-a111-1a3d2d3def61"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("85004393-0793-466b-89f6-dbe8937bd247"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("785077f5-982f-49ce-b3b6-dfa02ed204c7"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5522f04-8c98-4b89-90b2-4c334326b337"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b41fed9-1020-4aef-8a8a-1007d94cfe15"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("a2360d51-9dbf-40f0-9bea-431cb4eacf29"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("4a717373-458c-4bae-95d6-e36d97c16468"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("79581c8e-b480-40e1-bda7-71317c96857f"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("065f8fec-23bd-445d-867e-2817d25a6114"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("a24fe08e-34b8-4eda-af58-a795972c5cca"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("765c64ca-3e15-4abb-adfe-0365386b51b4"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("42f639da-ffc9-47f3-b36b-616811b41297"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Malicious")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfCancellations")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MaliciousPatients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("PatientHealthState");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthStateNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Notifications")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHealthStateNotification");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33e2909a-b11b-4eb6-90ef-38153c9d11c7"),
                            BuildingId = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("ec245cc6-8072-4959-82b9-a18bc46c8720"),
                            BuildingId = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("43ff2155-685f-4cdc-bb05-5e6827d465fa"),
                            BuildingId = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("a58a4a1f-2757-499d-805d-b80afdb8da45"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("083458e2-8f33-4b45-9c92-706b1b9c69cc"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("7480f1be-b403-4091-86a3-e662b8f032b3"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49503b1b-16fe-4846-8793-2416c9006045"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7e05c47c-b9de-45f8-89d6-755e9a178529"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e104979d-3ac4-42dd-b6ef-f45981b9673e"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("45cd1733-2c1f-48e8-9a61-c16969ae6e0a"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("9eacd893-7162-455d-88b6-19acc797ceab"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e6954c54-f26d-4c3f-8b1b-48236c6289b0"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b4e56fe6-d3f0-4823-848d-9b13ee192993"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("02392c15-8b13-4075-8947-017f3519b777"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("612edc5b-6844-4c70-a30d-2f3dfe6e36a9"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("a48655a4-ff5e-4821-adf8-fe46e9e01c79"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("e52eca54-3ce3-4fb9-b69f-e627837229ee"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("cf6fc9ac-75e8-4dd3-bfa1-b3a0d4bc541f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("8ee8bdfd-ac0c-4dc3-b79f-55506121e9c0"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("87b2c6ed-b5fc-48f6-b20f-efe899fc35a2"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("b4afd009-f768-486f-8e80-80de254e1ef9"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("97c59b30-1f46-4467-955a-58f4eda9f96f"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f04b034c-8459-4f80-9595-18974b67622f"),
                            BuildingId = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            FloorId = new Guid("33e2909a-b11b-4eb6-90ef-38153c9d11c7"),
                            GRoomId = new Guid("49503b1b-16fe-4846-8793-2416c9006045"),
                            Name = "A11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960"),
                            BuildingId = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            FloorId = new Guid("33e2909a-b11b-4eb6-90ef-38153c9d11c7"),
                            GRoomId = new Guid("7e05c47c-b9de-45f8-89d6-755e9a178529"),
                            Name = "B11",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("45cd1733-2c1f-48e8-9a61-c16969ae6e0a"),
                            BuildingId = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            FloorId = new Guid("ec245cc6-8072-4959-82b9-a18bc46c8720"),
                            GRoomId = new Guid("e104979d-3ac4-42dd-b6ef-f45981b9673e"),
                            Name = "A12",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("e6954c54-f26d-4c3f-8b1b-48236c6289b0"),
                            BuildingId = new Guid("128ab9e5-6d34-4c4f-83a6-52f39f321494"),
                            FloorId = new Guid("43ff2155-685f-4cdc-bb05-5e6827d465fa"),
                            GRoomId = new Guid("9eacd893-7162-455d-88b6-19acc797ceab"),
                            Name = "A13",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("02392c15-8b13-4075-8947-017f3519b777"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorId = new Guid("a58a4a1f-2757-499d-805d-b80afdb8da45"),
                            GRoomId = new Guid("b4e56fe6-d3f0-4823-848d-9b13ee192993"),
                            Name = "A21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("a48655a4-ff5e-4821-adf8-fe46e9e01c79"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorId = new Guid("a58a4a1f-2757-499d-805d-b80afdb8da45"),
                            GRoomId = new Guid("612edc5b-6844-4c70-a30d-2f3dfe6e36a9"),
                            Name = "B21",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("cf6fc9ac-75e8-4dd3-bfa1-b3a0d4bc541f"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorId = new Guid("083458e2-8f33-4b45-9c92-706b1b9c69cc"),
                            GRoomId = new Guid("e52eca54-3ce3-4fb9-b69f-e627837229ee"),
                            Name = "A22",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("87b2c6ed-b5fc-48f6-b20f-efe899fc35a2"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorId = new Guid("7480f1be-b403-4091-86a3-e662b8f032b3"),
                            GRoomId = new Guid("8ee8bdfd-ac0c-4dc3-b79f-55506121e9c0"),
                            Name = "C23",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("97c59b30-1f46-4467-955a-58f4eda9f96f"),
                            BuildingId = new Guid("0c4c44c2-1684-48b7-a68c-0280f344ce0f"),
                            FloorId = new Guid("7480f1be-b403-4091-86a3-e662b8f032b3"),
                            GRoomId = new Guid("b4afd009-f768-486f-8e80-80de254e1ef9"),
                            Name = "B23",
                            Type = 2
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86bbc095-9abd-4cf0-b402-4fc5822ca033"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f")
                        },
                        new
                        {
                            Id = new Guid("8487d5da-1bc2-4992-8b40-bd80db683987"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f")
                        },
                        new
                        {
                            Id = new Guid("b36b656c-dfda-4cfa-a5c8-9bb8b098edb2"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f")
                        },
                        new
                        {
                            Id = new Guid("0345ea12-64e6-47ff-a71b-36d151cf0a35"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f")
                        },
                        new
                        {
                            Id = new Guid("1485096e-bc16-48d8-961a-53c6a75cc716"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960")
                        },
                        new
                        {
                            Id = new Guid("6382fabd-082a-45cf-9805-fa15258eb048"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960")
                        },
                        new
                        {
                            Id = new Guid("2f5f9e65-0ce7-4f27-a152-1ebbe4edfbbb"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960")
                        },
                        new
                        {
                            Id = new Guid("001ba147-daa5-4d9c-8cc8-ef6e917226b7"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960")
                        },
                        new
                        {
                            Id = new Guid("4fa5d1fc-991b-41a3-bb21-c577015d4d68"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("80a633f7-dca3-4e4a-96b4-03602b84772b"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("8b1d72fc-6252-4fa1-827b-4c216f067cfb"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3ede5fcf-d8b7-4348-8d03-293189ba7742"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("45cd1733-2c1f-48e8-9a61-c16969ae6e0a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("6c0a181f-c35e-4d69-ba51-c98a81f514df"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("e6954c54-f26d-4c3f-8b1b-48236c6289b0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("83b68e9a-737b-48ba-b49f-40490e61577c"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("02392c15-8b13-4075-8947-017f3519b777")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("27b7a452-29ba-4520-be23-20f9b435f451"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("a48655a4-ff5e-4821-adf8-fe46e9e01c79")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("5580c69d-0f4a-4729-9db4-74815ce086e0"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("cf6fc9ac-75e8-4dd3-bfa1-b3a0d4bc541f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("bc952f63-46d2-4165-b881-8fad04d8059a"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("87b2c6ed-b5fc-48f6-b20f-efe899fc35a2")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d9ea6d9d-61b0-42cb-9e30-fbde14986c78"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("97c59b30-1f46-4467-955a-58f4eda9f96f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("10f92c0f-e60e-44e3-a1da-33a377f6c991"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2015bbfc-9e3b-4d95-afa7-a3321463553c"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2d319570-c16a-4151-ab87-05e520bfd1ec"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("da8b837f-3987-4937-8f77-0427f558ec2d"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("45cd1733-2c1f-48e8-9a61-c16969ae6e0a")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("2506a5b3-02a7-477f-b0d6-9078aca27ef9"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("e6954c54-f26d-4c3f-8b1b-48236c6289b0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b06b0e64-6c67-4e77-b787-1279cd2591ab"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("02392c15-8b13-4075-8947-017f3519b777")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("94185be2-325e-4f03-9b3a-e78ba1f67df7"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("02392c15-8b13-4075-8947-017f3519b777")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("771812c1-6efa-4e48-a6ac-2751a9b23d2c"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("a48655a4-ff5e-4821-adf8-fe46e9e01c79")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("42adaa5b-a579-4084-8cd4-d8a5ec763c2b"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("87b2c6ed-b5fc-48f6-b20f-efe899fc35a2")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3ea73b66-b231-43cb-848e-24279d96d9b8"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("97c59b30-1f46-4467-955a-58f4eda9f96f")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomEvent");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b688282-7df3-4ee8-a4fe-ed9e463c9fb8"),
                            EventName = "SessionStarted",
                            TimeStamp = new DateTime(2023, 1, 13, 0, 19, 1, 884, DateTimeKind.Local).AddTicks(254),
                            UserId = new Guid("44e5b077-21af-4a4d-8d1d-7fed13b83094"),
                            Value = "null"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("Room1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Room2Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Room1Id");

                    b.HasIndex("Room2Id");

                    b.ToTable("RoomMerging");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("newRoomName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSpliting");
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78531076-9955-4da1-9601-f4368ea29884"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("de1d8d16-3e84-4447-b7e3-9b3a64fa4363"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c56aa480-eb59-4909-8b94-5d5223125862"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("13122955-1e3d-48cb-9e83-d31d319a4331"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64feda82-d74a-42a4-9476-0d325f39df8b"),
                            AddressId = new Guid("de1d8d16-3e84-4447-b7e3-9b3a64fa4363"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("e2a694a2-0fc1-44a7-94dd-ed215518e960"),
                            SpecializationId = new Guid("90bcbd53-4cf7-4ea2-9eaf-d7015ab50762"),
                            WorkingScheduleId = new Guid("02efbb74-7c22-4bd7-a66b-15b8561ceecc")
                        },
                        new
                        {
                            Id = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            AddressId = new Guid("78531076-9955-4da1-9601-f4368ea29884"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("f04b034c-8459-4f80-9595-18974b67622f"),
                            SpecializationId = new Guid("5900fe4e-253b-4ec3-94e8-ac33226f53ac"),
                            WorkingScheduleId = new Guid("02efbb74-7c22-4bd7-a66b-15b8561ceecc")
                        },
                        new
                        {
                            Id = new Guid("6c917ac7-3014-4807-b539-e7da0e7ca804"),
                            AddressId = new Guid("78531076-9955-4da1-9601-f4368ea29884"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("cf6fc9ac-75e8-4dd3-bfa1-b3a0d4bc541f"),
                            SpecializationId = new Guid("5900fe4e-253b-4ec3-94e8-ac33226f53ac"),
                            WorkingScheduleId = new Guid("02efbb74-7c22-4bd7-a66b-15b8561ceecc")
                        },
                        new
                        {
                            Id = new Guid("222a8b42-2e02-45c7-b53a-b21aefaca00a"),
                            AddressId = new Guid("78531076-9955-4da1-9601-f4368ea29884"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Jakov",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Jakov",
                            RoomId = new Guid("e6954c54-f26d-4c3f-8b1b-48236c6289b0"),
                            SpecializationId = new Guid("40d935bb-90f1-4ad3-984a-aa8b87285921"),
                            WorkingScheduleId = new Guid("3a3035c9-c574-4699-98b6-bac80701578b")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44e5b077-21af-4a4d-8d1d-7fed13b83094"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        },
                        new
                        {
                            Id = new Guid("86645e61-fe6b-4aa8-b20f-7692cdb8d230"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Blood Bank",
                            UserRole = 3,
                            Username = "ManagerBB"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("652b84fa-fd03-441f-9552-64c87ce8aca6"),
                            AddressId = new Guid("78531076-9955-4da1-9601-f4368ea29884"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("4ddb71a2-77c7-4cf1-87bb-91e1cd57e7c4"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("9b36c7a8-4fe2-47fc-871f-ca6de6089c74"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("9c05f79c-859e-42dc-b8f4-8ac11f01350e"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("6c917ac7-3014-4807-b539-e7da0e7ca804"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("998d0e87-4611-49e4-a283-5592510e3120"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("5e04f731-9928-407e-bc2b-9573fe485c5d"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("7697d0fc-b421-495a-89cd-be8cbeeb6aee"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("6c917ac7-3014-4807-b539-e7da0e7ca804"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("e0963fea-93a6-4de8-803d-c33d5477795b"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("6c917ac7-3014-4807-b539-e7da0e7ca804"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("111ec5d6-287d-4df9-a06e-ad00e24a1715"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("64feda82-d74a-42a4-9476-0d325f39df8b"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("b0c6a94f-a9f3-47e1-a96b-afbcf40d6b4d"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("64feda82-d74a-42a4-9476-0d325f39df8b"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("72b42a8a-fc4d-4981-8818-e8f867a57095"),
                            AddressId = new Guid("4d517b16-3c54-43db-8014-daba04646b02"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            IsBlocked = false,
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("6c917ac7-3014-4807-b539-e7da0e7ca804"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Consiliums.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("c0576733-b7fa-4974-b60c-d3d7e8c9f216"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("8fcd8446-f2a7-4001-958c-284441f32e94"),
                                    From = new DateTime(2023, 1, 12, 23, 19, 1, 879, DateTimeKind.Local).AddTicks(6974),
                                    To = new DateTime(2023, 1, 12, 23, 49, 1, 882, DateTimeKind.Local).AddTicks(1433)
                                },
                                new
                                {
                                    AppointmentId = new Guid("b5f5f513-a677-43ff-9bb1-98aeccb67c27"),
                                    From = new DateTime(2023, 1, 12, 22, 19, 1, 882, DateTimeKind.Local).AddTicks(1457),
                                    To = new DateTime(2023, 1, 12, 22, 49, 1, 882, DateTimeKind.Local).AddTicks(1461)
                                },
                                new
                                {
                                    AppointmentId = new Guid("37be3d09-213a-4153-9c6f-b301823162c9"),
                                    From = new DateTime(2023, 1, 12, 20, 59, 1, 882, DateTimeKind.Local).AddTicks(1464),
                                    To = new DateTime(2023, 1, 12, 21, 29, 1, 882, DateTimeKind.Local).AddTicks(1467)
                                },
                                new
                                {
                                    AppointmentId = new Guid("a72016bb-896b-481d-a819-cab0547a0a81"),
                                    From = new DateTime(2023, 1, 12, 19, 49, 1, 882, DateTimeKind.Local).AddTicks(1469),
                                    To = new DateTime(2023, 1, 12, 20, 59, 1, 882, DateTimeKind.Local).AddTicks(1471)
                                },
                                new
                                {
                                    AppointmentId = new Guid("0f77c0ab-9102-4bdd-8e9f-6d1f3bb447d2"),
                                    From = new DateTime(2023, 1, 12, 18, 29, 1, 882, DateTimeKind.Local).AddTicks(1474),
                                    To = new DateTime(2023, 1, 12, 20, 9, 1, 882, DateTimeKind.Local).AddTicks(1477)
                                },
                                new
                                {
                                    AppointmentId = new Guid("053e8a74-2c83-4d58-a868-2b098ed88bb3"),
                                    From = new DateTime(2023, 1, 12, 17, 14, 1, 882, DateTimeKind.Local).AddTicks(1479),
                                    To = new DateTime(2023, 1, 12, 18, 14, 1, 882, DateTimeKind.Local).AddTicks(1481)
                                },
                                new
                                {
                                    AppointmentId = new Guid("607be4f2-9947-415c-a0ea-cc0f937c274a"),
                                    From = new DateTime(2022, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("bb0b39f7-8792-4c13-a15e-f2e54ee8c273"),
                                    From = new DateTime(2022, 8, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 8, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("5fc058c8-c144-4b6e-bf2d-4771b77ebb5c"),
                                    From = new DateTime(2022, 9, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 9, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("d6951e1c-b3ad-488a-bfac-10f6c93ae186"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("3cfd203b-ebb2-458b-bb37-a8da5478bd22"),
                                    From = new DateTime(2022, 11, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 11, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AppointmentId = new Guid("6de01b45-dceb-40a5-9abb-5726fb91f934"),
                                    From = new DateTime(2022, 12, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 12, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Common.EventSourcing.DomainEvent<HospitalLibrary.Appointments.DomainEvents.EventStoreSchedulingAppointmentType>", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", null)
                        .WithMany("Changes")
                        .HasForeignKey("AppointmentId");
                });

            modelBuilder.Entity("HospitalLibrary.Consiliums.Model.Consilium", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.OwnsOne("HospitalLibrary.SharedModel.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("ConsiliumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Duration")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consiliums");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Room");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("02efbb74-7c22-4bd7-a66b-15b8561ceecc"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("3a3035c9-c574-4699-98b6-bac80701578b"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.NullableDateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleFrom");

                            b1.Property<DateTime?>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ScheduleTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("02efbb74-7c22-4bd7-a66b-15b8561ceecc"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("3a3035c9-c574-4699-98b6-bac80701578b"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.EventStores.EventStoreExamination", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", "Aggregate")
                        .WithMany()
                        .HasForeignKey("AggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aggregate");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("b5522f04-8c98-4b89-90b2-4c334326b337"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.MaliciousPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthState", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Patients.Model.BloodPressure", "BloodPressure", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("LowerPressure")
                                .HasColumnType("integer");

                            b1.Property<int>("UpperPressure")
                                .HasColumnType("integer");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.OwnsOne("HospitalLibrary.Patients.Model.BloodSugarLevel", "BloodSugarLevel", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SugarLevel")
                                .HasColumnType("integer");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "MenstrualCycle", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.Percentage", "BodyFatPercent", b1 =>
                        {
                            b1.Property<Guid>("PatientHealthStateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("PatientHealthStateId");

                            b1.ToTable("PatientHealthState");

                            b1.WithOwner()
                                .HasForeignKey("PatientHealthStateId");
                        });

                    b.Navigation("BloodPressure");

                    b.Navigation("BloodSugarLevel");

                    b.Navigation("BodyFatPercent");

                    b.Navigation("MenstrualCycle");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientHealthStateNotification", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomMerging", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room1")
                        .WithMany()
                        .HasForeignKey("Room1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room2")
                        .WithMany()
                        .HasForeignKey("Room2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRangeOfMerging", b1 =>
                        {
                            b1.Property<Guid>("RoomMergingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomMergingId");

                            b1.ToTable("RoomMerging");

                            b1.WithOwner()
                                .HasForeignKey("RoomMergingId");
                        });

                    b.Navigation("DateRangeOfMerging");

                    b.Navigation("Room1");

                    b.Navigation("Room2");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomSpliting", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DatesForSearch", b1 =>
                        {
                            b1.Property<Guid>("RoomSplitingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("RoomSplitingId");

                            b1.ToTable("RoomSpliting");

                            b1.WithOwner()
                                .HasForeignKey("RoomSplitingId");
                        });

                    b.Navigation("DatesForSearch");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
