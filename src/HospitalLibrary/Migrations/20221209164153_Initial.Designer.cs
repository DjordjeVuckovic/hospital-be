// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20221209164153_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<Guid>("AllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.Property<Guid>("ExaminationPrescriptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationPrescriptionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("ExaminationPrescriptionMedicine");
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.Property<Guid>("ExaminationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymptomsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExaminationsId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("ExaminationSymptom");
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Jmbg")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("integer");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Emergent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cb2ee95-2737-479a-a9c5-784ffe61000e"),
                            AppointmentState = 0,
                            AppointmentType = 0,
                            DoctorId = new Guid("752913c5-85cf-45d8-b16d-cd90e0155525"),
                            Emergent = false,
                            PatientId = new Guid("bc7cc2d4-f23b-498a-9928-2e1825d44ba7")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BloodUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BloodUnitId");

                    b.ToTable("BloodConsumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa4fac16-aa89-498b-88f2-498cd4ba7e73"),
                            Amount = 2,
                            BloodUnitId = new Guid("429ad103-7afc-4a9e-bead-e939949a3539"),
                            Date = new DateTime(2022, 10, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("925c76f4-7154-4fbe-9b86-3c4d2756c1e7"),
                            Purpose = "operation"
                        },
                        new
                        {
                            Id = new Guid("b88cef23-3448-434e-9ae5-ada56853e2ed"),
                            Amount = 4,
                            BloodUnitId = new Guid("429ad103-7afc-4a9e-bead-e939949a3539"),
                            Date = new DateTime(2022, 11, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("925c76f4-7154-4fbe-9b86-3c4d2756c1e7"),
                            Purpose = "operation"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("BloodBankName")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("429ad103-7afc-4a9e-bead-e939949a3539"),
                            Amount = 7,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        },
                        new
                        {
                            Id = new Guid("722a9005-ce74-4d09-b1ec-639a79e6ba6e"),
                            Amount = 10,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 7
                        },
                        new
                        {
                            Id = new Guid("898c9a19-2550-41f2-a3c9-a5beec491067"),
                            Amount = 4,
                            BloodBankName = "Moja Banka Krvi",
                            BloodType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c38c737-8fe0-4cf8-8d22-543733ba2758"),
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = new Guid("4e4d0d85-77b8-4845-a9df-a57c6e7bb73e"),
                            Name = "General"
                        },
                        new
                        {
                            Id = new Guid("c2102b83-6fa4-4284-9590-4fd8246b5f86"),
                            Name = "Dermatology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WorkingSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6ce3d73-981a-4781-b61b-60c2e1421bf4")
                        },
                        new
                        {
                            Id = new Guid("89eb9da1-220b-4407-8e85-7c2edb5e906d")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinationRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRoomId");

                    b.HasIndex("OriginalRoomId");

                    b.ToTable("EquipmentMovementAppointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da40e2a4-14c0-4737-9be8-03063a651d8d"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("e8557884-6d46-4b10-a55d-ccc1e584d353"),
                            Description = "Runny nose"
                        },
                        new
                        {
                            Id = new Guid("c06d697e-0eb0-4322-8a39-0399d83c18ec"),
                            Description = "Stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("bca3e2af-aeaa-4904-bda3-8a2d8d728ef2"),
                            Description = "Puffy, watery eyes"
                        },
                        new
                        {
                            Id = new Guid("59d4be1a-53f2-4e1c-9a6a-58338775ead5"),
                            Description = "Sneezing"
                        },
                        new
                        {
                            Id = new Guid("bbd070f1-37e8-49ad-8a6e-8ea318f4b474"),
                            Description = "High temperature"
                        },
                        new
                        {
                            Id = new Guid("91be5772-4998-4c04-818d-95659998b1f0"),
                            Description = "Difficulty breathing"
                        },
                        new
                        {
                            Id = new Guid("96265d53-2a77-442f-8afb-f4198181cde3"),
                            Description = "Cold"
                        },
                        new
                        {
                            Id = new Guid("30c86ef0-82ca-4431-8bed-065393a5586f"),
                            Description = "Flu"
                        },
                        new
                        {
                            Id = new Guid("501e4cf4-e47c-4c95-aa01-c601d4ae8364"),
                            Description = "Fever"
                        },
                        new
                        {
                            Id = new Guid("10cb12e7-dd4f-4358-902a-abba7ed73abb"),
                            Description = "Headache"
                        },
                        new
                        {
                            Id = new Guid("1217f0bc-4b0e-4dc9-a2a7-d3837f3c810a"),
                            Description = "Eye irritation"
                        },
                        new
                        {
                            Id = new Guid("1c576995-cfad-4a3d-a68f-269627efdc6e"),
                            Description = "More intense pain and fatigue"
                        },
                        new
                        {
                            Id = new Guid("ecb98a15-e943-4fbd-b628-407179a990be"),
                            Description = "Dry cough"
                        },
                        new
                        {
                            Id = new Guid("71fd2e0c-fa78-4330-b8fc-235f5711f875"),
                            Description = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("b9285681-b97b-4744-a309-e2a291582088"),
                            Description = "Abdominal pain"
                        },
                        new
                        {
                            Id = new Guid("9380f144-4ffd-4c6e-9ea9-a0fabcf89475"),
                            Description = "Diarrhea"
                        },
                        new
                        {
                            Id = new Guid("f8c56092-418d-47ec-b7d1-9ad28903493f"),
                            Description = "Mononucleosis"
                        },
                        new
                        {
                            Id = new Guid("c8a4852d-87df-4001-bb02-6f6203a1e098"),
                            Description = "Stomach Aches"
                        },
                        new
                        {
                            Id = new Guid("ae57f2eb-8efe-4df0-b992-e7a8609d526f"),
                            Description = "Nausea"
                        },
                        new
                        {
                            Id = new Guid("292a5c4c-84ee-48a6-abce-d94edde5d1a7"),
                            Description = "Vomiting"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ede11f4d-cc98-4788-a89c-9eb93a0f9807"),
                            Description = "I want to go to Paralia",
                            DoctorId = new Guid("752913c5-85cf-45d8-b16d-cd90e0155525"),
                            HolidayStatus = 0,
                            IsUrgent = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f413625e-5c7f-4614-9249-03a1f4c1b6ab"),
                            Amount = 1000,
                            Name = "Medicine1"
                        },
                        new
                        {
                            Id = new Guid("1347f958-1c93-4f6b-b6ee-95aef29e336f"),
                            Amount = 1000,
                            Name = "Medicine2"
                        },
                        new
                        {
                            Id = new Guid("bd0fd758-2d17-4ffe-ac92-c960d2d878fd"),
                            Amount = 1000,
                            Name = "Medicine3"
                        },
                        new
                        {
                            Id = new Guid("ed31648d-b472-4877-a4e3-076b940f5609"),
                            Amount = 1000,
                            Name = "Medicine4"
                        },
                        new
                        {
                            Id = new Guid("bd574e72-20dd-49db-becb-16ed19ec1a0a"),
                            Amount = 1000,
                            Name = "Medicine5"
                        },
                        new
                        {
                            Id = new Guid("7c9ec619-55af-4159-819a-9888bb152db6"),
                            Amount = 1000,
                            Name = "Medicine6"
                        },
                        new
                        {
                            Id = new Guid("0157a5f1-fb72-478d-ae8a-8d1444f455e7"),
                            Amount = 30,
                            Name = "Brufen 300"
                        },
                        new
                        {
                            Id = new Guid("875a9eac-b5bc-48dd-9bfd-5366d5d12112"),
                            Amount = 1,
                            Name = "Aspirin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDischarge")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfDischarge")
                        .HasColumnType("text");

                    b.Property<Guid>("SelectedBedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SelectedBedId");

                    b.HasIndex("SelectedRoomId");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("BloodPrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentReportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TreatmentReportId");

                    b.ToTable("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            Name = "Stara bolnica"
                        },
                        new
                        {
                            Id = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            Name = "Nova bolnica"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("753d8f7e-99a7-4c26-b818-bdfb9c667c72"),
                            BuildingId = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("7099a7da-3120-4b40-a6f8-526a400f03e9"),
                            BuildingId = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("68f00be2-35f7-4c9b-a9cb-4c5dcd351c77"),
                            BuildingId = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            FloorNumber = 2,
                            Name = "F2"
                        },
                        new
                        {
                            Id = new Guid("a4985846-29d2-4993-933a-6442e876cf27"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorNumber = 0,
                            Name = "F0"
                        },
                        new
                        {
                            Id = new Guid("eb0e46b0-61e7-48d3-b874-54770d0405a2"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorNumber = 1,
                            Name = "F1"
                        },
                        new
                        {
                            Id = new Guid("9f52b86a-9ceb-42c9-bd8f-6dcc583aa56d"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorNumber = 2,
                            Name = "F2"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.GRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Lenght")
                        .HasColumnType("integer");

                    b.Property<int>("PositionX")
                        .HasColumnType("integer");

                    b.Property<int>("PositionY")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b23d5bd-c7c0-4779-83ad-35ac5fea1015"),
                            Lenght = 5,
                            PositionX = 0,
                            PositionY = 0,
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("3279ddb6-30b9-4538-b5fd-2ed07d815289"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("563974eb-4c44-44ad-bb5e-5d2547fa5cdc"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("99ba3bb6-5d7b-4c0d-9bb4-2fe3a05f064d"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("a512d2c3-a01b-461b-a1ac-4194839855d0"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("24eb497a-0069-4a84-aa23-8d8177b72884"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("6d0df734-aa91-4893-b501-d8a9a6e6e8d5"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("e2b4d338-8e6a-4fed-b972-e8d32a07bf25"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("7152eefe-d507-4bf4-bd97-e585cad7be5f"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("78e3535f-d042-4de0-ba63-77c3fc9f5227"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2aa45fd8-59d1-4f2d-9f76-87853abe46af"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("34ada0ef-1541-4799-b71e-446f1e6e77e0"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("d22a31e3-d0df-4ba4-b13e-c750ff349713"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("bdd61d81-a29c-4e4c-9b56-c9e49e53ad9f"),
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("2e3303b3-2a1c-4e6f-8e5f-6306faa140d3"),
                            Lenght = 5,
                            PositionX = 5,
                            PositionY = 0,
                            RoomId = new Guid("09385bde-5598-48c5-8dc8-ac51829ecb9b"),
                            Width = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b63e0855-a020-44f7-93ec-73a784344b58"),
                            BuildingId = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            FloorId = new Guid("753d8f7e-99a7-4c26-b818-bdfb9c667c72"),
                            GRoomId = new Guid("8b23d5bd-c7c0-4779-83ad-35ac5fea1015"),
                            Name = "A11"
                        },
                        new
                        {
                            Id = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0"),
                            BuildingId = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            FloorId = new Guid("753d8f7e-99a7-4c26-b818-bdfb9c667c72"),
                            GRoomId = new Guid("3279ddb6-30b9-4538-b5fd-2ed07d815289"),
                            Name = "B11"
                        },
                        new
                        {
                            Id = new Guid("99ba3bb6-5d7b-4c0d-9bb4-2fe3a05f064d"),
                            BuildingId = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            FloorId = new Guid("7099a7da-3120-4b40-a6f8-526a400f03e9"),
                            GRoomId = new Guid("563974eb-4c44-44ad-bb5e-5d2547fa5cdc"),
                            Name = "A12"
                        },
                        new
                        {
                            Id = new Guid("24eb497a-0069-4a84-aa23-8d8177b72884"),
                            BuildingId = new Guid("2e4de800-a5de-4594-9ecd-8596bd993fc7"),
                            FloorId = new Guid("68f00be2-35f7-4c9b-a9cb-4c5dcd351c77"),
                            GRoomId = new Guid("a512d2c3-a01b-461b-a1ac-4194839855d0"),
                            Name = "A13"
                        },
                        new
                        {
                            Id = new Guid("e2b4d338-8e6a-4fed-b972-e8d32a07bf25"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorId = new Guid("a4985846-29d2-4993-933a-6442e876cf27"),
                            GRoomId = new Guid("6d0df734-aa91-4893-b501-d8a9a6e6e8d5"),
                            Name = "A21"
                        },
                        new
                        {
                            Id = new Guid("78e3535f-d042-4de0-ba63-77c3fc9f5227"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorId = new Guid("a4985846-29d2-4993-933a-6442e876cf27"),
                            GRoomId = new Guid("7152eefe-d507-4bf4-bd97-e585cad7be5f"),
                            Name = "B21"
                        },
                        new
                        {
                            Id = new Guid("34ada0ef-1541-4799-b71e-446f1e6e77e0"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorId = new Guid("eb0e46b0-61e7-48d3-b874-54770d0405a2"),
                            GRoomId = new Guid("2aa45fd8-59d1-4f2d-9f76-87853abe46af"),
                            Name = "A22"
                        },
                        new
                        {
                            Id = new Guid("bdd61d81-a29c-4e4c-9b56-c9e49e53ad9f"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorId = new Guid("9f52b86a-9ceb-42c9-bd8f-6dcc583aa56d"),
                            GRoomId = new Guid("d22a31e3-d0df-4ba4-b13e-c750ff349713"),
                            Name = "C23"
                        },
                        new
                        {
                            Id = new Guid("09385bde-5598-48c5-8dc8-ac51829ecb9b"),
                            BuildingId = new Guid("01bd0c4b-19f0-4337-ba6e-61eed651ca0b"),
                            FloorId = new Guid("9f52b86a-9ceb-42c9-bd8f-6dcc583aa56d"),
                            GRoomId = new Guid("2e3303b3-2a1c-4e6f-8e5f-6306faa140d3"),
                            Name = "B23"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2e0b88-eabd-4118-8737-53d183b47914"),
                            IsFree = true,
                            Number = "11A1",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58")
                        },
                        new
                        {
                            Id = new Guid("bba99c74-0a67-435f-b05b-d820c04476e3"),
                            IsFree = true,
                            Number = "11A2",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58")
                        },
                        new
                        {
                            Id = new Guid("3fc4a6e4-62c8-43aa-b722-529302ca993c"),
                            IsFree = true,
                            Number = "11A3",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58")
                        },
                        new
                        {
                            Id = new Guid("19dbcb96-f7d0-49ed-91d6-d614df7798c6"),
                            IsFree = true,
                            Number = "11A4",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58")
                        },
                        new
                        {
                            Id = new Guid("93990043-39ba-4a6c-b8ba-a14ef9b04bd9"),
                            IsFree = true,
                            Number = "12A1",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0")
                        },
                        new
                        {
                            Id = new Guid("487ff11c-8495-4faa-8166-f28692f0f363"),
                            IsFree = true,
                            Number = "12A2",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0")
                        },
                        new
                        {
                            Id = new Guid("7c2e734d-89ba-4015-bf2c-57b2dc39742e"),
                            IsFree = true,
                            Number = "12A3",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0")
                        },
                        new
                        {
                            Id = new Guid("c0e38ee6-4de1-4df0-b1c5-389605e23579"),
                            IsFree = true,
                            Number = "12A4",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0")
                        },
                        new
                        {
                            Id = new Guid("57775e63-c8d7-41aa-97c3-5a88ee441f01"),
                            IsFree = true,
                            Number = "12A5",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.Property<Guid>("RoomEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("RoomEquipmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomEquipment");

                    b.HasData(
                        new
                        {
                            RoomEquipmentId = new Guid("7be9c4da-0af8-448e-a4ef-db6c9d840ea1"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("db3cb2cf-ec4f-416a-bd71-9977d237e00e"),
                            Amount = 10,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0929a294-65f3-4578-9653-35f6730cc5d2"),
                            Amount = 3,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("99ba3bb6-5d7b-4c0d-9bb4-2fe3a05f064d")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3c6e8129-cd65-4175-9d72-f3bd9ab8df03"),
                            Amount = 11,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("24eb497a-0069-4a84-aa23-8d8177b72884")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("69faa0c5-5e30-4f9c-9288-826c9d2bd846"),
                            Amount = 22,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("e2b4d338-8e6a-4fed-b972-e8d32a07bf25")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c43fea23-19d3-48e1-aa69-9f07f5690558"),
                            Amount = 14,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("78e3535f-d042-4de0-ba63-77c3fc9f5227")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0002f5f7-a808-4903-b5aa-30ae40972fd8"),
                            Amount = 6,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("34ada0ef-1541-4799-b71e-446f1e6e77e0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("88283c11-96db-483c-8842-cc2332d5bd52"),
                            Amount = 3,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("bdd61d81-a29c-4e4c-9b56-c9e49e53ad9f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("4126117a-b2b2-4b6c-909c-a45d9f2795f2"),
                            Amount = 9,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("09385bde-5598-48c5-8dc8-ac51829ecb9b")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("d2e4e48f-7656-45a4-b149-b29186a25291"),
                            Amount = 5,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("3417263e-68af-4fe2-8c68-1ce8d63174a7"),
                            Amount = 13,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("91111489-dcb2-4dc2-b1f3-50d000967901"),
                            Amount = 5,
                            EquipmentName = "EKG_MACHINE",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("79c4a4ba-6a30-4436-a488-0b3ad0b5941f"),
                            Amount = 23,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("99ba3bb6-5d7b-4c0d-9bb4-2fe3a05f064d")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("23647ce5-0678-45a2-a917-a1ab00085792"),
                            Amount = 4,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("24eb497a-0069-4a84-aa23-8d8177b72884")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("b296ef72-df1e-4cda-8440-f90cdf819257"),
                            Amount = 6,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("e2b4d338-8e6a-4fed-b972-e8d32a07bf25")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("c85bc4b1-15e8-40fb-8b13-89b68b414442"),
                            Amount = 15,
                            EquipmentName = "SURGICAL_TABLES",
                            RoomId = new Guid("e2b4d338-8e6a-4fed-b972-e8d32a07bf25")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("493f3c60-7047-41c4-9de6-07f36b9ab185"),
                            Amount = 7,
                            EquipmentName = "SYRINGE",
                            RoomId = new Guid("78e3535f-d042-4de0-ba63-77c3fc9f5227")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("ebd40e43-9a99-40f6-8d07-b8fbf234caa8"),
                            Amount = 13,
                            EquipmentName = "BANDAGE",
                            RoomId = new Guid("bdd61d81-a29c-4e4c-9b56-c9e49e53ad9f")
                        },
                        new
                        {
                            RoomEquipmentId = new Guid("0b120cc6-a3c8-4e7e-9996-36af118f6894"),
                            Amount = 9,
                            EquipmentName = "ANESTHESIA",
                            RoomId = new Guid("09385bde-5598-48c5-8dc8-ac51829ecb9b")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa8eedaf-835b-4f61-bc79-73a9f5a15ab7"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Kosovska",
                            StreetNumber = "23A"
                        },
                        new
                        {
                            Id = new Guid("1897cb35-3aef-4aee-842d-69365210e93b"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "Partizanska",
                            StreetNumber = "33"
                        },
                        new
                        {
                            Id = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            City = "Novi Sad",
                            Country = "Serbia",
                            Postcode = 21000,
                            Street = "JNA",
                            StreetNumber = "33"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4db83b89-7892-4d78-bef8-114f85135769"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("59ec3516-fd6a-4649-b8cf-9eb061e97861"),
                            Name = "Brufen"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientAdmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientAdmissionId");

                    b.ToTable("TreatmentReport");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicinesId")
                        .HasColumnType("uuid");

                    b.HasKey("IngredientsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("IngredientMedicine");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingScheduleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("WorkingScheduleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("925c76f4-7154-4fbe-9b86-3c4d2756c1e7"),
                            AddressId = new Guid("1897cb35-3aef-4aee-842d-69365210e93b"),
                            Email = "DjordjeLopov@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Djordje",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Vuckovic",
                            UserRole = 0,
                            Username = "Tadjo",
                            RoomId = new Guid("667ee3a7-e5f9-4610-967e-72332e89c7f0"),
                            SpecializationId = new Guid("c2102b83-6fa4-4284-9590-4fd8246b5f86"),
                            WorkingScheduleId = new Guid("d6ce3d73-981a-4781-b61b-60c2e1421bf4")
                        },
                        new
                        {
                            Id = new Guid("752913c5-85cf-45d8-b16d-cd90e0155525"),
                            AddressId = new Guid("fa8eedaf-835b-4f61-bc79-73a9f5a15ab7"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Ilija",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 0,
                            Username = "Ilija",
                            RoomId = new Guid("b63e0855-a020-44f7-93ec-73a784344b58"),
                            SpecializationId = new Guid("4e4d0d85-77b8-4845-a9df-a57c6e7bb73e"),
                            WorkingScheduleId = new Guid("d6ce3d73-981a-4781-b61b-60c2e1421bf4")
                        },
                        new
                        {
                            Id = new Guid("87eaca5e-ccef-4560-9918-45aef4a583da"),
                            AddressId = new Guid("fa8eedaf-835b-4f61-bc79-73a9f5a15ab7"),
                            Email = "Cajons@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Milos",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Milosevic",
                            UserRole = 0,
                            Username = "Milos",
                            RoomId = new Guid("34ada0ef-1541-4799-b71e-446f1e6e77e0"),
                            SpecializationId = new Guid("4e4d0d85-77b8-4845-a9df-a57c6e7bb73e"),
                            WorkingScheduleId = new Guid("d6ce3d73-981a-4781-b61b-60c2e1421bf4")
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc5cfcfc-c672-41f2-9b50-1f8a00b9dc8f"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manager",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Manger",
                            UserRole = 1,
                            Username = "Manager"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.ApplicationUsers.Model.ApplicationUser");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc7cc2d4-f23b-498a-9928-2e1825d44ba7"),
                            AddressId = new Guid("fa8eedaf-835b-4f61-bc79-73a9f5a15ab7"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Sale",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Lave",
                            UserRole = 2,
                            Username = "Sale",
                            Age = 15,
                            BloodType = 4,
                            DateOfBirth = new DateTime(2007, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("752913c5-85cf-45d8-b16d-cd90e0155525"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("9ab30021-d784-497a-81d0-b1242d59d9a2"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Miki",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Djuricic",
                            UserRole = 2,
                            Username = "Miki",
                            Age = 32,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1990, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("752913c5-85cf-45d8-b16d-cd90e0155525"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("34dd85e8-cc50-4a2c-bfc5-b0ab0fb87619"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Nina",
                            Age = 5,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("752913c5-85cf-45d8-b16d-cd90e0155525"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("15e20d8e-a393-413f-b473-54dc7c7509a7"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Mina",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Minic",
                            UserRole = 2,
                            Username = "Mina",
                            Age = 9,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("87eaca5e-ccef-4560-9918-45aef4a583da"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("2613925b-da57-4a10-abaa-7455f70200f8"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Nikola",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Nikolic",
                            UserRole = 2,
                            Username = "Nikola",
                            Age = 18,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("752913c5-85cf-45d8-b16d-cd90e0155525"),
                            Gender = 2
                        },
                        new
                        {
                            Id = new Guid("0275d337-ad70-481b-9bbc-ee79df427259"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Marko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Marko",
                            Age = 65,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("87eaca5e-ccef-4560-9918-45aef4a583da"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("7629d54a-c5d5-47ad-a8be-4b4bcdb0b6a5"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Manja",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Maric",
                            UserRole = 2,
                            Username = "Manja",
                            Age = 50,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("87eaca5e-ccef-4560-9918-45aef4a583da"),
                            Gender = 1
                        },
                        new
                        {
                            Id = new Guid("619578ef-3c28-41a1-8ada-1e6589632003"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Darko",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Darkovic",
                            UserRole = 2,
                            Username = "Darko",
                            Age = 70,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("925c76f4-7154-4fbe-9b86-3c4d2756c1e7"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("01b8af2e-6cd7-49b7-a969-94ea95fad128"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Filip",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Filipic",
                            UserRole = 2,
                            Username = "Filip",
                            Age = 56,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("925c76f4-7154-4fbe-9b86-3c4d2756c1e7"),
                            Gender = 0
                        },
                        new
                        {
                            Id = new Guid("d51e8aff-ef89-4d4a-af96-2600293b15dd"),
                            AddressId = new Guid("289bf081-fafe-4c30-919b-8f68b34f6187"),
                            Email = "psw.isa.mail@gmail.com",
                            Enabled = true,
                            Jmbg = "99999999",
                            Name = "Tara",
                            Password = "VNEXwZIHrujyvlg0wnmHM2FkQ52BKSkUTv5Gobgj4MeeAADy",
                            Phone = "+612222222",
                            Surname = "Markovic",
                            UserRole = 2,
                            Username = "Tara",
                            Age = 61,
                            BloodType = 0,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("87eaca5e-ccef-4560-9918-45aef4a583da"),
                            Gender = 1
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationPrescriptionMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.ExaminationPrescription", null)
                        .WithMany()
                        .HasForeignKey("ExaminationPrescriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExaminationSymptom", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", null)
                        .WithMany()
                        .HasForeignKey("ExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Examinations.Model.Symptom", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HospitalLibrary.Appointments.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasData(
                                new
                                {
                                    AppointmentId = new Guid("8cb2ee95-2737-479a-a9c5-784ffe61000e"),
                                    From = new DateTime(2023, 7, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 7, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Duration");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.BloodConsumptions.Model.BloodConsumption", b =>
                {
                    b.HasOne("HospitalLibrary.BloodUnits.Model.BloodUnit", "BloodUnit")
                        .WithMany("Consumptions")
                        .HasForeignKey("BloodUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodUnit");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.WorkingSchedule", b =>
                {
                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DayOfWork", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("DayOfWorkTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("d6ce3d73-981a-4781-b61b-60c2e1421bf4"),
                                    From = new DateTime(2022, 10, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 14, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("89eb9da1-220b-4407-8e85-7c2edb5e906d"),
                                    From = new DateTime(2022, 10, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 22, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "ExpirationDate", b1 =>
                        {
                            b1.Property<Guid>("WorkingScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationFrom");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ExpirationTo");

                            b1.HasKey("WorkingScheduleId");

                            b1.ToTable("WorkingSchedules");

                            b1.WithOwner()
                                .HasForeignKey("WorkingScheduleId");

                            b1.HasData(
                                new
                                {
                                    WorkingScheduleId = new Guid("d6ce3d73-981a-4781-b61b-60c2e1421bf4"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    WorkingScheduleId = new Guid("89eb9da1-220b-4407-8e85-7c2edb5e906d"),
                                    From = new DateTime(2022, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DayOfWork");

                    b.Navigation("ExpirationDate");
                });

            modelBuilder.Entity("HospitalLibrary.EquipmentMovement.Model.EquipmentMovementAppointment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "DestinationRoom")
                        .WithMany()
                        .HasForeignKey("DestinationRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "OriginalRoom")
                        .WithMany()
                        .HasForeignKey("OriginalRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("EquipmentMovementAppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("EquipmentMovementAppointmentId");

                            b1.ToTable("EquipmentMovementAppointment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentMovementAppointmentId");
                        });

                    b.Navigation("DestinationRoom");

                    b.Navigation("Duration");

                    b.Navigation("OriginalRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Appointments.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.ExaminationPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Examinations.Model.Examination", "Examination")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("HospitalLibrary.Holidays.Model.Holiday", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Holidays")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.SharedModel.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("HolidayId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("HolidayId");

                            b1.ToTable("Holidays");

                            b1.WithOwner()
                                .HasForeignKey("HolidayId");

                            b1.HasData(
                                new
                                {
                                    HolidayId = new Guid("ede11f4d-cc98-4788-a89c-9eb93a0f9807"),
                                    From = new DateTime(2022, 10, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    To = new DateTime(2022, 10, 27, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.PatientAdmission", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.Patient", "Patient")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.RoomBed", "SelectedBed")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedBedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "SelectedRoom")
                        .WithMany("Patients")
                        .HasForeignKey("SelectedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("SelectedBed");

                    b.Navigation("SelectedRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.BloodPrescription", b =>
                {
                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("BloodPrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Prescriptions.Model.MedicinePrescription", b =>
                {
                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", "Medicine")
                        .WithMany("MedicinePrescription")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.TreatmentReports.Model.TreatmentReport", "TreatmentReport")
                        .WithMany("MedicinePrescriptions")
                        .HasForeignKey("TreatmentReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("TreatmentReport");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomEquipment", b =>
                {
                    b.HasOne("HospitalLibrary.Rooms.Model.Room", null)
                        .WithMany("Equipments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.HasOne("HospitalLibrary.Patients.Model.PatientAdmission", "PatientAdmission")
                        .WithMany()
                        .HasForeignKey("PatientAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAdmission");
                });

            modelBuilder.Entity("IngredientMedicine", b =>
                {
                    b.HasOne("HospitalLibrary.SharedModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Medicines.Model.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Rooms.Model.Room", "Room")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalLibrary.Doctors.Model.Doctor", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Doctors.Model.WorkingSchedule", "WorkingSchedule")
                        .WithMany()
                        .HasForeignKey("WorkingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");

                    b.Navigation("WorkingSchedule");
                });

            modelBuilder.Entity("HospitalLibrary.Managers.Manager", b =>
                {
                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Managers.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Doctors.Model.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.ApplicationUsers.Model.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("HospitalLibrary.Patients.Model.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.BloodUnits.Model.BloodUnit", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalLibrary.Examinations.Model.Examination", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Medicines.Model.Medicine", b =>
                {
                    b.Navigation("MedicinePrescription");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Doctor");

                    b.Navigation("Equipments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Rooms.Model.RoomBed", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.TreatmentReports.Model.TreatmentReport", b =>
                {
                    b.Navigation("BloodPrescriptions");

                    b.Navigation("MedicinePrescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Doctors.Model.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Holidays");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalLibrary.Patients.Model.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
